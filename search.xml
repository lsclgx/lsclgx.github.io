<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3响应式系统-reactive、ref</title>
      <link href="/2024/07/21/Vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F-reactive%E3%80%81ref/"/>
      <url>/2024/07/21/Vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F-reactive%E3%80%81ref/</url>
      
        <content type="html"><![CDATA[<h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><h4 id="vue2的响应式原理"><a href="#vue2的响应式原理" class="headerlink" title="vue2的响应式原理"></a>vue2的响应式原理</h4><p>它只能监听<strong>指定对象的、指定属性的 getter 和 setter。所以当对象或数组新增属性时，vue2无法为新增的属性增加响应性。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, &#123;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue3的响应式系统"><a href="#vue3的响应式系统" class="headerlink" title="vue3的响应式系统"></a>vue3的响应式系统</h3><h4 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h4><p>简单实现reactive，核心有几部分</p><p>effect：响应式的依赖收集和触发的机制的体现</p><p>reactive函数：提供出去要使用的函数</p><p>track：收集&#x2F;追踪依赖</p><p>trigger：触发依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// effect，接收一个回调函数，执行</span></span><br><span class="line"><span class="keyword">let</span> activeEffect = <span class="literal">null</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">reactiveEffect</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fn</span> = fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    activeEffect = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">effect</span> = (<span class="params">fn</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> re = <span class="keyword">new</span> <span class="title function_">reactiveEffect</span>(fn)</span><br><span class="line">  re.<span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive，接收一个对象，返回它的代理对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactiveFn</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      target[key] = value</span><br><span class="line">      <span class="title function_">trigger</span>(target, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// track，收集依赖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!activeEffect) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, (dep = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// trigger，执行依赖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (dep) dep.<span class="title function_">forEach</span>(<span class="function"><span class="params">eff</span> =&gt;</span> &#123;</span><br><span class="line">    eff.<span class="title function_">fn</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Adam&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxyStudent = <span class="title function_">reactiveFn</span>(student)</span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.wrap&#x27;</span>).<span class="property">innerHTML</span> = proxyStudent.<span class="property">name</span> + proxyStudent.<span class="property">age</span></span><br><span class="line">&#125;)</span><br><span class="line">proxyStudent.<span class="property">age</span> = <span class="number">19</span></span><br></pre></td></tr></table></figure><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p><strong>reactive 只能构建复杂数据类型的响应性，proxy就是这样。</strong>vue为我们提供了ref来解决这个问题。比较不熟悉的是 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get">get</a>t和<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/set" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/set">set</a> </p><ol><li><code>ref 方法</code>：接收任意数据</li><li><code>ref 方法</code>：生成RefC实例，并进行返回</li><li><code>ref 方法</code>：利用 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get">get</a> 和<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/set" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/set">set</a> 监听<code>getter、setter</code> 行为，以便执行<strong>依赖收集和依赖触发</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RefC</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeEffect) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;reffff&#x27;</span>, ref)</span><br><span class="line">      <span class="keyword">const</span> dep = ref.<span class="property">dep</span> || (ref.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Set</span>())</span><br><span class="line">      dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = newVal</span><br><span class="line">    <span class="keyword">if</span> (ref.<span class="property">dep</span>) ref.<span class="property">dep</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">eff</span> =&gt;</span> eff.<span class="title function_">fn</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefC</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用  </span></span><br><span class="line"><span class="keyword">const</span> v = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line"><span class="keyword">const</span> refVar = <span class="title function_">ref</span>(v)</span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.wrap&#x27;</span>).<span class="property">innerHTML</span> = refVar.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line">refVar.<span class="property">value</span> = <span class="string">&#x27;小红&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://juejin.cn/post/7186248802423013432">https://juejin.cn/post/7186248802423013432</a></p><p>编译时、运行时的源码解析:</p><p><a href="https://blog.csdn.net/qq_34618600/article/details/140893125">https://blog.csdn.net/qq_34618600/article/details/140893125</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WeakMap记录</title>
      <link href="/2024/07/21/weakMap/"/>
      <url>/2024/07/21/weakMap/</url>
      
        <content type="html"><![CDATA[<h3 id="weakMap是什么"><a href="#weakMap是什么" class="headerlink" title="weakMap是什么"></a>weakMap是什么</h3><h4 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h4><p>垃圾回收机制：垃圾回收机制会释放对象所占用的内存，但是垃圾回收机制的时机是不可控的</p><p>弱引用：即使有这个引用，垃圾回收机制在执行回收的时机也会将其回收</p><p>强引用：如果程序中有对一个对象的强引用，那么垃圾回收机制不会将其回收，我们手动将引用置为null，才可删除这个强引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj = <span class="literal">null</span>; <span class="comment">// 取消了对对象的强引用</span></span><br></pre></td></tr></table></figure><p>以下是Map的使用，key &#x3D; null 不会导致 key 的原引用对象被回收，因为这只解除了key对array对象的引用，但是map.set形成了map对array对象的强引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">let</span> key = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>); </span><br><span class="line"><span class="comment">// 建立map 对 key 所引用对象的强引用</span></span><br><span class="line">map.<span class="title function_">set</span>(key, <span class="number">1</span>); </span><br><span class="line"><span class="comment">// key = null 不会导致 key 的原引用对象被回收</span></span><br><span class="line">key = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 需要再解除map对key的引用才能使原引用对象被回收</span></span><br><span class="line">map.<span class="title function_">delete</span>(key);</span><br></pre></td></tr></table></figure><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>ES6的一个新特性</p><p>weakMap是和Map类似，Map的key对其引用的对象是强引用，weakMap就是字面意思，弱引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">wm.<span class="title function_">set</span>(obj, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="amp-x20-为什么要增加weakMap"><a href="#amp-x20-为什么要增加weakMap" class="headerlink" title="&amp;#x20;为什么要增加weakMap"></a>&amp;#x20;为什么要增加weakMap</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>1.只接受对象做为key</p><p>2.key对其所引用的对象是弱引用</p><p>3.WeakMap 不像 Map，一是没有遍历操作（即没有keys()、values()和entries()方法），也没有 size 属性，也不支持 clear 方法。</p><p>&amp;#x20;  WeakMap只有四个方法可用：get()、set()、has()、delete()。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>所以WeakMap 可以帮你省掉手动删除对象引用的步骤，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失。</p><p>当你不能或者不想控制关联数据的生命周期时就可以考虑使用 WeakMap</p><h3 id="amp-x20"><a href="#amp-x20" class="headerlink" title="&amp;#x20;"></a>&amp;#x20;</h3><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="1-在-DOM-对象上保存相关数据"><a href="#1-在-DOM-对象上保存相关数据" class="headerlink" title="1. 在 DOM 对象上保存相关数据"></a>1. 在 DOM 对象上保存相关数据</h4><p>传统使用 jQuery 的时候，我们会通过 $.data() 方法在 DOM 对象上储存相关信息(就比如在删除按钮元素上储存帖子的 ID 信息)，jQuery 内部会使用一个对象管理 DOM 和对应的数据，当你将 DOM 元素删除，DOM 对象置为空的时候，相关联的数据并不会被删除，你必须手动执行 $.removeData() 方法才能删除掉相关联的数据，WeakMap 就可以简化这一操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wm = <span class="keyword">new</span> <span class="title class_">WeakMap</span>(), element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.element&quot;</span>);</span><br><span class="line">wm.<span class="title function_">set</span>(element, <span class="string">&quot;data&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> value = wm.<span class="title function_">get</span>(elemet);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); </span><br><span class="line"><span class="comment">//</span></span><br><span class="line">element.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(element);</span><br><span class="line">element = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="2-数据缓存"><a href="#2-数据缓存" class="headerlink" title="2. 数据缓存"></a>2. 数据缓存</h4><p>从上一个例子，我们也可以看出，当我们需要关联对象和数据，比如在不修改原有对象的情况下储存某些属性或者根据对象储存一些计算的值等，而又不想管理这些数据的死活时非常适合考虑使用 WeakMap</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countOwnKeys</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Cached&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> cache.<span class="title function_">get</span>(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Computed&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> count = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span>;</span><br><span class="line">        cache.<span class="title function_">set</span>(obj, count);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-私有属性"><a href="#3-私有属性" class="headerlink" title="3. 私有属性"></a>3. 私有属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> privateData = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        privateData.<span class="title function_">set</span>(<span class="variable language_">this</span>, &#123; <span class="attr">name</span>: name, <span class="attr">age</span>: age &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> privateData.<span class="title function_">get</span>(<span class="variable language_">this</span>).<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> privateData.<span class="title function_">get</span>(<span class="variable language_">this</span>).<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Person</span>;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3源码学习方法</title>
      <link href="/2024/07/20/Vue3%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/20/Vue3%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="vue3核心学习"><a href="#vue3核心学习" class="headerlink" title="vue3核心学习"></a>vue3核心学习</h4><h5 id="官方仓库"><a href="#官方仓库" class="headerlink" title="官方仓库"></a>官方仓库</h5><p><a href="https://github.com/vuejs/core">https://github.com/vuejs/core</a></p><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p>需要关注的，主要的目录就两个<br>package：源码都放在这里<br>scripts：脚本文件，配置文件，编译和打包用</p><h5 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h5><ol><li>reactivity，响应式模块。主要职责：监听响应式数据，进行响应式操作</li><li>compiler，编译时模块。主要职责：编译，将template模版编译成render函数</li><li>runtime，运行时模块。主要职责：渲染，将虚拟dom渲染到真实dom上</li></ol><h5 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h5><p>package.json中的脚本命令，主要关注，dev和build。<br>1.dev：实时编译，修改vue源码会实时编译<br>2.build：打包到dist下</p><p>执行<br>pnpm run build<br>在package&#x2F;vue目录下生成dist文件夹，针对不同模块打包成不同的文件</p><p>此时我们就可以编写测试文件。在packages&#x2F;vue&#x2F;example目录为vue提供了很多示例页面, 每个页面都引入Vue构建后的文件.&#x2F;packages&#x2F;vue&#x2F;dist&#x2F;vue.global.js。这些文件都可以调试，也可以在此目录新建测试文件。在浏览器中运行测试文件, F12打开开发工具, 在源代码栏找到测试文件打上断点，即可开始调试。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>threejs全景看房</title>
      <link href="/2024/06/20/threejs-wholescene/"/>
      <url>/2024/06/20/threejs-wholescene/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>做物联网智能家居场景的时候，有个需求，类似全景看房，房内有我们智能家居设备的展示</p><h4 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h4><p>参考链接：<a href="https://www.cnblogs.com/dragonir/p/17301683.html">https://www.cnblogs.com/dragonir/p/17301683.html</a><br>参考链接：<a href="https://www.zhihu.com/tardis/bd/art/692857119?source_id=1001">https://www.zhihu.com/tardis/bd/art/692857119?source_id=1001</a></p><p>实现原理示意图如下所示，页面总共将创建 3 个场景，origin 表示当前场景，destination 表示目标场景，利用当前场景和目标场景合成用于展示过渡效果的 transition 过渡场景，当点击切换房间按钮时，三个场景的加载顺便分别为 origin -&gt; transition -&gt; destiontion，由此在视觉上形成从上个房间切换到下个房间并且伴随渐变过渡的场景漫游效果。</p><p><img src="/image/threejstransition.jpg" alt="vueasync"></p><h5 id="1-渲染一个场景"><a href="#1-渲染一个场景" class="headerlink" title="1.渲染一个场景"></a>1.渲染一个场景</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个场景</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个透视相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">75</span>, width / height, <span class="number">0.1</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个球体。节点数量越大，需要计算的三角形就越多，影响性能</span></span><br><span class="line"><span class="keyword">const</span> sphereGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="comment">/*半径*/</span><span class="number">50</span>, <span class="comment">/*垂直节点数量*/</span><span class="number">50</span>, <span class="comment">/*水平节点数量*/</span><span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个材质</span></span><br><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">map</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&#x27;./images/kanfang1.jpg&#x27;</span>), <span class="comment">// 加载一整张纹理图片, 360全景图</span></span><br><span class="line">  <span class="attr">side</span>: <span class="variable constant_">THREE</span>.<span class="property">DoubleSide</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明球体纹理为全景图。将球体添加到场景</span></span><br><span class="line"><span class="keyword">const</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(sphereGeometry, material);</span><br><span class="line">scene.<span class="title function_">add</span>(sphere);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 离屏渲染</span></span><br><span class="line"><span class="keyword">const</span> renderTargetParameters = &#123;</span><br><span class="line">  <span class="attr">format</span>: <span class="variable constant_">THREE</span>.<span class="property">RGBAFormat</span>,</span><br><span class="line">  <span class="attr">minFilter</span>: <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>,</span><br><span class="line">  <span class="attr">magFilter</span>: <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>,</span><br><span class="line">  <span class="attr">stencilBuffer</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line">fbo = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderTarget</span>(width, height, renderTargetParameters);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">  <span class="attr">antialias</span>: <span class="literal">true</span> <span class="comment">// 是否执行抗锯齿</span></span><br><span class="line">&#125;)</span><br><span class="line">renderer.<span class="title function_">setSize</span>(width, height) <span class="comment">// 设置canvas宽高</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>) <span class="comment">// 将canvas元素添加到文档中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制相机</span></span><br><span class="line"><span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera, renderer.<span class="property">domElement</span>) <span class="comment">// 创建相机控制器，用鼠标键盘来来控制相机</span></span><br><span class="line">controls.<span class="property">enableDamping</span> = <span class="literal">true</span> <span class="comment">// 使动画循环使用时阻尼或自转 意思是否有惯性</span></span><br><span class="line">controls.<span class="property">dampingFactor</span> = <span class="number">1</span> <span class="comment">// 动态阻尼系数 就是鼠标拖拽旋转灵敏度</span></span><br><span class="line">controls.<span class="property">enableZoom</span> = <span class="literal">true</span> <span class="comment">// 是否可以缩放</span></span><br><span class="line">controls.<span class="property">autoRotate</span> = <span class="literal">false</span> <span class="comment">// 是否自动旋转</span></span><br><span class="line">controls.<span class="property">minDistance</span> = <span class="number">10</span> <span class="comment">// 设置相机距离原点的最近距离</span></span><br><span class="line">controls.<span class="property">maxDistance</span> = <span class="number">100</span> <span class="comment">// 设置相机距离原点的最远距离</span></span><br><span class="line">controls.<span class="property">enablePan</span> = <span class="literal">false</span> <span class="comment">// 是否开启右键拖拽</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">50</span>, <span class="number">0</span>, -<span class="number">50</span>); <span class="comment">// 设置lookAt的目标点</span></span><br><span class="line">camera.<span class="title function_">lookAt</span>(target);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染场景的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="comment">// controls.update()</span></span><br><span class="line">  renderer.<span class="title function_">setRenderTarget</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (type != <span class="string">&#x27;trans&#x27;</span>) &#123;</span><br><span class="line">    renderer.<span class="title function_">setRenderTarget</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    renderer.<span class="title function_">setRenderTarget</span>(fbo);</span><br><span class="line">    renderer.<span class="title function_">clear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera) <span class="comment">// 渲染场景</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-目标场景"><a href="#2-目标场景" class="headerlink" title="2.目标场景"></a>2.目标场景</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建目标场景</span></span><br><span class="line"><span class="keyword">const</span> sceneDestination = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个球体。节点数量越大，需要计算的三角形就越多，影响性能</span></span><br><span class="line"><span class="keyword">const</span> sphereGeometry1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="comment">/*半径*/</span><span class="number">50</span>, <span class="comment">/*垂直节点数量*/</span><span class="number">50</span>, <span class="comment">/*水平节点数量*/</span><span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个材质</span></span><br><span class="line"><span class="keyword">const</span> material1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">map</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&#x27;./images/kanfang2.jpg&#x27;</span>), <span class="comment">//加载一整张纹理图片</span></span><br><span class="line">  <span class="attr">side</span>: <span class="variable constant_">THREE</span>.<span class="property">DoubleSide</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明球体纹理为全景图。将球体添加到场景</span></span><br><span class="line"><span class="keyword">const</span> sphere1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(sphereGeometry1, material1);</span><br><span class="line">sceneDestination.<span class="title function_">add</span>(sphere1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 离屏渲染</span></span><br><span class="line">fbo2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderTarget</span>(width, height, &#123;</span><br><span class="line">  <span class="attr">format</span>: <span class="variable constant_">THREE</span>.<span class="property">RGBAFormat</span>,</span><br><span class="line">  <span class="attr">minFilter</span>: <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>,</span><br><span class="line">  <span class="attr">magFilter</span>: <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染目标场景</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render2</span>(<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="comment">// controls.update()</span></span><br><span class="line">  <span class="keyword">if</span> (type != <span class="string">&#x27;trans&#x27;</span>) &#123;</span><br><span class="line">    renderer.<span class="title function_">setRenderTarget</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    renderer.<span class="title function_">setRenderTarget</span>(fbo2);</span><br><span class="line">    renderer.<span class="title function_">clear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render2&#x27;</span>)</span><br><span class="line">  renderer.<span class="title function_">render</span>(sceneDestination, camera) <span class="comment">// 渲染场景</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-创建过渡场景"><a href="#3-创建过渡场景" class="headerlink" title="3.创建过渡场景"></a>3.创建过渡场景</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过渡的参数</span></span><br><span class="line"><span class="keyword">const</span> transitionParams = &#123;</span><br><span class="line">  <span class="comment">// 过渡进程，从0-1</span></span><br><span class="line">  <span class="attr">transition</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 过渡纹理</span></span><br><span class="line">  <span class="attr">texture</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="comment">// 是否使用纹理</span></span><br><span class="line">  <span class="attr">useTexture</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 过渡速度</span></span><br><span class="line">  <span class="attr">transitionSpeed</span>: <span class="number">0.03</span>,</span><br><span class="line">  <span class="comment">// 是否开始动画</span></span><br><span class="line">  <span class="attr">animate</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建过渡场景</span></span><br><span class="line"><span class="keyword">const</span> sceneTransition = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line"><span class="keyword">const</span> materialTransition = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">ShaderMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">uniforms</span>: &#123;</span><br><span class="line">    <span class="attr">tDiffuse1</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tDiffuse2</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mixRatio</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">0.0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">threshold</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">0.1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">useTexture</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tMixTexture</span>: &#123;</span><br><span class="line">      <span class="attr">value</span>: transitionParams.<span class="property">texture</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 顶点着色器，这是glsl语言在js中以字符串方式引入进来</span></span><br><span class="line">  <span class="attr">vertexShader</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    varying vec2 vUv;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        vUv = vec2( uv.x, uv.y );</span></span><br><span class="line"><span class="string">        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="comment">// 片着色器</span></span><br><span class="line">  <span class="attr">fragmentShader</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    uniform float mixRatio;</span></span><br><span class="line"><span class="string">    uniform sampler2D tDiffuse1;</span></span><br><span class="line"><span class="string">    uniform sampler2D tDiffuse2;</span></span><br><span class="line"><span class="string">    uniform sampler2D tMixTexture;</span></span><br><span class="line"><span class="string">    uniform bool useTexture;</span></span><br><span class="line"><span class="string">    uniform float threshold;</span></span><br><span class="line"><span class="string">    varying vec2 vUv;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        vec4 texel1 = texture2D( tDiffuse1, vUv );</span></span><br><span class="line"><span class="string">        vec4 texel2 = texture2D( tDiffuse2, vUv );</span></span><br><span class="line"><span class="string">        if (useTexture==true) &#123;</span></span><br><span class="line"><span class="string">            vec4 transitionTexel = texture2D( tMixTexture, vUv );</span></span><br><span class="line"><span class="string">            float r = mixRatio * (1.0 + threshold * 2.0) - threshold;</span></span><br><span class="line"><span class="string">            float mixf=clamp((transitionTexel.r - r)*(1.0/threshold), 0.0, 1.0);</span></span><br><span class="line"><span class="string">            gl_FragColor = mix( texel1, texel2, mixf );</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            gl_FragColor = mix( texel2, texel1, mixRatio );</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> finalMesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(<span class="number">1</span>, <span class="number">1</span>), materialTransition);</span><br><span class="line">sceneTransition.<span class="title function_">add</span>(finalMesh);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建过渡正交相机</span></span><br><span class="line"><span class="keyword">let</span> frustumSize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> cameraTransition = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">OrthographicCamera</span>(frustumSize / -<span class="number">2</span>, frustumSize / <span class="number">2</span>, frustumSize / <span class="number">2</span>, frustumSize / -<span class="number">2</span>, -<span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染场景</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">render3</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render3)</span><br><span class="line">  <span class="keyword">if</span> (transitionParams.<span class="property">transition</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentScene === <span class="string">&#x27;first&#x27;</span>) <span class="title function_">render</span>();</span><br><span class="line">    <span class="keyword">if</span> (currentScene === <span class="string">&#x27;second&#x27;</span>) <span class="title function_">render2</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (transitionParams.<span class="property">transition</span> &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里实现两个固定场景切换</span></span><br><span class="line">    currentScene = currentScene === <span class="string">&#x27;first&#x27;</span> ? <span class="string">&#x27;second&#x27;</span> : <span class="string">&#x27;first&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">innerHTML</span> = currentScene === <span class="string">&#x27;first&#x27;</span> ? <span class="string">&#x27;进入户型2&#x27;</span> : <span class="string">&#x27;进入户型1&#x27;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      transitionParams.<span class="property">animate</span> = <span class="literal">false</span>;</span><br><span class="line">      transitionParams.<span class="property">transition</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">    currentScene === <span class="string">&#x27;first&#x27;</span> &amp;&amp; <span class="title function_">render</span>();</span><br><span class="line">    currentScene === <span class="string">&#x27;second&#x27;</span> &amp;&amp; <span class="title function_">render2</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="string">&#x27;trans&#x27;</span>);</span><br><span class="line">    <span class="title function_">render2</span>(<span class="string">&#x27;trans&#x27;</span>)</span><br><span class="line">    renderer.<span class="title function_">setRenderTarget</span>(<span class="literal">null</span>);</span><br><span class="line">    renderer.<span class="title function_">clear</span>();</span><br><span class="line">    renderer.<span class="title function_">render</span>(sceneTransition, cameraTransition);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (transitionParams.<span class="property">animate</span> &amp;&amp; transitionParams.<span class="property">transition</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 动画还在执行过程中</span></span><br><span class="line">    transitionParams.<span class="property">transition</span> = transitionParams.<span class="property">transition</span> + transitionParams.<span class="property">transitionSpeed</span>;</span><br><span class="line">    materialTransition.<span class="property">uniforms</span>.<span class="property">mixRatio</span>.<span class="property">value</span> = transitionParams.<span class="property">transition</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render3</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">update</span> = (<span class="params">params, f1, f2</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fbo2.texture&#x27;</span>, fbo2.<span class="property">texture</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fbo.texture&#x27;</span>, fbo.<span class="property">texture</span>)</span><br><span class="line">  <span class="comment">// 动画正在执行中</span></span><br><span class="line">  <span class="keyword">if</span> (transitionParams.<span class="property">animate</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; transitionSpeed = <span class="number">0.03</span>, texture, useTexture = <span class="literal">false</span> &#125; = params;</span><br><span class="line">  transitionParams.<span class="property">texture</span> = texture;</span><br><span class="line">  transitionParams.<span class="property">useTexture</span> = useTexture;</span><br><span class="line"></span><br><span class="line">  transitionParams.<span class="property">transition</span> = <span class="number">0</span>;</span><br><span class="line">  transitionParams.<span class="property">transitionSpeed</span> = transitionSpeed;</span><br><span class="line">  transitionParams.<span class="property">animate</span> = <span class="literal">true</span>;</span><br><span class="line">  materialTransition.<span class="property">uniforms</span>.<span class="property">tDiffuse1</span>.<span class="property">value</span> = f1.<span class="property">texture</span>;</span><br><span class="line">  materialTransition.<span class="property">uniforms</span>.<span class="property">tDiffuse2</span>.<span class="property">value</span> = f2.<span class="property">texture</span>;</span><br><span class="line">  materialTransition.<span class="property">uniforms</span>.<span class="property">threshold</span>.<span class="property">value</span> = <span class="number">0.1</span>;</span><br><span class="line">  materialTransition.<span class="property">uniforms</span>.<span class="property">mixRatio</span>.<span class="property">value</span> = <span class="number">0.0</span>;</span><br><span class="line">  materialTransition.<span class="property">uniforms</span>.<span class="property">tMixTexture</span>.<span class="property">value</span> = texture;</span><br><span class="line">  materialTransition.<span class="property">uniforms</span>.<span class="property">useTexture</span>.<span class="property">value</span> = useTexture;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这里实现两个固定场景切换</span></span><br><span class="line">  <span class="keyword">if</span> (currentScene === <span class="string">&#x27;first&#x27;</span>) <span class="title function_">update</span>(transitionParams, fbo2, fbo);</span><br><span class="line">  <span class="keyword">else</span> <span class="title function_">update</span>(transitionParams, fbo, fbo2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> threejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> threejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>threejs基本使用</title>
      <link href="/2024/05/13/threejs/"/>
      <url>/2024/05/13/threejs/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>公司要做3D大屏和3D组态，首先要做几个3D大屏对外演示</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>以下记录我的工作中需求的基本实现，方便以后使用。官方的代码中有示例，大部分效果都能在示例中找到。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>工程项目引入可以使用npm，html文件使用，直接下载官方提供的代码即可。这里使用0.148.0版本，threejs官方更新频繁，注意版本，160的版本按148的语法，材质反光就不一样，具体未深入研究。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;importmap&quot;</span>&gt;</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="string">&quot;imports&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;three&quot;</span>: <span class="string">&quot;./node_modules/three/build/three.module.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;three/addons/&quot;</span>: <span class="string">&quot;./node_modules/three/examples/jsm/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">  <span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/controls/OrbitControls.js&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">DragControls</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/controls/DragControls.js&#x27;</span>;</span><br><span class="line">  <span class="comment">// 引入dat.gui.js的一个类GUI</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="variable constant_">GUI</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/libs/lil-gui.module.min.js&#x27;</span>;</span><br><span class="line">  <span class="comment">// gltf加载器</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">GLTFLoader</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/loaders/GLTFLoader.js&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">DRACOLoader</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/loaders/DRACOLoader.js&#x27;</span>;</span><br><span class="line">  <span class="comment">// fbx加载器</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">FBXLoader</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/loaders/FBXLoader.js&#x27;</span>;</span><br><span class="line">  <span class="comment">// obj加载器</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">OBJLoader</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/loaders/OBJLoader.js&#x27;</span>;</span><br><span class="line">  <span class="comment">// mtl 材质加载器</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">MTLLoader</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/loaders/MTLLoader.js&#x27;</span>;</span><br><span class="line">  <span class="comment">// 渲染</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">EffectComposer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/postprocessing/EffectComposer.js&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">OutlinePass</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/postprocessing/OutlinePass.js&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">RenderPass</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/postprocessing/RenderPass.js&#x27;</span>;</span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">ShaderPass</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/addons/postprocessing/ShaderPass.js&quot;</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">FXAAShader</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/addons/shaders/FXAAShader.js&quot;</span></span><br><span class="line">  <span class="comment">// css3d</span></span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">CSS3DRenderer</span>, <span class="title class_">CSS3DObject</span>, <span class="title class_">CSS3DSprite</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/addons/renderers/CSS3DRenderer.js&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>1.新建一个场景，以后的光源、相机、模型等都需要添加到场景中。<br>2.给场景添加材质，这里用一个天空的360全景分成的前后上下左右6个面做天空盒的6个方位的面。也可以用球体和360全景图做，后面会写个文档记录一下全景图<br>3.将相机放在天空盒内，就有了置身场景内的效果。更多功能看官方文档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br><span class="line"><span class="comment">// 天空盒</span></span><br><span class="line"><span class="keyword">var</span> urls = [</span><br><span class="line">  <span class="string">&#x27;./models/new0713/yun4/px.png&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;./models/new0713/yun4/nx.png&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;./models/new0713/yun4/py.png&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;./models/new0713/yun4/ny.png&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;./models/new0713/yun4/pz.png&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;./models/new0713/yun4/nz.png&#x27;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cubeLoader = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">CubeTextureLoader</span>();</span><br><span class="line">scene.<span class="property">background</span> = cubeLoader.<span class="title function_">load</span>(urls);</span><br><span class="line"><span class="comment">// 边缘雾化，使效果更逼真</span></span><br><span class="line">scene.<span class="property">fog</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Fog</span>(<span class="number">0xD3DBE7</span>, <span class="number">1500</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平面几何体PlaneGeometry，做地面</span></span><br><span class="line"><span class="keyword">let</span> texture1 = textureLoader.<span class="title function_">load</span>(<span class="string">&#x27;./models/new0713/dimian.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> textureNormal1 = textureLoader.<span class="title function_">load</span>(<span class="string">&#x27;./models/new0713/dimian.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">texture1.<span class="property">wrapS</span> = texture1.<span class="property">wrapT</span> = <span class="variable constant_">THREE</span>.<span class="property">RepeatWrapping</span>;</span><br><span class="line">texture1.<span class="property">repeat</span>.<span class="title function_">set</span>(<span class="number">25</span>, <span class="number">25</span>);</span><br><span class="line">texture1.<span class="property">anisotropy</span> = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> planeGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(<span class="number">5000</span>, <span class="number">5000</span>, <span class="number">320</span>, <span class="number">320</span>);</span><br><span class="line"><span class="keyword">const</span> planeMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshStandardMaterial</span>(&#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="number">0x707070</span>,</span><br><span class="line">  <span class="attr">map</span>: texture1,<span class="comment">// 普通纹理贴图</span></span><br><span class="line">  <span class="attr">roughness</span>: <span class="number">0.3</span>,</span><br><span class="line">  <span class="attr">lightMap</span>: textureNormal1,</span><br><span class="line">  <span class="comment">// normalMap: textureNormal, //法线贴图</span></span><br><span class="line">  <span class="attr">bumpScale</span>: <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> plane = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(planeGeometry, planeMaterial);</span><br><span class="line">plane.<span class="property">name</span> = <span class="string">&#x27;地面&#x27;</span></span><br><span class="line">plane.<span class="property">rotation</span>.<span class="property">x</span> = - <span class="number">0.5</span> * <span class="title class_">Math</span>.<span class="property">PI</span>; <span class="comment">// 跟坐标系x,z平面平行</span></span><br><span class="line">plane.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">plane.<span class="property">receiveShadow</span> = <span class="literal">true</span>;</span><br><span class="line">scene.<span class="title function_">add</span>(plane);</span><br></pre></td></tr></table></figure><h5 id="光源"><a href="#光源" class="headerlink" title="光源"></a>光源</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点光源</span></span><br><span class="line"><span class="keyword">const</span> pointLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointLight</span>(<span class="number">0xffffff</span>, <span class="number">2.0</span>)</span><br><span class="line">pointLight.<span class="property">position</span>.<span class="title function_">set</span>(-<span class="number">1000</span>, <span class="number">1000</span>, -<span class="number">1000</span>)</span><br><span class="line">pointLight.<span class="property">castShadow</span> = <span class="literal">true</span></span><br><span class="line">pointLight.<span class="property">shadow</span>.<span class="property">mapSize</span>.<span class="property">width</span> = <span class="number">2048</span>; <span class="comment">// default</span></span><br><span class="line">pointLight.<span class="property">shadow</span>.<span class="property">mapSize</span>.<span class="property">height</span> = <span class="number">2048</span>; <span class="comment">// default</span></span><br><span class="line">pointLight.<span class="property">shadow</span>.<span class="property">camera</span>.<span class="property">near</span> = <span class="number">0.5</span>; <span class="comment">// default</span></span><br><span class="line">pointLight.<span class="property">shadow</span>.<span class="property">camera</span>.<span class="property">far</span> = <span class="number">10000</span> <span class="comment">// default</span></span><br><span class="line">scene.<span class="title function_">add</span>(pointLight)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以帮助观察对象在场景中的位置</span></span><br><span class="line"><span class="keyword">const</span> pointLightHelper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointLightHelper</span>(pointLight, <span class="number">5.0</span>, <span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">scene.<span class="title function_">add</span>(pointLightHelper)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境光</span></span><br><span class="line"><span class="keyword">let</span> ambient = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AmbientLight</span>(<span class="number">0x404040</span>);</span><br><span class="line">scene.<span class="title function_">add</span>(ambient);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 平行光 不能产生阴影</span></span><br><span class="line"><span class="keyword">const</span> directionalLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">DirectionalLight</span>(<span class="number">0xffffff</span>, <span class="number">0.5</span>);</span><br><span class="line">scene.<span class="title function_">add</span>(directionalLight); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 半球光</span></span><br><span class="line"><span class="keyword">const</span> hemiLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">HemisphereLight</span>(<span class="number">0xddeeff</span>, <span class="number">0x0f0e0d</span>, <span class="number">0.02</span>);</span><br><span class="line">hemiLight.<span class="property">intensity</span> = <span class="number">1</span>;</span><br><span class="line">scene.<span class="title function_">add</span>(hemiLight);</span><br></pre></td></tr></table></figure><h5 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">75</span>, width / height, <span class="number">1</span>, <span class="number">3000</span>)</span><br><span class="line">camera.<span class="title function_">setViewOffset</span>(width, height, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">camera.<span class="property">position</span>.<span class="title function_">set</span>(-<span class="number">800</span>, <span class="number">100</span>, <span class="number">80</span>)</span><br><span class="line">camera.<span class="title function_">lookAt</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用了OrbitControls后，相机的属性被此控制器接管，包括位置和观察目标方位，如果设置camera.lookAt不生效，优先考虑这个方面</span></span><br><span class="line"><span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera, renderer.<span class="property">domElement</span>)</span><br><span class="line">controls.<span class="property">enablePan</span> = <span class="literal">false</span></span><br><span class="line">controls.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h5><h6 id="glb-x2F-gltf自带材质"><a href="#glb-x2F-gltf自带材质" class="headerlink" title="glb&#x2F;gltf自带材质"></a>glb&#x2F;gltf自带材质</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// glb/gltf自带材质</span></span><br><span class="line"><span class="keyword">const</span> loader = <span class="keyword">new</span> <span class="title class_">GLTFLoader</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> model = <span class="literal">null</span></span><br><span class="line">loader.<span class="title function_">load</span>(</span><br><span class="line">  <span class="string">&#x27;./models/house.glb&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">gltf</span>) &#123;</span><br><span class="line">    model = gltf.<span class="property">scene</span>;</span><br><span class="line">    <span class="comment">// model.traverse(child =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   if (child.type === &#x27;Mesh&#x27; &amp;&amp; child.children.length === 0) &#123;</span></span><br><span class="line">    <span class="comment">//添加标签文字</span></span><br><span class="line">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>)</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="string">&#x27;glb模型&#x27;</span></span><br><span class="line">    div.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">    div.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;120px&#x27;</span></span><br><span class="line">    div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;50px&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> tag = <span class="keyword">new</span> <span class="title class_">CSS3DObject</span>(div)</span><br><span class="line">    tag.<span class="property">rotation</span>.<span class="property">y</span> = - <span class="number">0.5</span> * <span class="title class_">Math</span>.<span class="property">PI</span></span><br><span class="line">    tag.<span class="property">position</span>.<span class="title function_">set</span>(-<span class="number">8</span>, <span class="number">7</span>, <span class="number">0</span>)</span><br><span class="line">    tag.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.05</span>)</span><br><span class="line">    model.<span class="title function_">add</span>(tag); <span class="comment">// 添加到指定的场景里</span></span><br><span class="line">    <span class="comment">// 模型对象能接收阴影</span></span><br><span class="line">    model.<span class="property">castShadow</span> = <span class="literal">true</span></span><br><span class="line">    model.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      item.<span class="property">name</span> = <span class="string">&#x27;glb模型：楼房&#x27;</span></span><br><span class="line">      item.<span class="property">castShadow</span> = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    model.<span class="property">name</span> = <span class="string">&#x27;建筑&#x27;</span></span><br><span class="line">    model.<span class="property">position</span>.<span class="title function_">set</span>(-<span class="number">100</span>, <span class="number">20</span>, -<span class="number">200</span>);</span><br><span class="line">    model.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">    scene.<span class="title function_">add</span>(model);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>((xhr.<span class="property">loaded</span> / xhr.<span class="property">total</span> * <span class="number">100</span>) + <span class="string">&#x27;% loaded&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;An error happened&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="obj，需要单独引入材质"><a href="#obj，需要单独引入材质" class="headerlink" title="obj，需要单独引入材质"></a>obj，需要单独引入材质</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// obj，需要单独引入材质</span></span><br><span class="line"><span class="keyword">const</span> objLoader = <span class="keyword">new</span> <span class="title class_">OBJLoader</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入材质</span></span><br><span class="line">mtlLoader.<span class="title function_">load</span>(<span class="string">&#x27;./models/new0711/medieval-house.3dcool.net.mtl&#x27;</span>, <span class="function">(<span class="params">mtl</span>) =&gt;</span> &#123;</span><br><span class="line">  mtl.<span class="title function_">preload</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> material <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(mtl.<span class="property">materials</span>)) &#123;</span><br><span class="line">    material.<span class="property">side</span> = <span class="variable constant_">THREE</span>.<span class="property">DoubleSide</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用材质</span></span><br><span class="line">  objLoader.<span class="title function_">setMaterials</span>(mtl);</span><br><span class="line"></span><br><span class="line">  objLoader.<span class="title function_">load</span>(</span><br><span class="line">    <span class="string">&#x27;./models/new0711/medieval-house.3dcool.net.obj&#x27;</span>,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">object</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      div1.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;tag1&#x27;</span>)</span><br><span class="line">      div1.<span class="property">innerHTML</span> = <span class="string">&#x27;obj模型+材质&#x27;</span></span><br><span class="line">      div1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">      div1.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">      div1.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;120px&#x27;</span></span><br><span class="line">      div1.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;50px&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> tag1 = <span class="keyword">new</span> <span class="title class_">CSS3DObject</span>(div1)</span><br><span class="line">      tag1.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">200</span>, <span class="number">1300</span>, -<span class="number">200</span>)</span><br><span class="line">      tag1.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">      object.<span class="title function_">add</span>(tag1)</span><br><span class="line"></span><br><span class="line">      object.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>)</span><br><span class="line">      object.<span class="property">rotation</span>.<span class="property">y</span> = - <span class="number">0.5</span> * <span class="title class_">Math</span>.<span class="property">PI</span>; <span class="comment">// 跟坐标系x,z平面平行</span></span><br><span class="line">      object.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        item.<span class="property">castShadow</span> = <span class="literal">true</span></span><br><span class="line">        item.<span class="property">name</span> = <span class="string">&#x27;obj模型：别墅&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      scene.<span class="title function_">add</span>(object);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// called when loading is in progresses</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>((xhr.<span class="property">loaded</span> / xhr.<span class="property">total</span> * <span class="number">100</span>) + <span class="string">&#x27;% loaded&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// called when loading has errors</span></span><br><span class="line">    <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;An error happened&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="glb-x2F-gltf自带材质-1"><a href="#glb-x2F-gltf自带材质-1" class="headerlink" title="glb&#x2F;gltf自带材质"></a>glb&#x2F;gltf自带材质</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fbx</span></span><br><span class="line"><span class="keyword">const</span> fbxLoader = <span class="keyword">new</span> <span class="title class_">FBXLoader</span>()</span><br><span class="line"></span><br><span class="line">fbxLoader.<span class="title function_">load</span>(</span><br><span class="line">  <span class="string">&#x27;./models/robot092504.fbx&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">object</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;object&#x27;</span>, object)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;animation&#x27;</span>, object.<span class="property">animations</span>)</span><br><span class="line">    <span class="comment">// 获取模型的尺寸</span></span><br><span class="line">    <span class="comment">// 获取模型的包围盒</span></span><br><span class="line">    <span class="keyword">const</span> box = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Box3</span>().<span class="title function_">setFromObject</span>(object);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算模型的尺寸</span></span><br><span class="line">    <span class="keyword">const</span> size = box.<span class="title function_">getSize</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;size&#x27;</span>, size)</span><br><span class="line">    <span class="comment">// x: 125.1762405627781</span></span><br><span class="line">    <span class="comment">// y: 101.02761733693433</span></span><br><span class="line">    <span class="comment">// z: 92.89316311313561</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取动画</span></span><br><span class="line">    mixer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AnimationMixer</span>( object );</span><br><span class="line">    <span class="keyword">var</span> action = mixer.<span class="title function_">clipAction</span>( object.<span class="property">animations</span>[<span class="number">0</span>] );</span><br><span class="line">    <span class="comment">// action.timeScale = 1; //默认1，可以调节播放速度</span></span><br><span class="line">    <span class="comment">// action.loop = THREE.LoopOnce; //不循环播放</span></span><br><span class="line">    <span class="comment">// action.clampWhenFinished=true;//暂停在最后一帧播放的状态</span></span><br><span class="line">    action.<span class="title function_">play</span>();<span class="comment">//播放</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模型居中</span></span><br><span class="line">    <span class="keyword">const</span> box1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Box3</span>().<span class="title function_">setFromObject</span>(object);</span><br><span class="line">    <span class="keyword">const</span> center = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>();</span><br><span class="line">    box1.<span class="title function_">getCenter</span>(center);</span><br><span class="line">    object.<span class="property">position</span>.<span class="title function_">sub</span>(center);</span><br><span class="line">    </span><br><span class="line">    object.<span class="title function_">traverse</span>( <span class="keyword">function</span> (<span class="params"> child </span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ( child.<span class="property">isMesh</span> ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child.<span class="property">material</span>) &#123;</span><br><span class="line">          child.<span class="property">frustumCulled</span> = <span class="literal">false</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 材质</span></span><br><span class="line">        child.<span class="property">castShadow</span> = <span class="literal">true</span>;</span><br><span class="line">        child.<span class="property">receiveShadow</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// const texture = new THREE.TextureLoader().load(&#x27;./images/zhansun.jpg&#x27;);</span></span><br><span class="line">        <span class="comment">// child.material.map = texture;</span></span><br><span class="line">        <span class="comment">// 对每个Mesh应用材质</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;child.material&#x27;</span>, child.<span class="property">material</span>)</span><br><span class="line">        <span class="keyword">if</span> (child.<span class="property">material</span>.<span class="property">isMaterial</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span>, child.<span class="property">name</span>)</span><br><span class="line">          <span class="keyword">let</span> meshMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhysicalMaterial</span>(&#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="number">0xffffff</span>, <span class="attr">metalness</span>: <span class="number">0.8</span>, <span class="attr">roughness</span>: <span class="number">0.5</span></span><br><span class="line">          &#125;);</span><br><span class="line">          meshMaterial.<span class="property">needsUpdate</span> = <span class="literal">true</span></span><br><span class="line">          child.<span class="property">material</span> = meshMaterial</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; );</span><br><span class="line">    scene.<span class="title function_">add</span>(object);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>((xhr.<span class="property">loaded</span> / xhr.<span class="property">total</span> * <span class="number">100</span>) + <span class="string">&#x27;% loaded&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">render</span>()</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;An error happened&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>()</span><br><span class="line">renderer.<span class="title function_">setSize</span>(width, height)</span><br><span class="line">renderer.<span class="property">shadowMap</span>.<span class="property">enabled</span> = <span class="literal">true</span>;</span><br><span class="line">renderer.<span class="property">shadowMap</span>.<span class="property">type</span> = <span class="variable constant_">THREE</span>.<span class="property">PCFSoftShadowMap</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composer = <span class="keyword">new</span> <span class="title class_">EffectComposer</span>(renderer);</span><br><span class="line"><span class="comment">// OutlinePass第一个参数v2的尺寸和canvas画布保持一致</span></span><br><span class="line"><span class="keyword">const</span> v2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span><br><span class="line"><span class="keyword">const</span> outlinePass = <span class="keyword">new</span> <span class="title class_">OutlinePass</span>(v2, scene, camera);</span><br><span class="line">outlinePass.<span class="property">renderToScreen</span> = <span class="literal">false</span>;</span><br><span class="line">outlinePass.<span class="property">edgeStrength</span> = <span class="number">1</span> <span class="comment">// 粗</span></span><br><span class="line">outlinePass.<span class="property">edgeGlow</span> = <span class="number">2</span> <span class="comment">//发光</span></span><br><span class="line">outlinePass.<span class="property">edgeThickness</span> = <span class="number">2</span> <span class="comment">// 光晕粗</span></span><br><span class="line">outlinePass.<span class="property">pulsePeriod</span> = <span class="number">1</span> <span class="comment">// 闪烁</span></span><br><span class="line">outlinePass.<span class="property">usePatternTexture</span> = <span class="literal">false</span> <span class="comment">// 是否使用贴图</span></span><br><span class="line">outlinePass.<span class="property">visibleEdgeColor</span>.<span class="title function_">set</span>(<span class="string">&#x27;yellow&#x27;</span>); <span class="comment">// 设置显示的颜色</span></span><br><span class="line">outlinePass.<span class="property">hiddenEdgeColor</span>.<span class="title function_">set</span>(<span class="string">&#x27;white&#x27;</span>); <span class="comment">// 设置隐藏的颜色</span></span><br><span class="line">outlinePass.<span class="property">clear</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderPass = <span class="keyword">new</span> <span class="title class_">RenderPass</span>(scene, camera)</span><br><span class="line">composer.<span class="title function_">addPass</span>(renderPass)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">  r.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">  controls.<span class="title function_">update</span>()</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render)</span><br><span class="line">  <span class="keyword">if</span> (composer) composer.<span class="title function_">render</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera, renderer.<span class="property">domElement</span>)</span><br><span class="line"><span class="comment">// controls.maxPolarAngle = 1.5;</span></span><br><span class="line"><span class="comment">// 上下翻转的最小角度</span></span><br><span class="line"><span class="comment">// controls.minPolarAngle = 0.3;</span></span><br><span class="line"><span class="comment">// controls.minDistance = 0;</span></span><br><span class="line"><span class="comment">// controls.maxDistance = 2000;</span></span><br><span class="line">controls.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">  composer.<span class="title function_">render</span>()</span><br><span class="line">  r.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br></pre></td></tr></table></figure><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = onDocumentMouseDown</span><br><span class="line"><span class="keyword">var</span> mouse = &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onDocumentMouseDown</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  <span class="title function_">screenToWorld</span>(e.<span class="property">clientX</span>, e.<span class="property">clientY</span>)</span><br><span class="line">  <span class="comment">// 将鼠标点击位置的屏幕坐标转成threejs中的标准坐标,具体解释见代码释义</span></span><br><span class="line">  mouse.<span class="property">x</span> = (e.<span class="property">clientX</span> / <span class="variable language_">window</span>.<span class="property">innerWidth</span>) * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">  mouse.<span class="property">y</span> = -(e.<span class="property">clientY</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 新建一个三维单位向量 假设z方向就是0.5</span></span><br><span class="line">  <span class="comment">// 根据照相机，把这个向量转换到视点坐标系</span></span><br><span class="line">  <span class="keyword">var</span> vector = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(mouse.<span class="property">x</span>, mouse.<span class="property">y</span>, <span class="number">0.5</span>).<span class="title function_">unproject</span>(camera);</span><br><span class="line">  <span class="keyword">const</span> pointer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>();</span><br><span class="line">  pointer.<span class="property">x</span> = mouse.<span class="property">x</span></span><br><span class="line">  pointer.<span class="property">y</span> = mouse.<span class="property">y</span></span><br><span class="line">  <span class="comment">// 在视点坐标系中形成射线,射线的起点向量是照相机， 射线的方向向量是照相机到点击的点，这个向量应该归一标准化。</span></span><br><span class="line">  <span class="keyword">var</span> raycaster = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Raycaster</span>(camera.<span class="property">position</span>, vector.<span class="title function_">sub</span>(camera.<span class="property">position</span>).<span class="title function_">normalize</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 射线和模型求交，选中一系列直线</span></span><br><span class="line">  <span class="keyword">var</span> intersects = raycaster.<span class="title function_">intersectObjects</span>(scene.<span class="property">children</span>);</span><br><span class="line">  <span class="keyword">if</span> (intersects.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 选中第一个射线相交的物体</span></span><br><span class="line">    <span class="comment">// SELECTED = intersects[0].object;</span></span><br><span class="line">    <span class="keyword">var</span> intersected = intersects[<span class="number">0</span>].<span class="property">object</span>;</span><br><span class="line">    <span class="keyword">var</span> worldPosition = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>();</span><br><span class="line">    outlinePass.<span class="property">selectedObjects</span> = [intersected];</span><br><span class="line">    composer.<span class="title function_">addPass</span>(outlinePass)</span><br><span class="line">    <span class="comment">// 自定义的着色器通道 作为参数</span></span><br><span class="line">    <span class="keyword">var</span> effectFXAA = <span class="keyword">new</span> <span class="title class_">ShaderPass</span>(<span class="title class_">FXAAShader</span>)</span><br><span class="line">    effectFXAA.<span class="property">uniforms</span>.<span class="property">resolution</span>.<span class="property">value</span>.<span class="title function_">set</span>(<span class="number">1</span> / <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="number">1</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>)</span><br><span class="line">    effectFXAA.<span class="property">renderToScreen</span> = <span class="literal">true</span></span><br><span class="line">    composer.<span class="title function_">addPass</span>(effectFXAA)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tip&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tip&#x27;</span>).<span class="title function_">remove</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> doc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    dom.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;tip&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> aaa = intersects[<span class="number">0</span>].<span class="property">object</span>.<span class="property">aaa</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">    dom.<span class="property">innerHTML</span> = <span class="string">`&lt;span&gt;<span class="subst">$&#123;intersects[<span class="number">0</span>].object.name&#125;</span>&lt;/span&gt;`</span></span><br><span class="line">    dom.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;rgba(0,0,0,0.8)&#x27;</span></span><br><span class="line">    dom.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">&#x27;10px 10px&#x27;</span></span><br><span class="line">    dom.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;1px solid #fff&#x27;</span></span><br><span class="line">    dom.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">    dom.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span></span><br><span class="line">    dom.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">clientY</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    dom.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">clientX</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    doc.<span class="title function_">appendChild</span>(dom)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> threejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> threejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/2024/03/06/websocket/"/>
      <url>/2024/03/06/websocket/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/ORANGE_3iING/article/details/140819324">https://blog.csdn.net/ORANGE_3iING/article/details/140819324</a></p><h4 id="什么是websocket？"><a href="#什么是websocket？" class="headerlink" title="什么是websocket？"></a>什么是websocket？</h4><p>全双工通信的协议。与 HTTP 协议不同的是，WebSocket 允许服务器和客户端在连接建立后能够在不需要重新请求的情况下，相互发送数据。即浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>实时通讯的场景如：即时聊天应用、多人在线游戏、股票行情及天气预报等实时数据更新、在线白板工具、协同开发平台、在线协同绘图工具、设计协作平台等</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><h5 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程"></a>握手过程</h5><p>WebSocket 连接的建立始于客户端的 HTTP 请求。服务器接收到请求后，会进行确认 并切换为 WebSocket 协议，从而建立连接。<br>握手成功后，HTTP 连接切换为 WebSocket 连接，此时客户端和服务器之间可以进行全双工通信。</p><h5 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h5><p>一旦 WebSocket 连接建立，客户端和服务器之间就可以进行双向的数据传输。</p><h5 id="连接关闭"><a href="#连接关闭" class="headerlink" title="连接关闭"></a>连接关闭</h5><p>WebSocket 连接可以由客户端或服务器任意一方发起关闭。包括以下步骤：<br>发送关闭帧：一方发送一个关闭帧，表明希望关闭连接。<br>确认关闭请求：接收方回应一个关闭帧，确认关闭请求。<br>完成关闭：在双方都发送关闭帧后，连接正式关闭。客户端和服务器随后释放相关资源。</p><h4 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 WebSocket 连接</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;wss://localhost:9527&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 连接成功打开时的处理</span></span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket 连接已打开&#x27;</span>);</span><br><span class="line">    <span class="comment">// 发送一条消息到服务器</span></span><br><span class="line">    socket.<span class="title function_">send</span>(<span class="string">&#x27;halo啊哈哈哈哈哈哈(*´▽｀)ノノ!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 接收到消息时的处理</span></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理接收到的消息</span></span><br><span class="line">  <span class="keyword">const</span> message = event.<span class="property">data</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到消息咯O(∩_∩)O:&#x27;</span>, message);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 连接关闭时的处理</span></span><br><span class="line">socket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;啊喔…… WebSocket连接已关闭(｀・ω・´)&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 连接发生错误时的处理</span></span><br><span class="line">socket.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket发生错误啦:&#x27;</span>, error);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送文本消息</span></span><br><span class="line">socket.<span class="title function_">send</span>(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭 WebSocket 连接</span></span><br><span class="line">socket.<span class="title function_">close</span>(<span class="number">1000</span>, <span class="string">&#x27;Normal closure&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="前端进阶"><a href="#前端进阶" class="headerlink" title="前端进阶"></a>前端进阶</h4><h5 id="断线重连"><a href="#断线重连" class="headerlink" title="断线重连"></a>断线重连</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">socket.<span class="property">onclose</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接断开&#x27;</span>);</span><br><span class="line">  <span class="title function_">reconnect</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isReconnecting) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    connected = <span class="literal">false</span></span><br><span class="line">    isReconnecting = <span class="literal">true</span></span><br><span class="line">    <span class="title function_">connect</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!connected) &#123;</span><br><span class="line">        isReconnecting = <span class="literal">false</span></span><br><span class="line">        <span class="title function_">reconnect</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ws.<span class="property">onopen</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">heartBeat</span>()</span><br><span class="line">&#125;</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">heartBeat</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heartBeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  sendTimeout &amp;&amp; <span class="built_in">clearTimeout</span>(sendTimeout)</span><br><span class="line">  msgTimeout &amp;&amp; <span class="built_in">clearTimeout</span>(msgTimeout)</span><br><span class="line">  sendTimeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&#x27;heartBeat&#x27;</span>)</span><br><span class="line">    msgTimeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ws.<span class="title function_">close</span>()</span><br><span class="line">    &#125;, <span class="number">5000</span>);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><p>1.减少数据量：合理控制传输的数据量，必要时可以对数据进行压缩<br>2.心跳机制和断线重连：保持连接活跃，提升体验<br>3.服务器端优化：合理配置服务器端的连接数和资源管理，以支持更多的并发连接。</p>]]></content>
      
      
      <categories>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>contenteditable</title>
      <link href="/2024/03/05/contenteditable/"/>
      <url>/2024/03/05/contenteditable/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是contenteditable"><a href="#什么是contenteditable" class="headerlink" title="什么是contenteditable"></a>什么是contenteditable</h4><p>允许用户编辑元素中的内容，如div、span等</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>下面记录几个工作中用过的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div </span><br><span class="line">  id=<span class="string">&quot;editor&quot;</span> </span><br><span class="line">  <span class="keyword">class</span>=<span class="string">&quot;editor content&quot;</span> </span><br><span class="line">  contenteditable </span><br><span class="line">  spellcheck=<span class="string">&quot;false&quot;</span> </span><br><span class="line">  placeholder=<span class="string">&quot;请输入内容，点击回车即可发送!&quot;</span></span><br><span class="line">  onkeydown=<span class="string">&quot;keydown()&quot;</span> </span><br><span class="line">  onkeyup=<span class="string">&quot;keyup()&quot;</span> </span><br><span class="line">  onpaste=<span class="string">&quot;listenPaste()&quot;</span></span><br><span class="line">&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="开启可编辑"><a href="#开启可编辑" class="headerlink" title="开启可编辑"></a>开启可编辑</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div contenteditable=<span class="string">&quot;true&quot;</span>&gt;&lt;/div&gt; </span><br></pre></td></tr></table></figure><h5 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;editor&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> allData = dom.<span class="property">innerHTML</span></span><br><span class="line"><span class="keyword">const</span> textData = dom.<span class="property">innerText</span>.<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure><h5 id="shift-enter换行"><a href="#shift-enter换行" class="headerlink" title="shift+enter换行"></a>shift+enter换行</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 换行操作更改，不是shift+enter不换行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">keydown</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!e.<span class="property">shiftKey</span> &amp;&amp; e.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span><br><span class="line">    e.<span class="property">cancelBubble</span> = <span class="literal">true</span>; <span class="comment">// ie阻止冒泡行为</span></span><br><span class="line">    e.<span class="title function_">stopPropagation</span>(); <span class="comment">// Firefox阻止冒泡行为</span></span><br><span class="line">    e.<span class="title function_">preventDefault</span>(); <span class="comment">// 取消事件的默认动作*换行</span></span><br><span class="line">    <span class="comment">//以下处理发送消息代码</span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="title function_">send</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="换行后有个换行符"><a href="#换行后有个换行符" class="headerlink" title="换行后有个换行符"></a>换行后有个换行符</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">keyup</span>(<span class="params">e, user</span>) &#123;</span><br><span class="line">  <span class="comment">// 删除，解决换行后删除最后会留一个br的问题</span></span><br><span class="line">  <span class="keyword">if</span>(e.<span class="property">keyCode</span> == <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> editor = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;editor&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(editor.<span class="property">innerHTML</span> === <span class="string">&#x27;&lt;br&gt;&#x27;</span>) &#123;</span><br><span class="line">      editor.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="粘贴文本去除格式，粘贴文件"><a href="#粘贴文本去除格式，粘贴文件" class="headerlink" title="粘贴文本去除格式，粘贴文件"></a>粘贴文本去除格式，粘贴文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听粘贴文件</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">listenPaste</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> clipboardData = e.<span class="property">clipboardData</span></span><br><span class="line">  <span class="keyword">if</span> (clipboardData) &#123;</span><br><span class="line">    <span class="comment">// 文件</span></span><br><span class="line">    <span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(clipboardData.<span class="property">files</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = arr[i]</span><br><span class="line">      <span class="keyword">let</span> blob = <span class="keyword">await</span> <span class="title function_">fileToBlob</span>(item)</span><br><span class="line">      <span class="title function_">fileReader</span>(&#123; <span class="attr">type</span>: item.<span class="property">type</span> &#125;, blob)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 粘贴的是文件就只有文件，不考虑文本</span></span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="property">length</span> &gt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文本去除格式</span></span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">&#x27;&#x27;</span>, event = (e.<span class="property">originalEvent</span> || e);</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">clipboardData</span> &amp;&amp; event.<span class="property">clipboardData</span>.<span class="property">getData</span>) &#123;</span><br><span class="line">      text = event.<span class="property">clipboardData</span>.<span class="title function_">getData</span>(<span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">clipboardData</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">clipboardData</span>.<span class="property">getData</span>) &#123;</span><br><span class="line">      text = <span class="variable language_">window</span>.<span class="property">clipboardData</span>.<span class="title function_">getData</span>(<span class="string">&#x27;Text&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// execCommand提示将被弃用，TODO：替换方案</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">queryCommandSupported</span>(<span class="string">&#x27;insertText&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;insertText&#x27;</span>, <span class="literal">false</span>, text);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;paste&#x27;</span>, <span class="literal">false</span>, text);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑器渲染文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fileReader</span>(<span class="params">item, blob</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fileReader----&#x27;</span>, item, blob)</span><br><span class="line">  <span class="keyword">let</span> type = <span class="string">&#x27;file&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(item.<span class="property">type</span>.<span class="title function_">match</span>(<span class="regexp">/^image\//i</span>)) &#123;</span><br><span class="line">    <span class="comment">// image</span></span><br><span class="line">    type = <span class="string">&#x27;img&#x27;</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="property">type</span> === <span class="string">&#x27;text/plain&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// txt</span></span><br><span class="line">    type = <span class="string">&#x27;txt&#x27;</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="property">type</span>.<span class="title function_">includes</span>(<span class="string">&#x27;sheet&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// excel</span></span><br><span class="line">    type = <span class="string">&#x27;excel&#x27;</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="property">type</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[item.<span class="property">type</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> - <span class="number">1</span>] === <span class="string">&#x27;document&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// doc</span></span><br><span class="line">    type = <span class="string">&#x27;doc&#x27;</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="property">type</span> === <span class="string">&#x27;application/pdf&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// pdf</span></span><br><span class="line">    type = <span class="string">&#x27;pdf&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成id，添加到fileList全局变量暂存，发送时从这儿获取，发送后清空</span></span><br><span class="line">  <span class="keyword">const</span> id = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">  fileList.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: id, <span class="attr">file</span>: blob, <span class="attr">type</span>: type &#125;)</span><br><span class="line">  <span class="comment">// 按文件类型显示图片，并给img添加data-id属性，将来获取编辑内容的时候去找到真实文件</span></span><br><span class="line">  <span class="keyword">let</span> blobUrl = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">  <span class="keyword">const</span> url = type === <span class="string">&#x27;img&#x27;</span> ? blobUrl : blobUrl</span><br><span class="line">  img.<span class="property">src</span> = url</span><br><span class="line">  img.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-id&#x27;</span>, id)</span><br><span class="line">  img.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;50px&#x27;</span></span><br><span class="line">  img.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;50px&#x27;</span></span><br><span class="line">  img.<span class="property">style</span>.<span class="property">objectFit</span> = <span class="string">&#x27;contain&#x27;</span></span><br><span class="line">  img.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">  box.<span class="title function_">appendChild</span>(img)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;editor&#x27;</span>).<span class="title function_">appendChild</span>(box)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取内容时找到真实文件</span></span><br><span class="line"><span class="keyword">const</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#editor img&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> imgIds = imgs.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Number</span>(item.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-id&#x27;</span>)))</span><br><span class="line"><span class="keyword">const</span> fileData = fileList.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> imgIds.<span class="title function_">includes</span>(<span class="title class_">Number</span>(item.<span class="property">id</span>))).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">file</span>)</span><br></pre></td></tr></table></figure><p>文件相关用到的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fileToBlob</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;filetoblob====&#x27;</span>, file)</span><br><span class="line">  <span class="comment">// 创建 FileReader 对象</span></span><br><span class="line">  <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// FileReader 添加 load 事件</span></span><br><span class="line">    reader.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> blob;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> e.<span class="property">target</span>.<span class="property">result</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([e.<span class="property">target</span>.<span class="property">result</span>])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        blob = e.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">resolve</span>(blob)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// FileReader 以 ArrayBuffer 格式 读取 File 对象中数据</span></span><br><span class="line">    reader.<span class="title function_">readAsArrayBuffer</span>(file)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">blobToArrayBuffer</span>(<span class="params">blob, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">  fileReader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 转换为ArrayBuffer</span></span><br><span class="line">    <span class="keyword">const</span> arrayBuffer = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="comment">// 转换为Uint8Array，类似于Node.js中的Buffer</span></span><br><span class="line">    <span class="keyword">const</span> uint8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer);</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, uint8Array);</span><br><span class="line">  &#125;;</span><br><span class="line">  fileReader.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(error, <span class="literal">null</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  fileReader.<span class="title function_">readAsArrayBuffer</span>(blob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据大屏</title>
      <link href="/2023/12/01/largescreen/"/>
      <url>/2023/12/01/largescreen/</url>
      
        <content type="html"><![CDATA[<h4 id="不同屏幕兼容"><a href="#不同屏幕兼容" class="headerlink" title="不同屏幕兼容"></a>不同屏幕兼容</h4><p>注意点：不能滚动，宽100%，高度100%<br>宽度容易处理。高度上也要保证没有滚动条，高度上用vh，每一个单元的高度按设计图的比例换算为vh，保证高度上不会出现滚动条<br>对于每一个单元格内的样式和文字图像的正确显示，采用rem，根元素的字体大小按高度来计算，保证不同vh情况下rem是正好合适的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fontSize = (<span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">919</span>) * <span class="number">20</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;html&#x27;</span>).<span class="property">style</span>.<span class="property">fontSize</span> = fontSize</span><br></pre></td></tr></table></figure><p><img src="/image/cell.jpg" alt="vueasync"></p><h4 id="退出登录问题"><a href="#退出登录问题" class="headerlink" title="退出登录问题"></a>退出登录问题</h4><p>对于无操作的展示性的大屏，需有定时刷新保证不会退出登录</p>]]></content>
      
      
      <categories>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 大屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qiankun微前端</title>
      <link href="/2023/08/01/qiankun/"/>
      <url>/2023/08/01/qiankun/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>需要将多个已有业务系统集成到云平台，统一登录统一身份认证, 。不涉及前端依赖共用。</p><h4 id="基本使用，基于vue2"><a href="#基本使用，基于vue2" class="headerlink" title="基本使用，基于vue2"></a>基本使用，基于vue2</h4><h5 id="主应用安装qiankun"><a href="#主应用安装qiankun" class="headerlink" title="主应用安装qiankun"></a>主应用安装qiankun</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i qiankun -s  或者</span><br><span class="line">yarn add qiankun</span><br></pre></td></tr></table></figure><h5 id="主应用引入qiankun，注册子应用，启动qiankun。"><a href="#主应用引入qiankun，注册子应用，启动qiankun。" class="headerlink" title="主应用引入qiankun，注册子应用，启动qiankun。"></a>主应用引入qiankun，注册子应用，启动qiankun。</h5><p>main.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apps = [&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;maintain_index&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;http://192.168.1.8:8084&#x27;</span>, <span class="comment">// 子应用地址</span></span><br><span class="line">  <span class="attr">container</span>: <span class="string">&#x27;#yw-maintain-index-container&#x27;</span>, <span class="comment">// 子应用挂载在主应用的元素</span></span><br><span class="line">  <span class="attr">activeRule</span>: <span class="string">&#x27;/maintain_index&#x27;</span>, <span class="comment">// 进入子应用的路由标识</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;identity&#x27;</span> <span class="comment">// 参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerMicroApps</span>(apps); <span class="comment">//注册子应用</span></span><br><span class="line"><span class="title function_">start</span>(); <span class="comment">//启动qiankun</span></span><br></pre></td></tr></table></figure><h5 id="改造子应用"><a href="#改造子应用" class="headerlink" title="改造子应用"></a>改造子应用</h5><p>在我这个需求场景中，这个子应用也是其他子应用的主应用，所以它既是主也是子，所以它也要安装qiankun，如果是从主应用进入的，则在主应用启动本应用后，再启动本应用的子应用<br>main.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果是从主应用进来的，则可能有参数，如果单独运行则没有</span></span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = props;</span><br><span class="line">  instance = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    router,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  &#125;).$mount(container ? container.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>) : <span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前运行环境是独立运行的还是在父应用里面进行运行，配置全局的公共资源路径</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  __webpack_public_path__ = <span class="variable language_">window</span>.<span class="property">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是独立运行window.__POWERED_BY_QIANKUN__=undefined</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> apps = [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kettle&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;http://192.168.1.8:8083&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#yw-kettle-container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/kettle&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">container1</span>: <span class="string">&#x27;main&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  <span class="title function_">registerMicroApps</span>(apps); <span class="comment">//注册子应用</span></span><br><span class="line">  <span class="title function_">start</span>(); <span class="comment">//启动qiankun</span></span><br><span class="line">  <span class="title function_">render</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后暴露的三个方法是固定的，加载渲染以及销毁，这是生命周期的3个节点，暴露出去供主应用调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果被qiankun包裹，则在主应用启动本应用后，再启动本应用的子应用</span></span><br><span class="line">  <span class="keyword">const</span> apps = [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kettle&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;http://192.168.1.8:8083&#x27;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;#yw-kettle-container&#x27;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&#x27;/maintain_index/kettle&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">container1</span>: props.<span class="property">container</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  <span class="title function_">registerMicroApps</span>(apps); <span class="comment">//注册子应用</span></span><br><span class="line">  <span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  instance.$destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="改造子应用的子应用"><a href="#改造子应用的子应用" class="headerlink" title="改造子应用的子应用"></a>改造子应用的子应用</h5><p>mian.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// router要在这里写，在router的js文件中还获取不到window.__POWERED_BY_QIANKUN__的变化</span></span><br><span class="line">  <span class="comment">// 本应用是第三级应用，所以需要判断是从第一级开始启动的，还是直接运行的第二级，还是直接单独运行的本应用，然后加对应的路由前缀</span></span><br><span class="line">  <span class="comment">// window.__KETTLE_BOX__是在启动本应用时由主应用传入的参数</span></span><br><span class="line">  <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    <span class="attr">base</span>: <span class="variable language_">window</span>.<span class="property">__KETTLE_BOX__</span>===<span class="string">&#x27;identity&#x27;</span> ? <span class="string">&#x27;/maintain_index/kettle&#x27;</span> : (<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span> ? <span class="string">&#x27;/kettle&#x27;</span> : <span class="string">&#x27;/&#x27;</span>),</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// router.beforeEach也就需要在router声明后才能使用, 可以优化代码书写方式</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里模拟了动态路由</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">ls</span> = <span class="literal">false</span></span><br><span class="line">  router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ls</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">ls</span> = <span class="literal">true</span></span><br><span class="line">        router.<span class="title function_">addRoutes</span>([&#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;/layout&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;layout&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span> ? <span class="title class_">Layout1</span> : <span class="title class_">Layout</span>,</span><br><span class="line">          <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/Music&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Music&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Music</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;])</span><br><span class="line">        <span class="title function_">next</span>(&#123;</span><br><span class="line">          ...to,</span><br><span class="line">          <span class="attr">replace</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = props;</span><br><span class="line">  instance = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    router,</span><br><span class="line">    <span class="comment">// store,</span></span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  &#125;).$mount(container ? container.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>) : <span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前运行环境是独立运行的还是在父应用里面进行运行，配置全局的公共资源路径</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  __webpack_public_path__ = <span class="variable language_">window</span>.<span class="property">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是独立运行window.__POWERED_BY_QIANKUN__=undefined</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后暴露的三个方法是固定的，加载渲染以及销毁</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 将最外层的基座传进来</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">__KETTLE_BOX__</span> = props.<span class="property">container1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  instance.$destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue.config.js<br>子应用配置跨域，本地开发调试的时候才能正确被主应用访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">8083</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;*&quot;</span>, <span class="comment">// 配置跨域</span></span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，3个vue2项目都可以单独运行，也可以以微前端形式运行了。qiankun是基于single-spa封装的，使用了html-entry，相比2019年写single-spa的demo时简单了不止一点。</p>]]></content>
      
      
      <categories>
          
          <category> qiankun微前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> qiankun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水印</title>
      <link href="/2023/04/10/watermark/"/>
      <url>/2023/04/10/watermark/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>为了保护版权，常常需要为页面添加水印，常见的有以下几种方法：</p><p>css伪元素<br>canvas<br>背景图<br>svg</p><h4 id="防篡改"><a href="#防篡改" class="headerlink" title="防篡改"></a>防篡改</h4><p>添加水印比较简单，难点在于如何最大程度的防止篡改和删除页面的水印。</p><p>原理：监听水印元素的变化，出现变化把水印元素清除，再重新生成一个，清除变动记录，继续监听</p><div id="wm">我是水印</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wm</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutationObserver = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutationsList, observer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// mutationsList mutationRecord数组 记录了DOM的变化</span></span><br><span class="line">  <span class="comment">// observer MutationObserver的实例</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听回调</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutationsList&#x27;</span>, mutationsList);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;observer&#x27;</span>, observer)</span><br><span class="line">  <span class="keyword">if</span> (mutationsList.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;wm&#x27;</span>)) <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;wm&#x27;</span>))</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    dom.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;wm&#x27;</span>)</span><br><span class="line">    dom.<span class="property">innerHTML</span> = <span class="string">&#x27;我是水印&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(dom)</span><br><span class="line">    <span class="comment">// 清除变动记录</span></span><br><span class="line">    mutationObserver.<span class="title function_">takeRecords</span>()</span><br><span class="line">    <span class="comment">// 停止监听</span></span><br><span class="line">    mutationObserver.<span class="title function_">disconnect</span>()</span><br><span class="line">    <span class="comment">// 重新获取dom，重新监听</span></span><br><span class="line">    <span class="title function_">observe</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// node 监听的节点</span></span><br><span class="line"><span class="comment">// config 监听配置(要监听哪些内容)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params"></span>) &#123;</span><br><span class="line">  mutationObserver.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;wm&#x27;</span>), &#123;</span><br><span class="line">    <span class="attr">attributes</span>: <span class="literal">true</span>,  <span class="comment">// 属性变化</span></span><br><span class="line">    <span class="attr">attributeOldValue</span>: <span class="literal">true</span>,  <span class="comment">// 观察attributes变动时，是否需要记录变动前的属性值</span></span><br><span class="line">    <span class="attr">attributeFilter</span>: [<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;src&#x27;</span>],  <span class="comment">// 需要观察的特定属性</span></span><br><span class="line">    <span class="attr">characterData</span>: <span class="literal">true</span>,  <span class="comment">// 节点内容、文本的变化</span></span><br><span class="line">    <span class="attr">characterDataOldValue</span>: <span class="literal">true</span>,  <span class="comment">// 观察characterData变动时，是否需要记录变动前的属性值</span></span><br><span class="line">    <span class="attr">childList</span>: <span class="literal">true</span>,  <span class="comment">// 子结点变化</span></span><br><span class="line">    <span class="attr">subtree</span>: <span class="literal">true</span>,    <span class="comment">// 所有后代节点</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">observe</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>token无感刷新</title>
      <link href="/2023/04/01/refreshtoken/"/>
      <url>/2023/04/01/refreshtoken/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>Token 通常用于用户认证和权限管理，当 Token 过期时一般会重定向到登录页，用户的操作会受到影响，因此需要无感刷新。以下用双token实现。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>每次发起请求时，检查访问令牌的有效性。<br>如果访问令牌过期，暂停当前请求并使用刷新令牌获取新的访问令牌。<br>使用新的访问令牌重新发起之前被暂停的请求。<br>更新应用中的 Token 信息。</p><p>以上原理是其他博客里看到的描述，但是在他们的代码里，都没有暂停请求，只是存储了失败的请求。</p><h4 id="vue-axios场景下实现无感刷新"><a href="#vue-axios场景下实现无感刷新" class="headerlink" title="vue+axios场景下实现无感刷新"></a>vue+axios场景下实现无感刷新</h4><h5 id="x2F-x2F-创建axios实例"><a href="#x2F-x2F-创建axios实例" class="headerlink" title="&#x2F;&#x2F; 创建axios实例"></a>&#x2F;&#x2F; 创建axios实例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = <span class="title class_">Axios</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  baseURL,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">30000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="x2F-x2F-新增请求拦截器，主要用于请求前带上token"><a href="#x2F-x2F-新增请求拦截器，主要用于请求前带上token" class="headerlink" title="&#x2F;&#x2F; 新增请求拦截器，主要用于请求前带上token"></a>&#x2F;&#x2F; 新增请求拦截器，主要用于请求前带上token</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">async</span> config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 设置token</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title function_">getStorage</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="x2F-x2F-新增响应拦截器"><a href="#x2F-x2F-新增响应拦截器" class="headerlink" title="&#x2F;&#x2F; 新增响应拦截器"></a>&#x2F;&#x2F; 新增响应拦截器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">async</span> (res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="comment">// token过期，用refreshToken去刷新token</span></span><br><span class="line">      <span class="comment">// 这里我用的自己封装的请求方法，可以忽略</span></span><br><span class="line">      <span class="keyword">const</span> methodMap = &#123;</span><br><span class="line">        <span class="attr">get</span>: $get,</span><br><span class="line">        <span class="attr">post</span>: $post,</span><br><span class="line">        <span class="attr">put</span>: $put,</span><br><span class="line">        <span class="attr">del</span>: $del</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 处理响应数据，准备重试</span></span><br><span class="line">      <span class="keyword">const</span> method = methodMap[res.<span class="property">config</span>.<span class="property">method</span>]</span><br><span class="line">      <span class="keyword">const</span> url = res.<span class="property">config</span>.<span class="property">url</span></span><br><span class="line">      <span class="keyword">let</span> data = res.<span class="property">config</span>.<span class="property">data</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 刷新token</span></span><br><span class="line">      <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;system/execRefreshToken&#x27;</span>)</span><br><span class="line">      <span class="comment">// 重试（挨个重试，没有存）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">method</span>(url, data)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="x2F-x2F-刷新部分"><a href="#x2F-x2F-刷新部分" class="headerlink" title="&#x2F;&#x2F; 刷新部分"></a>&#x2F;&#x2F; 刷新部分</h5><p>如果多个接口用过期的token，都会进入此方法，为了防止重复调用刷新，设置了promise，能适用于大部分情况</p><p>注：但是这个promise只能在刷新时防止重复，试想如果有个接口（用了过期token的）响应很慢，在刷新完token后，promise置null了，才进入响应拦截器，这时就又会调用一遍刷新。</p><p>TODO：1.promise置null加个延迟，能防止大部分情况。2.刷新后再设置个变量，短时间内用来判断是否已经刷新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="literal">null</span></span><br><span class="line"><span class="title function_">execRefreshToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(promise) <span class="keyword">return</span> promise</span><br><span class="line">  promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">getStorage</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> refreshToken = <span class="title function_">getStorage</span>(<span class="string">&#x27;refreshToken&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      token,</span><br><span class="line">      refreshToken</span><br><span class="line">    &#125;</span><br><span class="line">    $post(api.<span class="property">sysLoginRefreshToken</span>, params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setStorage</span>(<span class="string">&#x27;token&#x27;</span>, res.<span class="property">token</span>)</span><br><span class="line">      <span class="title function_">setStorage</span>(<span class="string">&#x27;refreshToken&#x27;</span>, res.<span class="property">refreshToken</span>)</span><br><span class="line">      <span class="title function_">resolve</span>(res)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  promise.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    promise = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apicloud的ble模块思路</title>
      <link href="/2022/12/01/ble/"/>
      <url>/2022/12/01/ble/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>使用hybrid框架apicloud，开发物联网领域的蓝牙交互功能时，使用了apicloud的官方ble插件，本文记录了使用逻辑和一些注意点。</p><p>可用于第三方蓝牙设备交互，必须要支持蓝牙 4.0。<br>iOS上：硬件至少是 iphone4s，系统至少是 iOS6。<br>android上：系统版本至少是 android4.3。</p><p>蓝牙 4.0 以低功耗著称，一般也叫 BLE（BluetoothLowEnergy）。目前应用比较多的案例：运动手坏、嵌入式设备、智能家居</p><h4 id="蓝牙通讯原理"><a href="#蓝牙通讯原理" class="headerlink" title="蓝牙通讯原理"></a>蓝牙通讯原理</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>​在蓝牙通讯中有两个主要的部分,Central 和 Peripheral，有一点类似Client Server。<br>一般手机是客户端， 设备（比如手环）是服务器，因为是手机去连接手环这个服务器。以下称两个部分为手机和设备。</p><h5 id="服务和特征"><a href="#服务和特征" class="headerlink" title="服务和特征"></a>服务和特征</h5><p>​设备可以广播数据、提供服务，手机可以扫描附近的设备，一旦建立连接，就可以交换数据。<br>​特征是与外界交互的最小单位。蓝牙4.0设备通过服务（Service）、特征（Characteristics）和描述符（Descriptor）来形容自己，同一台设备可能包含一个或多个服务，每个服务下面又包含若干个特征，每个特征下面有包含若干个描述符（Descriptor）。比如某台蓝牙4.0设备，用特征A来描述设备信息、用特征B和描述符b来收发数据等。而每个服务、特征和描述符都是用 UUID 来区分和标识的。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>这次封装了蓝牙(我们公司的设备)使用的流程，并暴露出生命周期，供处理数据、显示页面等操作，小程序也是同样思路。以下是伪代码，完整代码见git（私有仓库）。<br>  const $ble &#x3D; {<br>    …<br>  }</p><p>&#x2F;&#x2F; 1、检测手机蓝牙状态，权限</p><p>&#x2F;&#x2F; 位置, Android 6.0以后需要定位权限，否则无法正常使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isAndroid) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; granted &#125; = <span class="title function_">confirmPermission</span>(<span class="string">&#x27;location&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!granted) &#123;</span><br><span class="line">      <span class="title function_">dispatchEvent</span>(<span class="string">&#x27;bleStatus&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;location&#x27;</span>, <span class="attr">status</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    &#x2F;&#x2F; 安卓12及以上和鸿蒙（非next）需要打开‘附近设备’权限<br>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">AndroidVersion</span> &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; granted &#125; = <span class="title function_">confirmPermission</span>(<span class="string">&#x27;ble-scan&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (!granted) &#123;</span><br><span class="line">        <span class="title function_">dispatchEvent</span>(<span class="string">&#x27;bleStatus&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;ble-scan&#x27;</span>, <span class="attr">status</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    &#x2F;&#x2F; 蓝牙</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">initManager</span>(&#123; <span class="string">&quot;single&quot;</span>: <span class="literal">true</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (res.<span class="property">state</span> === <span class="string">&quot;poweredOn&quot;</span>) <span class="title function_">dispatchEvent</span>(<span class="string">&#x27;bleStatus&#x27;</span>, &#123; <span class="attr">status</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">     <span class="keyword">else</span> <span class="title function_">dispatchEvent</span>(<span class="string">&#x27;bleStatus&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;ble&#x27;</span>, <span class="attr">status</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">   &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">dispatchEvent</span>(<span class="string">&#x27;bleStatus&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;ble&#x27;</span>, <span class="attr">status</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 2、监听生命周期的各个节点，和处理方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addBleListener</span>(<span class="params">type, handler</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听到&#x27;</span>, type)</span><br><span class="line">    <span class="keyword">if</span> (!(type <span class="keyword">in</span> $ble.<span class="property">data</span>.<span class="property">handlers</span>)) $ble.<span class="property">data</span>.<span class="property">handlers</span>[type] = []</span><br><span class="line">    $ble.<span class="property">data</span>.<span class="property">handlers</span>[type].<span class="title function_">push</span>(handler)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 3、发布事件两个参数（事件名，参数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dispatchEvent</span>(<span class="params">type, ...params</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了&#x27;</span>, type)</span><br><span class="line">    <span class="keyword">if</span> (!(type <span class="keyword">in</span> $ble.<span class="property">data</span>.<span class="property">handlers</span>)) <span class="keyword">return</span></span><br><span class="line">    $ble.<span class="property">data</span>.<span class="property">handlers</span>[type].<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">handler</span>(...params)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 4、监听蓝牙是否一直连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">listenConnected</span>(<span class="params"></span>) &#123;</span><br><span class="line">   $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">listenConnectTimer</span>, <span class="string">&#x27;interval&#x27;</span>)</span><br><span class="line">   $ble.<span class="property">data</span>.<span class="property">listenConnectTimer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     $ble.<span class="title function_">getPrivacy</span>().<span class="title function_">isConnected</span>(&#123;</span><br><span class="line">       <span class="attr">peripheralUUID</span>: $ble.<span class="property">data</span>.<span class="property">uuid</span></span><br><span class="line">     &#125;, <span class="keyword">function</span> (<span class="params">ret</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------------listenconnected&#x27;</span>, ret.<span class="property">status</span>)</span><br><span class="line">       <span class="keyword">if</span> (!ret.<span class="property">status</span>) &#123;</span><br><span class="line">         $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">listenConnectTimer</span>, <span class="string">&#x27;interval&#x27;</span>)</span><br><span class="line">         $ble.<span class="property">data</span>.<span class="property">lastStatus</span> = $ble.<span class="property">data</span>.<span class="property">checkStatus</span></span><br><span class="line">         $ble.<span class="title function_">dispatchEvent</span>(<span class="string">&#x27;disconnected&#x27;</span>)</span><br><span class="line">         $ble.<span class="title function_">reset</span>()</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;, <span class="number">2000</span>)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 5、连接蓝牙</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接整体控制  </span></span><br><span class="line"><span class="title function_">connectBle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $ble.<span class="title function_">connect</span>()</span><br><span class="line">    $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">connectTimer</span>, <span class="string">&#x27;interval&#x27;</span>)</span><br><span class="line">    $ble.<span class="property">data</span>.<span class="property">connectTimer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      $ble.<span class="title function_">connect</span>()</span><br><span class="line">    &#125;, <span class="number">3500</span>)</span><br><span class="line">    $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">connectOutTimer</span>)</span><br><span class="line">    $ble.<span class="property">data</span>.<span class="property">connectOutTimer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!$ble.<span class="property">data</span>.<span class="property">isConnected</span>) &#123;</span><br><span class="line">        $ble.<span class="property">data</span>.<span class="property">isConnectOut</span> = <span class="literal">true</span></span><br><span class="line">        $ble.<span class="title function_">bleCheckFail</span>(<span class="string">&#x27;连接超时&#x27;</span>, <span class="string">&#x27;14&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">30</span> * <span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 调用连接</span></span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $ble.<span class="property">data</span>.<span class="property">connectTimes</span>++</span><br><span class="line">    <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">isConnected</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span> + $ble.<span class="property">data</span>.<span class="property">connectTimes</span> + <span class="string">&#x27;次连接&#x27;</span>, $ble.<span class="property">data</span>.<span class="property">uuid</span>)</span><br><span class="line">    $ble.<span class="title function_">getPrivacy</span>().<span class="title function_">connect</span>(&#123;</span><br><span class="line">      <span class="attr">peripheralUUID</span>: $ble.<span class="property">data</span>.<span class="property">uuid</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">ret</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ret.<span class="property">status</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">isConnectOut</span>) &#123;<span class="comment">// 超时之后连接成功</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        $ble.<span class="title function_">dispatchEvent</span>(<span class="string">&#x27;bleProcessNode&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;connecting&#x27;</span>, <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span> &#125;)</span><br><span class="line">        $ble.<span class="title function_">dispatchEvent</span>(<span class="string">&#x27;connectSuccess&#x27;</span>)</span><br><span class="line">        $ble.<span class="property">data</span>.<span class="property">isConnected</span> = <span class="literal">true</span></span><br><span class="line">        $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">connectOutTimer</span>)</span><br><span class="line">        $ble.<span class="title function_">listenConnected</span>()</span><br><span class="line">        <span class="comment">// 连接成功后获取服务</span></span><br><span class="line">        $ble.<span class="title function_">getService</span>()</span><br><span class="line">        $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">connectTimer</span>, <span class="string">&#x27;interval&#x27;</span>)</span><br><span class="line">        $ble.<span class="property">data</span>.<span class="property">connectTimes</span> = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">connectTimes</span> &gt; <span class="number">4</span>) &#123;</span><br><span class="line">      $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">connectTimer</span>, <span class="string">&#x27;interval&#x27;</span>)</span><br><span class="line">      $ble.<span class="property">data</span>.<span class="property">connectTimes</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 获取服务<br>    &#x2F;&#x2F; 4.获取服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getService</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前状态--------------&gt;&#x27;</span>, <span class="string">&#x27;serviceGetting&#x27;</span>)</span><br><span class="line">   $ble.<span class="property">data</span>.<span class="property">checkStatus</span> = <span class="string">&#x27;serviceGetting&#x27;</span></span><br><span class="line">   $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">getServiceTimer</span>)</span><br><span class="line">   $ble.<span class="property">data</span>.<span class="property">getServiceTimer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (!$ble.<span class="property">data</span>.<span class="property">notifyServiceId</span>) &#123;</span><br><span class="line">       $ble.<span class="title function_">bleCheckFail</span>(<span class="string">&#x27;获取服务超时&#x27;</span>, <span class="string">&#x27;29&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;, <span class="number">5</span> * <span class="number">1000</span>)</span><br><span class="line">   $ble.<span class="title function_">getPrivacy</span>().<span class="title function_">discoverService</span>(&#123;</span><br><span class="line">     <span class="attr">peripheralUUID</span>: $ble.<span class="property">data</span>.<span class="property">uuid</span></span><br><span class="line">   &#125;, <span class="keyword">function</span> (<span class="params">ret, err</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (ret.<span class="property">status</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> service = ret[<span class="string">&quot;services&quot;</span>]</span><br><span class="line">       $ble.<span class="property">data</span>.<span class="property">notifyServiceId</span> = $ble.<span class="property">data</span>.<span class="property">writeServiceId</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; service.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">let</span> UUID_slice = service[i].<span class="property">length</span> &gt; <span class="number">4</span> ? service[i].<span class="title function_">slice</span>(<span class="number">4</span>, <span class="number">8</span>) : service[i]   <span class="comment">//截取4到8位</span></span><br><span class="line">         <span class="comment">/* 判断是否是我们需要的服务*/</span></span><br><span class="line">         <span class="keyword">if</span> (UUID_slice.<span class="title function_">toUpperCase</span>() == $ble.<span class="property">data</span>.<span class="property">notify</span>) $ble.<span class="property">data</span>.<span class="property">notifyServiceId</span> = service[i]</span><br><span class="line">         <span class="keyword">if</span> (UUID_slice.<span class="title function_">toUpperCase</span>() == $ble.<span class="property">data</span>.<span class="property">write</span>) $ble.<span class="property">data</span>.<span class="property">writeServiceId</span> = service[i]</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">notifyServiceId</span>) &#123;</span><br><span class="line">         $ble.<span class="title function_">dispatchEvent</span>(<span class="string">&#x27;getServiceSuccess&#x27;</span>)</span><br><span class="line">         <span class="comment">// 获取特征</span></span><br><span class="line">         $ble.<span class="title function_">getNotifyChara</span>()</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       $ble.<span class="title function_">bleCheckFail</span>(<span class="string">&#x27;获取服务失败&#x27;</span>, <span class="string">&#x27;21&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 5.获取特征</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getNotifyChara</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前状态--------------&gt;&#x27;</span>, <span class="string">&#x27;charaGetting&#x27;</span>)</span><br><span class="line">    $ble.<span class="property">data</span>.<span class="property">checkStatus</span> = <span class="string">&#x27;charaGetting&#x27;</span></span><br><span class="line">    $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">getCharaTimer</span>)</span><br><span class="line">    $ble.<span class="property">data</span>.<span class="property">getCharaTimer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!$ble.<span class="property">data</span>.<span class="property">notifyCharacterId</span>) &#123;</span><br><span class="line">        $ble.<span class="title function_">bleCheckFail</span>(<span class="string">&#x27;获取特征超时&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">5</span> * <span class="number">1000</span>)</span><br><span class="line">    $ble.<span class="title function_">getPrivacy</span>().<span class="title function_">discoverCharacteristics</span>(&#123;</span><br><span class="line">      <span class="attr">serviceUUID</span>: $ble.<span class="property">data</span>.<span class="property">notifyServiceId</span>,</span><br><span class="line">      <span class="attr">peripheralUUID</span>: $ble.<span class="property">data</span>.<span class="property">uuid</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">ret</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ret.<span class="property">status</span>) &#123;</span><br><span class="line">        $ble.<span class="title function_">dispatchEvent</span>(<span class="string">&#x27;getNotifyCharaSuccess&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> characteristic = ret[<span class="string">&quot;characteristics&quot;</span>]</span><br><span class="line">        $ble.<span class="property">data</span>.<span class="property">notifyCharacterId</span> = characteristic[<span class="number">1</span>] ? characteristic[<span class="number">1</span>].<span class="property">uuid</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">        $ble.<span class="property">data</span>.<span class="property">writeCharacterId</span> = characteristic[<span class="number">0</span>] ? characteristic[<span class="number">0</span>].<span class="property">uuid</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">notifyCharacterId</span> &amp;&amp; (!$ble.<span class="property">data</span>.<span class="property">ywBleTab</span> || $ble.<span class="property">data</span>.<span class="property">ywBleTab</span>===<span class="string">&#x27;reading&#x27;</span>)) &#123;</span><br><span class="line">          $ble.<span class="title function_">startRegister</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $ble.<span class="title function_">bleCheckFail</span>(<span class="string">&#x27;获取特征失败&#x27;</span>, <span class="string">&#x27;31&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 6.注册、配对、数据交互, 都是获取数据包，发送数据包的过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">startRegister</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"><span class="title function_">pair</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"><span class="title function_">read</span>(<span class="params"></span>) &#123;&#125;,</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 7.开启监听设备响应的数据包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">notify</span>(<span class="params">ret</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (ret.<span class="property">status</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> msg = ret[<span class="string">&quot;characteristic&quot;</span>][<span class="string">&quot;value&quot;</span>]</span><br><span class="line">     <span class="keyword">if</span> (msg != $ble.<span class="property">data</span>.<span class="property">not</span>) &#123;</span><br><span class="line">       $ble.<span class="property">data</span>.<span class="property">isNotified</span> = <span class="literal">true</span></span><br><span class="line">       $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">sendTimer</span>)</span><br><span class="line">       <span class="comment">// 数据是否是我们想要的</span></span><br><span class="line">       <span class="keyword">let</span> isVaild = $ble.<span class="property">data</span>.<span class="property">deviceType</span>==<span class="string">&#x27;2&#x27;</span> ? <span class="literal">true</span> : $ble.<span class="property">utils</span>.<span class="title function_">vaildReading</span>(msg)</span><br><span class="line">       <span class="keyword">if</span> (isVaild) &#123;</span><br><span class="line">         <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">showLog</span>) $ble.<span class="title function_">dispatchEvent</span>(<span class="string">&#x27;rspLog&#x27;</span>, &#123; msg, <span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">isVaild</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">         $ble.<span class="property">data</span>.<span class="property">sendTimes</span> = <span class="number">0</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------------监听回调--------------&#x27;</span>, $ble.<span class="property">data</span>.<span class="property">checkStatus</span>)</span><br><span class="line">         <span class="comment">// 非多k的直接上传</span></span><br><span class="line">         <span class="title function_">ajax</span>(<span class="string">&quot;bleUpload&quot;</span>, &#123; <span class="attr">device</span>: $ble.<span class="property">data</span>.<span class="property">systemBleId</span>, <span class="string">&quot;bytes&quot;</span>: msg &#125;, <span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span>($ble.<span class="property">data</span>.<span class="property">checkStatus</span> === <span class="string">&quot;register&quot;</span> &amp;&amp; res.<span class="property">type</span> === <span class="string">&#x27;readRsp&#x27;</span>) &#123;</span><br><span class="line">             <span class="comment">// 注册-----------------------------------------------------------------</span></span><br><span class="line">             <span class="title function_">handle</span>()</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>($ble.<span class="property">data</span>.<span class="property">checkStatus</span> === <span class="string">&quot;assign&quot;</span> &amp;&amp; (res.<span class="property">type</span> === <span class="string">&#x27;randomRsp&#x27;</span> || res.<span class="property">type</span> === <span class="string">&#x27;pairRsp&#x27;</span>)) &#123;</span><br><span class="line">             <span class="comment">// 配对-----------------------------------------------------------------</span></span><br><span class="line">             <span class="title function_">handle</span>()</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">checkStatus</span> == <span class="string">&quot;reading&quot;</span> &amp;&amp; res.<span class="property">type</span> === <span class="string">&#x27;reading&#x27;</span>) &#123;</span><br><span class="line">             <span class="title function_">handle</span>()</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;, <span class="keyword">function</span> (<span class="params">desc</span>) &#123;</span><br><span class="line">           $ble.<span class="property">data</span>.<span class="property">packList</span> = []</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;uploadble失败&#x27;</span>)</span><br><span class="line">           <span class="keyword">const</span> d = desc || <span class="string">&#x27;失败！&#x27;</span></span><br><span class="line">           $ble.<span class="title function_">bleCheckFail</span>(d, $ble.<span class="property">data</span>.<span class="property">errCode</span>[$ble.<span class="property">data</span>.<span class="property">checkStatus</span>])</span><br><span class="line">         &#125;, <span class="keyword">function</span> (<span class="params">desc</span>) &#123;</span><br><span class="line">           $ble.<span class="property">data</span>.<span class="property">packList</span> = []</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;uploadble失败2&#x27;</span>)</span><br><span class="line">           <span class="keyword">const</span> d = desc || <span class="string">&#x27;失败！&#x27;</span></span><br><span class="line">           $ble.<span class="title function_">bleCheckFail</span>(d, $ble.<span class="property">data</span>.<span class="property">errCode</span>[$ble.<span class="property">data</span>.<span class="property">checkStatus</span>])</span><br><span class="line">         &#125;, <span class="number">1</span>)</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">showLog</span>) $ble.<span class="title function_">dispatchEvent</span>(<span class="string">&#x27;rspLog&#x27;</span>, &#123; msg, <span class="attr">status</span>: <span class="literal">true</span>, <span class="attr">isVaild</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">         $ble.<span class="title function_">reSend</span>()</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     $ble.<span class="title function_">reSend</span>()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 8.发送数据包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">reSend</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $ble.<span class="property">data</span>.<span class="property">isNotified</span> = <span class="literal">false</span></span><br><span class="line">  $ble.<span class="property">data</span>.<span class="property">sendTimes</span>++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sendTimes&#x27;</span>, $ble.<span class="property">data</span>.<span class="property">sendTimes</span>)</span><br><span class="line">  <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">sendTimes</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">sendTimer</span>)</span><br><span class="line">    $ble.<span class="title function_">bleCheckFail</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!$ble.<span class="property">data</span>.<span class="property">isConnected</span>) &#123;</span><br><span class="line">    $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">sendTimer</span>)</span><br><span class="line">    $ble.<span class="title function_">bleCheckFail</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">timeout</span> = (<span class="params">wait = <span class="number">8000</span></span>) =&gt; &#123;</span><br><span class="line">    $ble.<span class="property">utils</span>.<span class="title function_">clearTimer</span>($ble.<span class="property">data</span>.<span class="property">sendTimer</span>)</span><br><span class="line">    $ble.<span class="property">data</span>.<span class="property">sendTimer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!$ble.<span class="property">data</span>.<span class="property">isNotified</span>) &#123;</span><br><span class="line">        <span class="comment">// 表具未反馈指令！</span></span><br><span class="line">        <span class="keyword">const</span> isSwitch = $ble.<span class="property">data</span>.<span class="property">sendTimes</span> &gt; <span class="number">2</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">        $ble.<span class="title function_">dispatchEvent</span>(<span class="string">&#x27;rspLog&#x27;</span>, &#123; <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">status</span>: <span class="literal">false</span>, <span class="attr">isSwitch</span>: isSwitch, <span class="attr">name</span>: $ble.<span class="property">data</span>.<span class="property">checkStatus</span> &#125;)</span><br><span class="line">        $ble.<span class="title function_">reSend</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ($ble.<span class="property">data</span>.<span class="property">checkStatus</span> == <span class="string">&quot;reading&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">timeout</span>()</span><br><span class="line">    $ble.<span class="title function_">sendMsg</span>($ble.<span class="property">data</span>.<span class="property">readingPack</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">timeout</span>()</span><br><span class="line">    $ble.<span class="title function_">sendMsg</span>($ble.<span class="property">data</span>.<span class="property">sendPack</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>  &#x2F;&#x2F; 9.重写关闭窗口的页面，由于关闭窗口的时候无法监听，从而去关闭蓝牙设备的连接，所以重写api.closeWin，实现最大限度的控制蓝牙状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">reWriteClose</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">// 左滑返回处理</span></span><br><span class="line">   api.<span class="title function_">addEventListener</span>(&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;keyback&#x27;</span></span><br><span class="line">   &#125;, <span class="keyword">function</span> (<span class="params">ret, err</span>) &#123;</span><br><span class="line">     cn++</span><br><span class="line">     <span class="keyword">if</span> (cn == <span class="number">1</span>)</span><br><span class="line">       <span class="title function_">toast</span>(<span class="string">&quot;再滑一次退出蓝牙&quot;</span>)</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (cn == <span class="number">2</span>)</span><br><span class="line">       api.<span class="title function_">closeWin</span>()</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接关闭重写, 关闭时将蓝牙状态重置</span></span><br><span class="line">api.<span class="property">closeWin</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">loading</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">handleBle</span>()</span><br><span class="line">  <span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  }</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ble.<span class="title function_">init</span>()</span><br><span class="line"></span><br><span class="line">$ble.<span class="title function_">addBleListener</span>(<span class="string">&#x27;bleStatus&#x27;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">res === <span class="string">&#x27;success&#x27;</span> &amp;&amp; <span class="title function_">alert</span>(<span class="string">&#x27;蓝牙正常使用&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res === <span class="string">&#x27;fail&#x27;</span> &amp;&amp; <span class="title function_">alert</span>(<span class="string">&#x27;蓝牙权限未开启&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$ble.<span class="title function_">addBleListener</span>(<span class="string">&#x27;connected&#x27;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">res === <span class="string">&#x27;success&#x27;</span> &amp;&amp; <span class="title function_">alert</span>(<span class="string">&#x27;连接成功&#x27;</span>)</span><br><span class="line">  res === <span class="string">&#x27;fail&#x27;</span> &amp;&amp; <span class="title function_">alert</span>(<span class="string">&#x27;连接失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$ble.<span class="title function_">addBleListener</span>(<span class="string">&#x27;pair&#x27;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">res === <span class="string">&#x27;success&#x27;</span> &amp;&amp; <span class="title function_">alert</span>(<span class="string">&#x27;配对成功&#x27;</span>)</span><br><span class="line">  res === <span class="string">&#x27;fail&#x27;</span> &amp;&amp; <span class="title function_">alert</span>(<span class="string">&#x27;配对失败&#x27;</span>)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝牙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apicloud </tag>
            
            <tag> hybrid </tag>
            
            <tag> ble </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-异步更新和nexttick</title>
      <link href="/2022/07/11/vue-%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E5%92%8Cnexttick/"/>
      <url>/2022/07/11/vue-%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E5%92%8Cnexttick/</url>
      
        <content type="html"><![CDATA[<p>this.$nextTick(cb)</p><span id="more"></span><h4 id="一、简化图"><a href="#一、简化图" class="headerlink" title="一、简化图"></a>一、简化图</h4><p><img src="/image/vueasync-7817137.jpeg" alt="vueasync"></p><h4 id="二、异步更新"><a href="#二、异步更新" class="headerlink" title="二、异步更新"></a>二、异步更新</h4><p>Vue 的异步更新机制的核心是利用了浏览器的异步任务队列来实现的，首选微任务队列，宏任务队列次之。</p><p>当响应式数据更新后，会调用 dep.notify 方法，通知 dep 中收集的 watcher 去执行 update 方法，watcher.update 将 watcher 自己放入一个 watcher 队列（全局的 queue 数组）。如果同一个watcher被多次触发，只会被推入到队列中一次。</p><p>然后通过 nextTick 方法将一个刷新 watcher 队列的方法（flushSchedulerQueue）放入一个全局的 callbacks 数组中。</p><p>如果此时浏览器的异步任务队列中没有一个叫 flushCallbacks 的函数，则执行 timerFunc 函数，将 flushCallbacks 函数放入异步任务队列。如果异步任务队列中已经存在 flushCallbacks 函数，等待其执行完成以后再放入下一个 flushCallbacks 函数。</p><p>flushCallbacks 函数负责执行 callbacks 数组中的所有 flushSchedulerQueue 函数。</p><p>flushSchedulerQueue 函数负责刷新 watcher 队列，即执行 queue 数组中每一个 watcher 的 run 方法，从而进入更新阶段，比如执行组件更新函数或者执行用户 watch 的回调函数。</p><p>nexttick就是在dom更新后执行延迟回调，可以获取更新后的dom</p><p>1.先判断对promise等的支持度，能用微任务就用微任务。宏任务比微任务实效性差。一般把一个宏任务开始到微任务队列清空视为一次循环，两个宏任务之间时长肯定比两个微任务长；settimeout最短延迟为4ms。</p><p>2.flushcallback函数，遍历执行回调函数</p><p>3.nexttick，里面就是我们写的回调函数。供flushcallback用。将flushcallback放入异步任务里</p><h4 id="三、源码"><a href="#三、源码" class="headerlink" title="三、源码"></a>三、源码</h4><h5 id="1-Vue，Observer，Compiler，Dep，Watcher"><a href="#1-Vue，Observer，Compiler，Dep，Watcher" class="headerlink" title="1.Vue，Observer，Compiler，Dep，Watcher"></a>1.Vue，Observer，Compiler，Dep，Watcher</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1： 通过属性  保存选项的数据</span></span><br><span class="line"><span class="comment">// 2： 把data中的成员 转换为getter和setter  注入到vue实例中 方便使用</span></span><br><span class="line"><span class="comment">// 3：调用observer对象 监听数据变化</span></span><br><span class="line"><span class="comment">// 4：调用compiler 解析指令和插值表达式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="comment">// 通过属性  保存选项的数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$options</span> = options || &#123;&#125;;<span class="comment">//如果我们在调用vue构造函数的时候 没有传入参数 我们初始化一个空对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$el</span> = <span class="keyword">typeof</span> options.<span class="property">el</span> === <span class="string">&#x27;string&#x27;</span> ? <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>) : options.<span class="property">el</span>;</span><br><span class="line">        <span class="comment">// 把data中的成员 转换为getter和setter  注入到vue实例中 方便使用</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">        <span class="comment">// 调用observer对象 监听数据变化</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">        <span class="comment">// 调用compiler 解析指令和插值表达式</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Compiler</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">_proxyData</span>(<span class="params">data</span>) &#123;<span class="comment">//vue传过来的参数 转换为getter和setter</span></span><br><span class="line">        <span class="comment">// 遍历data的所有属性</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, key, &#123;</span><br><span class="line">                <span class="comment">// 可遍历 可枚举</span></span><br><span class="line">                <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> data[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (newValue === data[key]) &#123;</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        data[key] = newValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 把data中的属性 注入到vue实例中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">walk</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1. 判断数据是否是对象，如果不是对象返回</span></span><br><span class="line">    <span class="comment">// 2. 如果是对象，遍历对象的所有属性，设置为 getter/setter</span></span><br><span class="line">    <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data != <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data, key, data[key])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  定义响应式成员  即对data总的数据实现setter和getter</span></span><br><span class="line">    <span class="title function_">defineReactive</span>(<span class="params">data, key, val</span>) &#123;</span><br><span class="line">        <span class="comment">//负责收集依赖 并发布通知</span></span><br><span class="line">        <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">        <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">        <span class="comment">// 如果 val 是对象，继续设置它下面的成员为响应式数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">walk</span>(val)</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 收集依赖</span></span><br><span class="line">                <span class="title class_">Dep</span>.<span class="property">target</span> &amp;&amp; dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val === newValue) &#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果 newValue 是对象，设置 newValue 的成员为响应式</span></span><br><span class="line">                that.<span class="title function_">walk</span>(newValue)<span class="comment">//这里不用this  因为在set方法中 在function的内部 会开启新的作用域 此时的this执行data对象</span></span><br><span class="line">                val = newValue;</span><br><span class="line">                <span class="comment">// 发布通知</span></span><br><span class="line">                dep.<span class="title function_">notify</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compiler</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要实现数据的响应机制 即数据变化 视图变化</span></span><br><span class="line"><span class="comment">// 在vue的响应机制中 我们要使用观察模式来监听数据的变化</span></span><br><span class="line"><span class="comment">// 因此 在vue中我们要实现Dep和watcher  Dep的主要作用是收集依赖 在vue中的每一个响应属性 都会创建一个dep对象 负责手机依赖于该属性的所有依赖 即订阅者 并在数据更新时候发布通知  调用watcher对象中的update方法去更新视图 简单说明就是在数据劫持监听中的get去添加依赖 在set中去发布通知</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">    <span class="comment">// 存储所有观察者</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加观察者</span></span><br><span class="line">    <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sub &amp;&amp; sub.<span class="property">update</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发布通知</span></span><br><span class="line">    <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span><br><span class="line">            sub.<span class="title function_">update</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据变化 watcher去更新视图</span></span><br><span class="line"><span class="comment">// 当我们去创建一个watcher对象时 需要把自己添加到自己的主题对象中去</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">vm, key, cb</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">        <span class="comment">// data中的属性名称</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">key</span> = key;</span><br><span class="line">        <span class="comment">// 回调函数 负责更新视图</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">        <span class="comment">// 把watcher对象记录到Dep类的静态属性target中</span></span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="comment">// 触发get方法 在get方法中调用addSub</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">oldValue</span> = vm[key]</span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当数据发生变化的时候 更新视图</span></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">lazy</span>) &#123;</span><br><span class="line">          <span class="comment">// 懒执行时走这里，比如 computed</span></span><br><span class="line">          <span class="comment">// 将 dirty 置为 true，可以让 computedGetter 执行时重新计算 computed 回调函数的执行结果</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sync</span>) &#123;</span><br><span class="line">          <span class="comment">// 同步执行，在使用 vm.$watch 或者 watch 选项时可以传一个 sync 选项，</span></span><br><span class="line">          <span class="comment">// 当为 true 时在数据更新时该 watcher 就不走异步更新队列，直接执行 this.run </span></span><br><span class="line">          <span class="comment">// 方法进行更新</span></span><br><span class="line">          <span class="comment">// 这个属性在官方文档中没有出现</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 更新时一般都这里，将 watcher 放入 watcher 队列</span></span><br><span class="line">          <span class="title function_">queueWatcher</span>(<span class="variable language_">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 watcher 放入 watcher 队列 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">queueWatcher</span> (<span class="attr">watcher</span>: <span class="title class_">Watcher</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = watcher.<span class="property">id</span></span><br><span class="line">  <span class="comment">// 如果 watcher 已经存在，则跳过，不会重复入队</span></span><br><span class="line">  <span class="keyword">if</span> (has[id] == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 缓存 watcher.id，用于判断 watcher 是否已经入队</span></span><br><span class="line">    has[id] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (!flushing) &#123;</span><br><span class="line">      <span class="comment">// 当前没有处于刷新队列状态，watcher 直接入队</span></span><br><span class="line">      queue.<span class="title function_">push</span>(watcher)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 已经在刷新队列了</span></span><br><span class="line">      <span class="comment">// 从队列末尾开始倒序遍历，根据当前 watcher.id 找到它大于的 watcher.id 的位置，然后将自己插入到该位置之后的下一个位置</span></span><br><span class="line">      <span class="comment">// 即将当前 watcher 放入已排序的队列中，且队列仍是有序的</span></span><br><span class="line">      <span class="keyword">let</span> i = queue.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (i &gt; index &amp;&amp; queue[i].<span class="property">id</span> &gt; watcher.<span class="property">id</span>) &#123;</span><br><span class="line">        i--</span><br><span class="line">      &#125;</span><br><span class="line">      queue.<span class="title function_">splice</span>(i + <span class="number">1</span>, <span class="number">0</span>, watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// queue the flush</span></span><br><span class="line">    <span class="keyword">if</span> (!waiting) &#123;</span><br><span class="line">      waiting = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !config.<span class="property">async</span>) &#123;</span><br><span class="line">        <span class="comment">// 直接刷新调度队列</span></span><br><span class="line">        <span class="comment">// 一般不会走这儿，Vue 默认是异步执行，如果改为同步执行，性能会大打折扣</span></span><br><span class="line">        <span class="title function_">flushSchedulerQueue</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 熟悉的 nextTick =&gt; vm.$nextTick、Vue.nextTick</span></span><br><span class="line"><span class="comment">       *   1、将 回调函数（flushSchedulerQueue） 放入 callbacks 数组</span></span><br><span class="line"><span class="comment">       *   2、通过 pending 控制向浏览器任务队列中添加 flushCallbacks 函数</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="title function_">nextTick</span>(flushSchedulerQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="2-nexttick"><a href="#2-nexttick" class="headerlink" title="2.nexttick"></a>2.nexttick</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> callbacks = []</span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成两件事：</span></span><br><span class="line"><span class="comment"> *   1、用 try catch 包装 flushSchedulerQueue 函数，然后将其放入 callbacks 数组</span></span><br><span class="line"><span class="comment"> *   2、如果 pending 为 false，表示现在浏览器的任务队列中没有 flushCallbacks 函数</span></span><br><span class="line"><span class="comment"> *     如果 pending 为 true，则表示浏览器的任务队列中已经被放入了 flushCallbacks 函数，</span></span><br><span class="line"><span class="comment"> *     待执行 flushCallbacks 函数时，pending 会被再次置为 false，表示下一个 flushCallbacks 函数可以进入</span></span><br><span class="line"><span class="comment"> *     浏览器的任务队列了</span></span><br><span class="line"><span class="comment"> * pending 的作用：保证在同一时刻，浏览器的任务队列中只有一个 flushCallbacks 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; cb 接收一个回调函数 =&gt; flushSchedulerQueue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; ctx 上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span> (cb?: <span class="title class_">Function</span>, ctx?: <span class="title class_">Object</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _resolve</span><br><span class="line">  <span class="comment">// 用 callbacks 数组存储经过包装的 cb 函数</span></span><br><span class="line">  callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="comment">// 用 try catch 包装回调函数，便于错误捕获</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.<span class="title function_">call</span>(ctx)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, ctx, <span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      <span class="title function_">_resolve</span>(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 执行 timerFunc，在浏览器的任务队列中（首选微任务队列）放入 flushCallbacks 函数</span></span><br><span class="line">    <span class="title function_">timerFunc</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Flush both queues and run the watchers.</span></span><br><span class="line"><span class="comment"> * 刷新队列，由 flushCallbacks 函数负责调用，主要做了如下两件事：</span></span><br><span class="line"><span class="comment"> *   1、更新 flushing 为 ture，表示正在刷新队列，在此期间往队列中 push 新的 watcher 时需要特殊处理（将其放在队列的合适位置）</span></span><br><span class="line"><span class="comment"> *   2、按照队列中的 watcher.id 从小到大排序，保证先创建的 watcher 先执行，也配合 第一步</span></span><br><span class="line"><span class="comment"> *   3、遍历 watcher 队列，依次执行 watcher.before、watcher.run，并清除缓存的 watcher</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushSchedulerQueue</span> () &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 刷新队列之前先给队列排序（升序），可以保证：</span></span><br><span class="line"><span class="comment">   *   1、组件的更新顺序为从父级到子级，因为父组件总是在子组件之前被创建</span></span><br><span class="line"><span class="comment">   *   2、一个组件的用户 watcher 在其渲染 watcher 之前被执行，因为用户 watcher 先于 渲染 watcher 创建</span></span><br><span class="line"><span class="comment">   *   3、如果一个组件在其父组件的 watcher 执行期间被销毁，则它的 watcher 可以被跳过</span></span><br><span class="line"><span class="comment">   * 排序以后在刷新队列期间新进来的 watcher 也会按顺序放入队列的合适位置</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以看到 timerFunc 的作用很简单，就是将 flushCallbacks 函数放入浏览器的异步任务队列中</span></span><br><span class="line"><span class="keyword">let</span> timerFunc</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(<span class="title class_">Promise</span>)) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  <span class="comment">// 首选 Promise.resolve().then()</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在 微任务队列 中放入 flushCallbacks 函数</span></span><br><span class="line">    p.<span class="title function_">then</span>(flushCallbacks)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在有问题的UIWebViews中，Promise.then不会完全中断，但是它可能会陷入怪异的状态，</span></span><br><span class="line"><span class="comment">     * 在这种状态下，回调被推入微任务队列，但队列没有被刷新，直到浏览器需要执行其他工作，例如处理一个计时器。</span></span><br><span class="line"><span class="comment">     * 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (isIOS) <span class="built_in">setTimeout</span>(noop)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class="line">  <span class="title function_">isNative</span>(<span class="title class_">MutationObserver</span>) ||</span><br><span class="line">  <span class="comment">// PhantomJS and iOS 7.x</span></span><br><span class="line">  <span class="title class_">MutationObserver</span>.<span class="title function_">toString</span>() === <span class="string">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class="line">)) &#123;</span><br><span class="line">  <span class="comment">// MutationObserver 次之</span></span><br><span class="line">  <span class="comment">// Use MutationObserver where native Promise is not available,</span></span><br><span class="line">  <span class="comment">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class="line">  <span class="comment">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(flushCallbacks)</span><br><span class="line">  <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter))</span><br><span class="line">  observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">    <span class="attr">characterData</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(setImmediate)) &#123;</span><br><span class="line">  <span class="comment">// 再就是 setImmediate，它其实已经是一个宏任务了，但仍然比 setTimeout 要好</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setImmediate</span>(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 最后没办法，则使用 setTimeout</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/Guolicheng_/article/details/119463976">https://blog.csdn.net/Guolicheng_/article/details/119463976</a></p><p><a href="https://blog.csdn.net/weixin_43097944/article/details/116134903?spm=1001.2101.3001.6650.9&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-9-116134903-blog-107348545.pc_relevant_aa&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-9-116134903-blog-107348545.pc_relevant_aa&amp;utm_relevant_index=10">https://blog.csdn.net/weixin_43097944/article/details/116134903?spm=1001.2101.3001.6650.9&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-9-116134903-blog-107348545.pc_relevant_aa&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-9-116134903-blog-107348545.pc_relevant_aa&amp;utm_relevant_index=10</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli搭建项目的webpack配置</title>
      <link href="/2022/06/19/Vue-cli%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%9A%84webpack%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/06/19/Vue-cli%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%9A%84webpack%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>经历过vue-cli2的时代，优化过项目打包配置，趁最近面试整理一下。分为默认配置介绍和自定义配置方法。</p><p>webpack可靠文档地址：<a href="https://webpack.docschina.org/configuration/optimization/">https://webpack.docschina.org/configuration/optimization/</a></p><p>vue-cli官方文档：<a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a></p><h3 id="一、默认配置"><a href="#一、默认配置" class="headerlink" title="一、默认配置"></a>一、默认配置</h3><h4 id="1、vue-cli4"><a href="#1、vue-cli4" class="headerlink" title="1、vue-cli4"></a>1、vue-cli4</h4><p>电脑上当前vue-cli是4.5.7版本，查看项目webpack版本为4.46.0</p><p>vue-cli对webpack配置进行了抽象，不能直接查看，但是vue-cli-service暴露了inspect命令用于查看webpack配置</p><p>命令：vue inspect &gt; webpconfig.js</p><p>生成一个webpconfig.js文件（默认配置共1300+行，这里删除了一些细节，保留了整体结构，具体可通过以上命令自行查看）</p><p>这里对选项加了注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 环境，不同环境使用不同优化的配置。vue-cli通过vue-cli-service的命令参数来更改打包时所用的环境。</span></span><br><span class="line">  <span class="attr">context</span>: <span class="string">&#x27;/Users/lishichang/Desktop/未命名文件夹/test&#x27;</span>, <span class="comment">// entry等文件的上下文，entry路径在context目录下写相对路径</span></span><br><span class="line">  <span class="attr">node</span>: &#123;&#125;, <span class="comment">// 这可以使最初为 Node.js 环境编写的代码，在其他环境（如浏览器）中运行。</span></span><br><span class="line">  <span class="attr">output</span>: &#123;&#125;, <span class="comment">// 指示 webpack 如何去输出、以及在哪里输出你的bundle</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123; <span class="comment">// 别名</span></span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="string">&#x27;/Users/lishichang/Desktop/未命名文件夹/test/src&#x27;</span>,</span><br><span class="line">      <span class="attr">vue$</span>: <span class="string">&#x27;vue/dist/vue.runtime.esm.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extensions</span>: [], <span class="comment">// 扩展名，默认以下这些，不写扩展名会去搜索文件，&#x27;.mjs&#x27;,&#x27;.js&#x27;,&#x27;.jsx&#x27;,&#x27;.vue&#x27;,&#x27;.json&#x27;,&#x27;.wasm&#x27;</span></span><br><span class="line">    <span class="attr">modules</span>: [ <span class="comment">// 告诉 webpack 解析模块时应该搜索的目录。</span></span><br><span class="line">      <span class="string">&#x27;node_modules&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/Users/lishichang/Desktop/未命名文件夹/test/node_modules&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;/Users/lishichang/Desktop/未命名文件夹/test/node_modules/@vue/cli-service/node_modules&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">plugins</span>: [ <span class="comment">//应该使用的额外的解析插件</span></span><br><span class="line">      <span class="comment">/* config.resolve.plugin(&#x27;pnp&#x27;) */</span></span><br><span class="line">      &#123;&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolveLoader</span>: &#123;&#125;, <span class="comment">// 这组选项与上面的 resolve 对象的属性集合相同，但仅用于解析 webpack 的 loader 包</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">noParse</span>: <span class="regexp">/^(vue|vue-router|vuex|vuex-router-sync)$/</span>, <span class="comment">// 防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略大型的 library 可以提高构建性能。</span></span><br><span class="line">    <span class="comment">// module.rules就是loader配置，这里保留了vue的loader，可以看到至少vue-cli4.5.7，默认就加了cache-loader优化，cli2没有</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">/* config.module.rule(&#x27;vue&#x27;) */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">/* config.module.rule(&#x27;vue&#x27;).use(&#x27;cache-loader&#x27;) */</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;/Users/lishichang/Desktop/未命名文件夹/test/node_modules/cache-loader/dist/cjs.js&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">cacheDirectory</span>: <span class="string">&#x27;/Users/lishichang/Desktop/未命名文件夹/test/node_modules/.cache/vue-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">cacheIdentifier</span>: <span class="string">&#x27;9d856fc8&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule(&#x27;vue&#x27;).use(&#x27;vue-loader&#x27;) */</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;/Users/lishichang/Desktop/未命名文件夹/test/node_modules/vue-loader/lib/index.js&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">compilerOptions</span>: &#123;</span><br><span class="line">                <span class="attr">whitespace</span>: <span class="string">&#x27;condense&#x27;</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">cacheDirectory</span>: <span class="string">&#x27;/Users/lishichang/Desktop/未命名文件夹/test/node_modules/.cache/vue-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">cacheIdentifier</span>: <span class="string">&#x27;9d856fc8&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123; <span class="comment">// 从 webpack 4 开始，会根据你选择的 mode 来执行不同的优化，不过所有的优化还是可以手动配置和重写。</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123; <span class="comment">// webpack4.0后提供一个新的分包插件SplitChunksPlugin，开箱即用，高度抽象，移除了CommonsChunkPlugin</span></span><br><span class="line">      <span class="comment">// 并且vue-cli4给了默认配置，一般不需要再优化了</span></span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">vendors</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;chunk-vendors&#x27;</span>,</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">common</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;chunk-common&#x27;</span>,</span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">          <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">minimizer</span>: [ <span class="comment">// 允许你通过提供一个或多个定制过的 TerserPlugin 实例，覆盖默认压缩工具(minimizer)。</span></span><br><span class="line">      <span class="comment">/* config.optimization.minimizer(&#x27;terser&#x27;) */</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">terserOptions</span>: &#123;</span><br><span class="line">            <span class="attr">compress</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">mangle</span>: &#123;</span><br><span class="line">              <span class="attr">safari10</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">parallel</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">extractComments</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">/* config.plugin(&#x27;vue-loader&#x27;) */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(), <span class="comment">// 处理rule，可以理解为loader做不了的事扔给plugin</span></span><br><span class="line">    <span class="comment">/* config.plugin(&#x27;define&#x27;) */</span></span><br><span class="line">    <span class="comment">// dotenv 是node.js的一个package,可以被node.js读取，但是不能被js读取，所以我们需要借助webpack将它们load进来，然后转换成js的全局环境变量。</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&#x27;process.env&#x27;</span>: &#123;</span><br><span class="line">          <span class="attr">NODE_ENV</span>: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">          <span class="attr">BASE_URL</span>: <span class="string">&#x27;&quot;/&quot;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">/* config.plugin(&#x27;case-sensitive-paths&#x27;) */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CaseSensitivePathsPlugin</span>(),</span><br><span class="line">    <span class="comment">/* config.plugin(&#x27;friendly-errors&#x27;) */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FriendlyErrorsWebpackPlugin</span>(),</span><br><span class="line">    <span class="comment">/* config.plugin(&#x27;html&#x27;) */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(),</span><br><span class="line">    <span class="comment">/* config.plugin(&#x27;preload&#x27;) */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PreloadPlugin</span>(),</span><br><span class="line">    <span class="comment">/* config.plugin(&#x27;prefetch&#x27;) */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">PreloadPlugin</span>(),</span><br><span class="line">    <span class="comment">/* config.plugin(&#x27;copy&#x27;) */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">app</span>: [</span><br><span class="line">      <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、vue-cli2"><a href="#2、vue-cli2" class="headerlink" title="2、vue-cli2"></a>2、vue-cli2</h4><p>回看了一下2018年优化过的项目，采用vue-cli2搭建，webpack版本为3.12.0。</p><p>Vue-cli2搭建项目部分目录结构如下，webpack配置文件在build文件夹中</p><p><img src="/image/vue-cli2%E7%9B%AE%E5%BD%95.jpeg" alt="vue-cli2目录"></p><h5 id="webpack-base-config-js"><a href="#webpack-base-config-js" class="headerlink" title="webpack.base.config.js"></a>webpack.base.config.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">&#x27;./vue-loader.conf&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;..&#x27;</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../&#x27;</span>),</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">app</span>: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: config.<span class="property">build</span>.<span class="property">assetsRoot</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">        <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ?</span><br><span class="line">            config.<span class="property">build</span>.<span class="property">assetsPublicPath</span> : config.<span class="property">dev</span>.<span class="property">assetsPublicPath</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">externals</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;vendor&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src/vendor&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: vueLoaderConfig</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;style-loader!css-loader!less-loader&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">include</span>: [<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>), <span class="title function_">resolve</span>(<span class="string">&#x27;test&#x27;</span>), <span class="title function_">resolve</span>(<span class="string">&#x27;node_modules/webpack-dev-server/client&#x27;</span>)],</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            ...<span class="comment">// 省略了一些不重要的字体、文件loader</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">node</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="webpack-dev-config-js"><a href="#webpack-dev-config-js" class="headerlink" title="webpack.dev.config.js"></a>webpack.dev.config.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码过多，只放我想放的，毕竟vue-cli2已经很少了</span></span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = <span class="title function_">merge</span>(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxyTable</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123; <span class="comment">//将www.exaple.com印射为/apis</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://***/admin&#x27;</span>, <span class="comment">// 接口域名</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//是否跨域</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//需要rewrite的,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="webpack-prod-config-js"><a href="#webpack-prod-config-js" class="headerlink" title="webpack.prod.config.js"></a>webpack.prod.config.js</h5><p>vue-cli2默认配置了CommonsChunkPlugin插件</p><p>webpack4.0后提供一个新的分包插件SplitChunksPlugin，开箱即用，移除了CommonsChunkPlugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.conf&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ExtractTextPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;extract-text-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OptimizeCSSPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UglifyJsPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BundleAnalyzerPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).<span class="property">BundleAnalyzerPlugin</span>;</span><br><span class="line"><span class="keyword">if</span> (config.<span class="property">build</span>.<span class="property">productionGzip</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">CompressionWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// keep module.id stable when vendor modules does not change</span></span><br><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">HashedModuleIdsPlugin</span>(),</span><br><span class="line"><span class="comment">// enable scope hoisting</span></span><br><span class="line"><span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">ModuleConcatenationPlugin</span>(),</span><br><span class="line"><span class="comment">// split vendor js into its own file</span></span><br><span class="line"><span class="comment">// vue-cli2默认配置了CommonsChunkPlugin插件</span></span><br><span class="line"><span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">CommonsChunkPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">  minChunks (<span class="variable language_">module</span>) &#123;</span><br><span class="line">    <span class="comment">// any required modules inside node_modules are extracted to vendor</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">resource</span> &amp;&amp;</span><br><span class="line">      <span class="regexp">/\.js$/</span>.<span class="title function_">test</span>(<span class="variable language_">module</span>.<span class="property">resource</span>) &amp;&amp;</span><br><span class="line">      <span class="variable language_">module</span>.<span class="property">resource</span>.<span class="title function_">indexOf</span>(</span><br><span class="line">        path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../node_modules&#x27;</span>)</span><br><span class="line">      ) === <span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">OptimizeCSSPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">cssProcessorOptions</span>: config.<span class="property">build</span>.<span class="property">productionSourceMap</span></span><br><span class="line">    ? &#123; <span class="attr">safe</span>: <span class="literal">true</span>, <span class="attr">map</span>: &#123; <span class="attr">inline</span>: <span class="literal">false</span> &#125; &#125;</span><br><span class="line">    : &#123; <span class="attr">safe</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="二、自定义配置和优化"><a href="#二、自定义配置和优化" class="headerlink" title="二、自定义配置和优化"></a>二、自定义配置和优化</h3><p>针对vue-cli4以上版本，vue.config.js，配置文档：<a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a></p><p>1.cache-loader，缓存，放在其他loader前，尤其开销大的loader适合使用。vue-cli4默认使用。</p><p>2.thread-loader，</p><p>使用时，需将此 loader 放置在其他 loader 之前。放置在此 loader 之后的 loader 会在一个独立的 worker 池中运行。</p><p>在 worker 池中运行的 loader 是受到限制的。例如：</p><ul><li>这些 loader 不能生成新的文件。</li><li>这些 loader 不能使用自定义的 loader API（也就是说，不能通过插件来自定义）。</li><li>这些 loader 无法获取 webpack 的配置。</li><li>请仅在耗时的操作中使用此 loader，如babel-loader</li></ul><p>3.devtool，对sourcemap的使用。cheap-module-eval-source-map性能更好，生产环境就把source-map关掉。</p><p>4.开发环境不要启用压缩代码这些。生成环境如无必要，不用压缩代码、混淆代码，这些插件影响构建性能。</p><p>5.CommonsChunksPlugin，提取出manifest，这样如果没有更改的模块，不会重新生成hash值。vue-cli2默认使用，vue-cli4移除，增加了SplitChunksPlugin，默认使用SplitChunksPlugin</p><p>6.loader用在必要的地方，test选项中加include字段来规定使用loader的范围，避免查找和转换不必要的地方</p><p>7.常用打包分析插件分析如bundleAnalyzerReport，vendor包太大，用externals去除不必要的第三方包参与打包，改为使用cdn引入。</p><p>8.少写extensions，把扩展名写上，减少程序搜索文件次数。</p><p>9.更新版本，vue，vue-cli，webpack等，新版本都会有一些性能的优化。</p><p>10.优化代码，写合理的逻辑。</p><p>&#x2F;&#x2F; 新的脚手架都默认做了很多优化，一般情况下已经无需大动。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-大量数据渲染性能优化2</title>
      <link href="/2022/06/18/js-%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%962/"/>
      <url>/2022/06/18/js-%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%962/</url>
      
        <content type="html"><![CDATA[<p>工作中解决过如题的问题，4万条数据需要瞬间渲染到页面上，趁最近需要，重新整理一遍</p><p>第一次优化采用了数据分组分多次渲染的方法，能迅速渲染上一组数据，达到很好的初始视觉效果，但是总的dom元素数量还是一样庞大，当渲染完所有dom，滑动时还是会卡顿。</p><p>所以在更高要求下还是要用虚拟滚动，就是只渲染当前视口及附近的数据，通过滚动位置和每条高度来计算当前视口应该展示哪些数据，这样渲染的数据量小，不会因dom数量大而卡顿。当时没找到现成合适的插件，需要自己写，这个方案需要处理的细节很多，此demo处理了核心逻辑，开发时需要注意细节。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>渲染优化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow-y</span>: scroll;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow-x</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.background</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">4025520px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cell</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置盒子高度，模拟滚动条 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;background&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 渲染数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建20万条数据时间相比较渲染20万条数据的时间可以忽略不计</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = []</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        data.<span class="title function_">push</span>(i+<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 外层盒子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> wrapper = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#wrapper&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 渲染数据用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 每行高度固定20，当前页面在可视窗口能展示n条，当前页面上展示的第一条在数据中的位置是x，则范围就是[x-n, x+n]或x&lt;n时就是[0，x+n]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> scrollRange = []</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 每页展示多少条数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> num = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(wrapper.<span class="property">clientHeight</span> / <span class="number">20</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 渲染</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 滚动的时候改变渲染的数据</span></span></span><br><span class="line"><span class="language-javascript">    wrapper.<span class="property">onscroll</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 滚动高度</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> n = e.<span class="property">target</span>.<span class="property">scrollTop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 展示的第一条在数据中的位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> first = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(n/<span class="number">20</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果当前在范围中，则利用list的默认滚动，算是做了节流，也是为了能有滚动边界的效果，不然看到边界的数据是瞬变的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(first &gt; scrollRange[<span class="number">0</span>] &amp;&amp; first+num &lt; scrollRange[<span class="number">1</span>]) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 到了临界点，再更新数据重新渲染</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">render</span>(n)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> first = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(n / <span class="number">20</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> leftData = data.<span class="title function_">slice</span>(first-num, first)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> centerData = data.<span class="title function_">slice</span>(first, first + num)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> rightData = data.<span class="title function_">slice</span>(first + num, first + <span class="number">2</span>*num)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> runData = [...leftData, ...centerData, ...rightData]</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; runData.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">            str += <span class="string">`&lt;p class=&#x27;cell&#x27;&gt;<span class="subst">$&#123;runData[i]&#125;</span>&lt;/p&gt;`</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 替换数据，重新渲染</span></span></span><br><span class="line"><span class="language-javascript">        list.<span class="property">innerHTML</span> = str</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 改变list在wrapper中的位置。用transform属性的translate不会回流，性能更好</span></span></span><br><span class="line"><span class="language-javascript">        list.<span class="property">style</span>.<span class="property">top</span> = <span class="number">0</span> + n - leftData.<span class="property">length</span> * <span class="number">20</span> + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 数据改变后，重置范围，在此范围内不替换数据，用list默认滚动</span></span></span><br><span class="line"><span class="language-javascript">        scrollRange = [first-leftData.<span class="property">length</span>, first+<span class="number">2</span>*num]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-大量数据渲染性能优化1</title>
      <link href="/2022/06/18/js-%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%961/"/>
      <url>/2022/06/18/js-%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%961/</url>
      
        <content type="html"><![CDATA[<p>工作中解决过如题的问题，4万条数据需要瞬间渲染到页面上，趁最近需要，重新整理一遍</p><p>第一次优化采用了数据分组分多次渲染的方法，能迅速渲染上一组数据，达到很好的初始视觉效果，但是总的dom元素数量还是一样庞大，当渲染完所有dom，滑动时还是会卡顿。</p><p>所以在更高要求下还是要用虚拟滚动，写在了下一篇。本篇就把分组简单的附上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建20万条数据时间相比较渲染20万条数据的时间可以忽略不计</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = []</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200000</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        data.<span class="title function_">push</span>(i+<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 分组，分成二维数组resultArr</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> partArr = []</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> resultArr = []</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>((i+<span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span> &amp;&amp; i+<span class="number">1</span> != data.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            resultArr.<span class="title function_">push</span>(partArr)</span></span><br><span class="line"><span class="language-javascript">            partArr = []</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        partArr.<span class="title function_">push</span>(data[i])</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(i+<span class="number">1</span> == data.<span class="property">length</span>) resultArr.<span class="title function_">push</span>(partArr)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 循环渲染</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">arr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// dom节点的占位符。原来用的拼接字符串，然后用jquery的append添加，此处用createDocumentFragment，分组的思想是一样的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            p.<span class="property">innerHTML</span> = arr[i]</span></span><br><span class="line"><span class="language-javascript">            frag.<span class="title function_">appendChild</span>(p)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(frag)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 循环每组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; resultArr.<span class="property">length</span>; i ++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(resultArr[i])</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-生命周期</title>
      <link href="/2022/06/16/vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/06/16/vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>vue生命周期</p><span id="more"></span><p>一、vue2和vue3对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue3和vue2对比生命周期</span></span><br><span class="line"><span class="keyword">const</span> changePoint = &#123;</span><br><span class="line">  <span class="attr">beforeCreate</span>: <span class="title function_">setup</span>(), <span class="comment">// 实例初始化后，数据和方法等配置之前调用</span></span><br><span class="line">  <span class="attr">created</span>: <span class="title function_">setup</span>(), <span class="comment">// 数据和方法等配置好后</span></span><br><span class="line">  <span class="attr">beforeMount</span>: onBeforeMount, <span class="comment">// 挂载前</span></span><br><span class="line">  <span class="attr">mounted</span>: onMounted, <span class="comment">// 有了$el并挂载后</span></span><br><span class="line">  <span class="attr">beforeUpdate</span>: onBeforeUpdate, <span class="comment">// 数据更新后，重新渲染前</span></span><br><span class="line">  <span class="attr">updated</span>: onUpdated, <span class="comment">// 虚拟dom重渲染后，这里可以执行依赖dom的操作</span></span><br><span class="line">  <span class="attr">beforeDestroy</span>: onBeforeUnmount, <span class="comment">// 销毁前</span></span><br><span class="line">  <span class="attr">destroyed</span>: onUnmounted, <span class="comment">// 销毁</span></span><br><span class="line">  <span class="attr">activated</span>: onActivated, <span class="comment">// keep-alive 组件激活时调用。</span></span><br><span class="line">  <span class="attr">deactivated</span>: onDeactivated, <span class="comment">// keep-alive 组件停用时调用。</span></span><br><span class="line">  <span class="attr">errorCaptured</span>: onErrorCaptured, <span class="comment">// 当捕获一个来自子孙组件的异常时激活钩子函数</span></span><br><span class="line">  <span class="comment">// 新增，官方说是调试用</span></span><br><span class="line">  <span class="attr">null</span>: onRenderTracked, <span class="comment">// vue3调试用的钩子，对响应式变量和方法进行状态跟踪，只要页面update，就会激活它生成一个event对象，可以通过event对象调试</span></span><br><span class="line">  <span class="attr">null</span>: onRenderTriggered, <span class="comment">// vue3调试用的钩子，跟踪发生变化的值，新值和旧值都展示出来，进行针对性调试。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// vue3语法eg:</span></span><br><span class="line"><span class="title function_">onRenderTriggered</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>二、父子组件生命周期顺序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!keepAlive)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 父组件走到beforeMount/beforeUpdate的时候，会先将子组件的生命周期走完mounted，再继续走父组件的mounted/updated</span></span><br><span class="line"><span class="comment">// 父子组件都销毁时，父组件走到beforeDestroy的时候，会先将子组件销毁，再继续销毁父组件</span></span><br><span class="line">  parent-beforeCreate</span><br><span class="line">  parent-created</span><br><span class="line">  parent-beforeMount</span><br><span class="line">    child-beforeCreate</span><br><span class="line">    child-created</span><br><span class="line">    child-beforeMount</span><br><span class="line">    child-mounted</span><br><span class="line">  parent-mounted</span><br><span class="line"> parent-beforeUpdate</span><br><span class="line">  parent-updated</span><br><span class="line">  parent-beforeDestroy</span><br><span class="line">    child-beforeDestroy</span><br><span class="line">    child-destroyed</span><br><span class="line">  parent-destroyed</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(keepAlive)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 用keep-alive包裹的组件，第一次beforeMount，mounted，activated，第二次beforeUpdate，deactivated(旧组件)，updated，activated</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、最后附官方图</p><p><img src="/image/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="vue生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-基础</title>
      <link href="/2022/06/07/js-%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/06/07/js-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>js基础</p><span id="more"></span><h4 id="先放个简单笔记，有时间再细写"><a href="#先放个简单笔记，有时间再细写" class="headerlink" title="先放个简单笔记，有时间再细写"></a>先放个简单笔记，有时间再细写</h4><p><img src="/image/js%E5%9F%BA%E7%A1%80-5258679.jpeg" alt="js基础"></p><h4 id="js引擎解析过程简单了解"><a href="#js引擎解析过程简单了解" class="headerlink" title="js引擎解析过程简单了解"></a>js引擎解析过程简单了解</h4><p>js代码经过解析器解析成ast语法树，再通过解释器解释称字节码，字节码可直接执行，也可再编译成机器代码执行。</p><p>热点函数：字节码执行中，经过优化器，会提出一些经常使用的函数作为热点函数，再调用时直接调用机器代码，提升性能。如果参数类型突然变了，机器代码接收到参数不认识，就会反编译成字节码，再执行。</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo\typora搭建维护博客</title>
      <link href="/2022/06/01/hexo/"/>
      <url>/2022/06/01/hexo/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>hexo搭建博客，从gitee迁移过来，重新梳理记录一下</p><span id="more"></span><h4 id="一、准备好nodes-npm-hero"><a href="#一、准备好nodes-npm-hero" class="headerlink" title="一、准备好nodes, npm, hero"></a>一、准备好nodes, npm, hero</h4><h5 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">// 安装完，hexo -v查看版本号</span><br></pre></td></tr></table></figure><h5 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2. 初始化"></a>2. 初始化</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog(项目名字)</span><br><span class="line">// 初始化完，会有个blog文件夹，可能是新版本在init中执行了npm install，cd blog进入，此时已经有了node_modules</span><br></pre></td></tr></table></figure><p>此处可能的问题：</p><p>初始化失败报错no such file可能是github被墙了</p><h5 id="3-清除部署目录-public文件夹"><a href="#3-清除部署目录-public文件夹" class="headerlink" title="3. 清除部署目录-public文件夹"></a>3. 清除部署目录-public文件夹</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo clean</span><br></pre></td></tr></table></figure><h5 id="4-重新将md生成html"><a href="#4-重新将md生成html" class="headerlink" title="4. 重新将md生成html"></a>4. 重新将md生成html</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo g</span><br></pre></td></tr></table></figure><h5 id="5-启动本地服务"><a href="#5-启动本地服务" class="headerlink" title="5. 启动本地服务"></a>5. 启动本地服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo s</span><br></pre></td></tr></table></figure><h5 id="6-部署"><a href="#6-部署" class="headerlink" title="6. 部署"></a>6. 部署</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo d</span><br></pre></td></tr></table></figure><p>此处可能的问题：</p><p>1.remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead</p><p>原因：github出于安全考虑，将密码换成token</p><p>解决：</p><p>（1）打开Github，在个人设置页面，找到【Setting】，然后打开找到【Devloper Settting】</p><p>（2）选择个人访问令牌【Personal access tokens】，然后选中生成令牌【Generate new token】</p><p>（3）生成token后保存下来，以便进行后面的操作。把token直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入token了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://&lt;token&gt;@github.com/&lt;username&gt;/&lt;repository&gt;.git/</span><br></pre></td></tr></table></figure><p>2.git报错fatal: unable to access ‘<a href="https://github.com/.......%E2%80%98">https://github.com/.......‘</a>: OpenSSL SSL_read: Connection was reset</p><p>原因：一般是这是因为服务器的<a href="https://so.csdn.net/so/search?q=SSL&spm=1001.2101.3001.7020">SSL</a>证书没有经过第三方机构的签署</p><p>解决：解除ssl验证后，再次git即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure><p>3.err: Error: Spawn failed</p><p>原因：问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。</p><p>解决：清除.deploy_git文件和public文件夹，重新生成和部署</p><h5 id="7-生成文章"><a href="#7-生成文章" class="headerlink" title="7. 生成文章"></a>7. 生成文章</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo n 文章名</span><br><span class="line">// 生成文件在 source/_posts</span><br></pre></td></tr></table></figure><h5 id="8-生成标签和分类页，必须手动生成和配置，否则没有，浏览器打不开"><a href="#8-生成标签和分类页，必须手动生成和配置，否则没有，浏览器打不开" class="headerlink" title="8.生成标签和分类页，必须手动生成和配置，否则没有，浏览器打不开"></a>8.生成标签和分类页，必须手动生成和配置，否则没有，浏览器打不开</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br><span class="line">// 生成后去 /source/categories/index.md，默认只有title和date两项，需添加type:&quot;categories&quot;和layout:&quot;categories&quot;两项</span><br><span class="line">// 生成后去 /source/tags/index.md，默认只有title和date两项，需添加type:&quot;tags&quot;和layout:&quot;tags&quot;两项</span><br></pre></td></tr></table></figure><h5 id="9-主题，butterfly：https-butterfly-js-org-posts-4aa8abbe"><a href="#9-主题，butterfly：https-butterfly-js-org-posts-4aa8abbe" class="headerlink" title="9.主题，butterfly：https://butterfly.js.org/posts/4aa8abbe/"></a>9.主题，butterfly：<a href="https://butterfly.js.org/posts/4aa8abbe/">https://butterfly.js.org/posts/4aa8abbe/</a></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 本地搜索功能插件</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">// 安装后，去主题配置文件_config.butterfly.yml(这个文件由主题中的config文件（node_modules中的hexo-theme-butterfly中的_config.yml）复制到根目录然后用于修改)。修改local_search的enable为true</span><br></pre></td></tr></table></figure><h4 id="二、准备GitHub-x2F-gitee-审核机制离谱，优化前不建议用gitee"><a href="#二、准备GitHub-x2F-gitee-审核机制离谱，优化前不建议用gitee" class="headerlink" title="二、准备GitHub&#x2F;gitee(审核机制离谱，优化前不建议用gitee)"></a>二、准备GitHub&#x2F;gitee(审核机制离谱，优化前不建议用gitee)</h4><p>原文带图：<a href="https://blog.csdn.net/qq_46922488/article/details/119348718">https://blog.csdn.net/qq_46922488/article/details/119348718</a></p><p>1.点击<strong>Create repository</strong>新建一个仓库</p><p>2.仓库名字一定要和自己账号的名字一样，后面一定要加**.github.io<strong>，选择Public公开储存库，最后</strong>Add a README file<strong>添加README文件的勾也要勾上，点击</strong>Create repository**创建储存库就完成了</p><p>3.进入储存库后点击Settings，往下滑找到GitHub Pages。</p><p>4.点击Check it out here!，将Source里的Branch分支改成main，点击Save就好了，如果已经是这样了那就不用改了。</p><p>5.输入<code>git config --global user.name &quot;你GitHub账号的名字&quot;，</code></p><p>再输入<code>git config --global user.email &quot;你GitHub账号的邮箱&quot;</code>。</p><p>6.然后输入<code>ssh-keygen -t rsa -C &quot;你GitHub账号的邮箱&quot;</code>来生成SSH Key，中途按3次回车。</p><p>7.然后输入<code>cat ~/.ssh/id_rsa.pub</code>输出SSH Key，然后全部复制下来。</p><p>8.然后打开GitHub点击自己的头像，再点击Settings，再点击<strong>SSH and GPG keys</strong>，然后再点击<strong>New SSH key</strong>,然后输入SSH key的名字，随便取，再输入刚才复制的SSH key，点击Add SSH key就添加好了。</p><p>9.然后打开博客blog文件夹里面的**_config.yml**文件，修改最后一行的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/***/***.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>10.然后在cmd上输入<code>npm install hexo-deployer-git --save</code>安装GitHub推送插件</p><p>11.安装好了以后再输入<code>hexo g</code>生成静态网页，再输入<code>hexo d</code>上传到GitHub就可以了</p><p>12.接着把设置中的Github Page里的分支改成master就好了，如果已经是这样了那就不用改了。</p><h4 id="三、typora"><a href="#三、typora" class="headerlink" title="三、typora"></a>三、typora</h4><p>1.偏好设置-设置相对路径</p><p>2.格式-图像-设置图像根目录</p><p>完成这两步才能保证图片在本地选择后生成文章并部署到服务器时路径能被访问到</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html2canvas</title>
      <link href="/2021/10/06/html2canvas/"/>
      <url>/2021/10/06/html2canvas/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>html2canvas的一些坑</p><span id="more"></span><p>1.带图片的页面生成图片跨域问题</p><p>1）同源的图片，ios和安卓用background-image都没问题</p><p>2）不同源的图片，ali-oss的图片（有允许跨域请求头）和cdn的图片（没有允许跨域请求头），在ios上用background-image不行，安卓没问题。</p><p>3）不同源的图片，ali-oss的图片（有允许跨域请求头）和cdn的图片（没有允许跨域请求头），用xhr请求必须有允许跨域请求头，不然请求失败</p><p>4）用img标签，ios和安卓都可以，但是不支持属性object-fit，用了<em>html2canvas-objectfit-fix</em>，支持了object-fit属性，但是不支持<em>object-position</em>（需求是动态返回的图片放在固定宽高的容器中不能有黑边，需要cover，但是竖着的图片想保留上部分，横着的图片想保留中间部分），在html2canvas-object-fix中object-position默认居中，无法更改</p><p>5）ios上canvas的drawimage（）方法的第三个参数，即从纵向的什么位置开始裁剪，不能为负数，负数不生效</p>]]></content>
      
      
      <categories>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>app内嵌h5问题记录</title>
      <link href="/2021/08/06/app%E5%86%85%E5%B5%8Ch5%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/08/06/app%E5%86%85%E5%B5%8Ch5%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>app内嵌h5遇到的小问题记录，经验值+1</p><span id="more"></span><p>1.调app原生给的方法会有些不常用的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isIOS) &#123;</span><br><span class="line">  <span class="comment">// 例如这句语法，如果用了eslint，rules里有&quot;no-undef&quot;这些会导致eslint报错，可以把这些规则关掉</span></span><br><span class="line">  <span class="attr">javascript</span>: nativeRegisteredTools.<span class="title function_">invoke</span>(<span class="string">&quot;reg03&quot;</span>, st);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">webkit</span>.<span class="property">messageHandlers</span>.<span class="property">setShare</span>.<span class="title function_">postMessage</span>(st);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.app原生给的方法有的是用location.href调用，不方便拦截，当需要拦截&#x2F;捕获结果时，想到的办法就是用定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未登录(或者说是未获取)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">`<span class="subst">$&#123;<span class="built_in">encodeURI</span>(<span class="string">&quot;cmgyt://yt.getuserinfo?callBackFun=ytGetuserinfo&quot;</span>)&#125;</span>`</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">appUserId</span>) &#123;</span><br><span class="line">    <span class="comment">// 登录完了</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    <span class="title function_">next</span>(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>3.关于分享出去的h5唤起app的问题</p><p>h5并不能获取到设备是否安装了app及打开app，通常做法都是‘曲线救国’，判断页面是否隐藏（进入后台）来判断是否调起app（调起的方法由app提供）</p><p>在安卓中用scheme方法（非微信浏览器，微信浏览器中无法调起外部app，只能直接写跳转应用宝的链接window.location&#x3D;”应用宝链接”），先调用window.location &#x3D; this.scheme（app提供的调起app的scheme），再调用checkOpen()方法即可，checkOpen中判断页面是否隐藏来判断是否调起成功，其中3秒的延迟可能有问题（成功调起app后仍然弹出下载，未细究）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取页面隐藏属性的前缀</span></span><br><span class="line"><span class="comment"> * 如果页面支持 hidden 属性，返回 &#x27;&#x27; 就行</span></span><br><span class="line"><span class="comment"> * 如果不支持，各个浏览器对 hidden 属性，有自己的实现，不同浏览器不同前缀，遍历看支持哪个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">getPagePropertyPrefix</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prefixes = [<span class="string">&quot;webkit&quot;</span>, <span class="string">&quot;moz&quot;</span>, <span class="string">&quot;ms&quot;</span>, <span class="string">&quot;o&quot;</span>];</span><br><span class="line">  <span class="keyword">let</span> correctPrefix;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;hidden&quot;</span> <span class="keyword">in</span> <span class="variable language_">document</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  prefixes.<span class="title function_">forEach</span>(<span class="function"><span class="params">prefix</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">`<span class="subst">$&#123;prefix&#125;</span>Hidden`</span> <span class="keyword">in</span> <span class="variable language_">document</span>) &#123;</span><br><span class="line">          correctPrefix = prefix;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> correctPrefix || <span class="literal">false</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断页面是否隐藏（进入后台）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">isPageHidden</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prefix = <span class="variable language_">this</span>.<span class="title function_">getPagePropertyPrefix</span>();</span><br><span class="line">  <span class="keyword">if</span> (prefix === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> hiddenProperty = prefix ? <span class="string">`<span class="subst">$&#123;prefix&#125;</span>Hidden`</span> : <span class="string">&quot;hidden&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">document</span>[hiddenProperty];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取判断页面 显示|隐藏 状态改变的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">getVisibilityChangeProperty</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prefix = <span class="variable language_">this</span>.<span class="title function_">getPagePropertyPrefix</span>();</span><br><span class="line">  <span class="keyword">if</span> (prefix === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>visibilitychange`</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测是否唤端成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">checkOpen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> visibilityChangeProperty = <span class="variable language_">this</span>.<span class="title function_">getVisibilityChangeProperty</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> hidden = <span class="variable language_">this</span>.<span class="title function_">isPageHidden</span>();</span><br><span class="line">      <span class="keyword">if</span> (!hidden) &#123;</span><br><span class="line">          <span class="comment">// 端口唤起失败，弹出下载，下载apk</span></span><br><span class="line">          <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isAndroid</span>) &#123;</span><br><span class="line">            <span class="comment">// 弹出下载，跳转到下载链接（app提供）</span></span><br><span class="line">             <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;http://a.app.qq.com/o/simple.jsp?pkgname=***&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">if</span> (visibilityChangeProperty) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(visibilityChangeProperty, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;pagehide&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ios中，此app用的是moblink，<a href="https://www.mob.com/wiki/detailed?wiki=MobLink_for_Web&amp;id=34">https://www.mob.com/wiki/detailed?wiki=MobLink_for_Web&amp;id=34</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MobLink</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#ytd&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">scheme</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$dialog</span>.<span class="title function_">confirm</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;下载&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ytd&quot;</span>).<span class="title function_">click</span>();</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常简单问题记录2（持续更新）</title>
      <link href="/2021/08/05/%E6%97%A5%E5%B8%B8%E7%AE%80%E5%8D%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%952/"/>
      <url>/2021/08/05/%E6%97%A5%E5%B8%B8%E7%AE%80%E5%8D%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%952/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1.特殊字体在css中怎么用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123; </span><br><span class="line">  <span class="attribute">font-family</span>: tszt; <span class="comment">/*这里是说明调用来的字体名字*/</span> </span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./tszt.ttf&#x27;</span>); <span class="comment">/*这里是字体文件路径*/</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: tszt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.禁止页面缩放，user-scalable</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0, user-scalable=no;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.img标签的object-fit</p><p>4.webpack分析打包的插件<strong>webpack-bundle-analyzer</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本配置</span></span><br><span class="line"># yarn add webpack-bundle-analyzer</span><br><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  config</span><br><span class="line">  .<span class="title function_">plugin</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>)</span><br><span class="line">  .<span class="title function_">use</span>(<span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).<span class="property">BundleAnalyzerPlugin</span>,[])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.vue中使用v-model封装组件</p><p>相当于:value&#x3D;”” @input&#x3D;””</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在子组件中如下使用</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">mypass</span>: <span class="title class_">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">model</span>: &#123; <span class="comment">// 不写model的话就是默认</span></span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&#x27;mypass&#x27;</span>, <span class="comment">// 默认是value</span></span><br><span class="line">    <span class="attr">event</span>: <span class="string">&#x27;myevent&#x27;</span> <span class="comment">// 默认是input</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;myevent&#x27;</span>, <span class="variable language_">this</span>.<span class="property">mypass</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;myevent&#x27;</span>, <span class="string">&#x27;pass1&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端audio/video相关</title>
      <link href="/2021/08/05/%E7%A7%BB%E5%8A%A8%E7%AB%AFaudiovideo%E7%9B%B8%E5%85%B3/"/>
      <url>/2021/08/05/%E7%A7%BB%E5%8A%A8%E7%AB%AFaudiovideo%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>做了一个涉及音视频的h5页面，做下问题记录</p><span id="more"></span><p>项目简介：h5页面内嵌到原生app中，可以分享（调app原生方法）到微信、朋友圈、qq、qq空间、微博，也可以用任何浏览器打开（不考虑pc）。</p><p>1.audio标签在ios上不会预加载，所以音频时长一开始获取不到，搜到一些偏门的方法（body.click一下；audio.play再马上audio.pause；）等，都不好使（可能是特殊情况能用，不建议用）。如果能后台返回时长就让后台返回一下，如果不行就让产品经理妥协吧。</p><p>2.用slider做自定义播放器，拖动进度条，更新audio当前时长，松手后进度条会弹回去导致无法拖动到指定位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 框架是vant-ui，进度条控件</span></span><br><span class="line">&lt;van-slider button-size=<span class="string">&quot;18px&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;vs&quot;</span> active-color=<span class="string">&quot;#2fb5ba&quot;</span> v-model=<span class="string">&quot;value&quot;</span> @change=<span class="string">&quot;changeProcess&quot;</span> @touchstart.<span class="property">native</span>=<span class="string">&quot;isChange=true&quot;</span> @touchend.<span class="property">native</span>=<span class="string">&quot;isChange=false&quot;</span> /&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 监听音频播放时间并更新进度条控件</span></span><br><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeupdate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  _this.<span class="title function_">updateProgress</span>(dom);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ***拖动的时候鼠标还没松开达到赋值给当前时长前，audio的timeupdata方法就再次触发了，这时再松开鼠标，slider到指定进度，由于updateProgress在执行，可能change后又赋值value，导致change方法里面赋值时这个参数e可能不是松开鼠标的位置，而是audio的timeupdate方法赋值给当前时长的进度值，所以在松开鼠标前不要在updateProgress里给进度条value赋值，所以加了个isChange做开关</span></span><br><span class="line"><span class="title function_">updateProgress</span>(<span class="params">dom</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">currentTime</span> = dom.<span class="property">currentTime</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isChange</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 更新进度的逻辑就不多写了，没出问题</span></span><br><span class="line">  <span class="keyword">var</span> value = dom.<span class="property">currentTime</span> / <span class="variable language_">this</span>.<span class="property">duration</span> || <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>, <span class="string">&#x27;value&#x27;</span>, <span class="built_in">parseInt</span>(value * <span class="number">100</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变进度</span></span><br><span class="line"><span class="title function_">changeProcess</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;audio&#x27;</span>)</span><br><span class="line">  dom.<span class="property">currentTime</span> = <span class="variable language_">this</span>.<span class="property">duration</span> * (e/<span class="number">100</span>)</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isIOS</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">n</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">play</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">play</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.自定义播放器有个需求，如果一开始未播放，直接拖动进度条，要自动播放，播放按钮变为暂停按钮。对安卓正常，对ios，由于一开始没有加载音频，在拖动进度条后的方法里触发play失败（在click中触发play就可以，可能是ios检测用户手势比较严吧），但是在play()方法中我把播放按钮变为了暂停按钮，导致视觉bug，所以加了个计数器n，播放一次后n++，大于0的时候在改变进度的时候再播放（代码在第二条的代码第23行上下）</p><p>4.video标签视频全屏播放及退出全屏问题（需求是点击视频自动全屏播放）。</p><p>ios上的video标签播放视频会自动全屏，上边也没发现下载按钮，看了几个苹果手机和ios12及以上版本效果都是一致的。</p><p>安卓则需要手动实现全屏：给单独的video标签赋视频链接并调用requestFullscreen()方法全屏（类似f11键）（看了西瓜视频的xgplayer web播放器中也是用的这个方法，心里有了底）。</p><p>但问题来了：在三星s9+和荣耀的一款机型上，全屏后点击系统返回键或屏幕返回手势都能退出全屏，留在当前页，但是oppo的手机用屏幕返回手势（还没有返回按键）就直接返回到上一页了</p><p>（猜测：各手机厂商针对安卓系统做的ui开发如miui，emui等，会对安卓交互做些调整，安卓本身返回就是返回上一页，只是三星oneui和荣耀系统加了些人性化的判断，如果有webkitfullscreenchange等会加个返回拦截）。</p><p>本来以为用户探索一下就可以了（全屏后也有退出全屏按钮），但产品经理不妥协，只能想偏方了 - 跳槽，哦不，跳转页面，返回时记录状态（keep-alive + 自行判断）。跳转到新页面全屏播video，这个video用的西瓜视频的web播放器xgplayer，全屏后点返回就返回上一页了（这个控件三星s9和荣耀也是返回上一页了，不细究了，那么多安卓手机也究不完啊，作为前端也不想在这上面浪费时间，想做更有意义的事）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 监听全屏</span></span><br><span class="line">  <span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#video&#x27;</span>)</span><br><span class="line">  dom.<span class="title function_">addEventListener</span>(<span class="string">&quot;webkitfullscreenchange&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> isFullScreen = <span class="variable language_">document</span>.<span class="property">fullScreen</span> || <span class="variable language_">document</span>.<span class="property">mozFullScreen</span> || <span class="variable language_">document</span>.<span class="property">webkitIsFullScreen</span>;</span><br><span class="line">      <span class="keyword">if</span> (isFullScreen) &#123;</span><br><span class="line">        <span class="comment">//  进入全屏</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isFullScreen</span> = <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//  退出全屏</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isFullScreen</span> = <span class="literal">false</span></span><br><span class="line">        dom.<span class="title function_">pause</span>()</span><br><span class="line">        dom.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        dom.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全屏</span></span><br><span class="line"><span class="title function_">toFullVideo</span>(<span class="params">videoDom</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(videoDom.<span class="property">requestFullscreen</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> videoDom.<span class="title function_">requestFullscreen</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(videoDom.<span class="property">webkitRequestFullScreen</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> videoDom.<span class="title function_">webkitRequestFullScreen</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(videoDom.<span class="property">mozRequestFullScreen</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> videoDom.<span class="title function_">mozRequestFullScreen</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> videoDom.<span class="title function_">msRequestFullscreen</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转后的页面执行下这个方法，在mounted里</span></span><br><span class="line"><span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> player = <span class="keyword">new</span> <span class="title class_">Player</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#vs&#x27;</span>),</span><br><span class="line">    <span class="attr">url</span>: url,</span><br><span class="line">    <span class="attr">fluid</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">rotateFullscreen</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">closeVideoTouch</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xgplayer-fullscreen&#x27;</span>)</span><br><span class="line">    dom.<span class="title function_">click</span>()</span><br><span class="line">  &#125;, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.由于video标签在不同设备不同浏览器上的样式表现不同，默认样式得不到产品经理的认可，所以统一给video上边放一层元素，作为封面图，点击封面图进行视频播放。安卓的播放在第4条中写了。下面是ios中遇到的问题。ios中原生h5的video标签不会进行preload，封面是黑屏，点击原生标签的controls中的播放按钮，按钮会有个loading效果，但如果为了样式在video上放一个封面图，那video的加载效果就没了，如果视频很大，点击封面图后会等很长时间才播放，会让用户觉得是未响应，所以要有个loading效果</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
            <tag> audio </tag>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-数据类型</title>
      <link href="/2021/07/09/js-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/07/09/js-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>js基础数据类型有基础数据类型和引用数据类型</p><span id="more"></span><h4 id="一、类型分类"><a href="#一、类型分类" class="headerlink" title="一、类型分类"></a>一、类型分类</h4><h5 id="1-基础数据类型"><a href="#1-基础数据类型" class="headerlink" title="1.基础数据类型"></a>1.基础数据类型</h5><p>数字Number</p><p>字符串String</p><p>布尔Boolean</p><p>Undefined：字面意思就是未定义的值，一般来自一个表达式最原始的状态值，不是人为操作的结果，所以不要显式的给变量赋undefined。</p><p>1.声明未定义的变量，默认值是undefined</p><p>2.函数默认返回值是undefined</p><p>3.调用函数没有传实参，打印参数为undefined</p><p>4.对象没有的属性，打印也是undefined</p><p>Null：字面意思就是空值</p><p>1.当一个要保存对象的变量还没有真正存放对象，就可以赋值为null，以区分null和undefined，可以理解为它是一个对象引用的占位符，在堆中不占空间</p><p>2.当一个数据不再使用时，用null来解除引用，垃圾回收机制会在下次运行时将其回收</p><p>Symbol：代表独一无二的值，最大用法就是用来定义对象的唯一属性名</p><p>BigInt：可以表示任意大小的整数。Number类型有范围限制，对于非常大的整数将自动四舍五入，存在精度问题，BigInt解决了此问题</p><h5 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h5><p>object</p><p>array</p><p>function</p><h4 id="二、类型转换"><a href="#二、类型转换" class="headerlink" title="二、类型转换"></a>二、类型转换</h4><p>null和undefined进行boolean类型转换后都是false</p><p>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;的区别本质上是会不会进行类型转换</p><h4 id="三、类型判断"><a href="#三、类型判断" class="headerlink" title="三、类型判断"></a>三、类型判断</h4><h5 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1.typeof"></a>1.typeof</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">1</span>); <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;str&quot;</span>); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>()); <span class="comment">// symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">12345n</span>); <span class="comment">// bigint</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;); <span class="comment">// function</span></span><br><span class="line"><span class="comment">// 不能判别</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h5 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2.instanceof"></a>2.instanceof</h5><p>原理就是顺着原型链去找，a instanceof b，能找到b.prototype，则为true，能判断引用类型，不能判断基础类型。能判断是否属于实例关系，不能判断具体是哪种类型</p><h5 id="3-Object-prototype-toString-call-，所有都能判断"><a href="#3-Object-prototype-toString-call-，所有都能判断" class="headerlink" title="3.Object.prototype.toString.call()，所有都能判断"></a>3.Object.prototype.toString.call()，所有都能判断</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">2</span>); <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>); <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>); <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Math</span>); <span class="comment">// &quot;[object Math]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]); <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;); <span class="comment">// &quot;[object Function]&quot;</span></span><br></pre></td></tr></table></figure><h5 id="4-constructor"><a href="#4-constructor" class="headerlink" title="4.constructor"></a>4.constructor</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法：</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span> == <span class="title class_">String</span></span><br></pre></td></tr></table></figure><p>注：null和undefined没有constructor，不能用此方法。函数的constructor不稳定，重写prototype后constructor就变了</p><h5 id="5-判断是不是数组"><a href="#5-判断是不是数组" class="headerlink" title="5.判断是不是数组"></a>5.判断是不是数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)</span><br></pre></td></tr></table></figure><h5 id="6-判断是不是promise，并不能严格判断是不是promise，只能退而求其次，认为是thenable对象就是promise"><a href="#6-判断是不是promise，并不能严格判断是不是promise，只能退而求其次，认为是thenable对象就是promise" class="headerlink" title="6.判断是不是promise，并不能严格判断是不是promise，只能退而求其次，认为是thenable对象就是promise"></a>6.判断是不是promise，并不能严格判断是不是promise，只能退而求其次，认为是thenable对象就是promise</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val &amp;&amp; <span class="keyword">typeof</span> val.<span class="property">then</span> == <span class="string">&#x27;function&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-Promise</title>
      <link href="/2021/07/08/js-Promise/"/>
      <url>/2021/07/08/js-Promise/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Promise</p><span id="more"></span><h4 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><p>Promise是es6提供的一个构造函数，es6+进行了完善，是一种新的异步处理方式，使用的时候需要new一个Promise对象，用来表示异步操作的结果</p><h5 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h5><p>打印一下，console.log(Promise)打印出来是native，无法看到实现代码。</p><p>通过console.dir(Promise)可以打印出来，console.dir意思是对一个对象进行检查，会打印出一些细节。如下图，在Promise构造函数中有all，allSettled，any，race，resolve，reject等方法，在原型prototype中有then，catch，finally等方法。</p><p><img src="/image/promise%E6%89%93%E5%8D%B0-7891197.jpg" alt="promise打印"></p><h4 id="二、为什么使用Promise"><a href="#二、为什么使用Promise" class="headerlink" title="二、为什么使用Promise"></a>二、为什么使用Promise</h4><h5 id="1-Promise优点"><a href="#1-Promise优点" class="headerlink" title="1.Promise优点"></a>1.Promise优点</h5><p>异步操作的代码规范</p><p>回调地狱</p><p>可以批量处理异步任务，统一处理抛出的错误</p><h5 id="2-Promise缺点"><a href="#2-Promise缺点" class="headerlink" title="2.Promise缺点"></a>2.Promise缺点</h5><p>一旦新建就会立即执行，无法中途取消</p><p>当pendding时无法知道Promise处于哪个状态，是刚刚开始还是快要结束</p><p>如果不设置回调函数，内部错误无法反应到外部</p><h4 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h4><h6 id="1-参数"><a href="#1-参数" class="headerlink" title="1.参数"></a>1.参数</h6><p>接收一个回调函数作为参数，这个回调函数会立即执行，它属于同步任务，它又接收两个回调函数作为参数，resolve和reject，这两个函数是内部实现的，成功调用resolve，将Promise状态从pendding变为fulfilled，失败调用reject，将状态从pendding变为rejected</p><p>Promise对象有三种状态，pendding，fulfilled，rejected；只有结果才能决定进入哪个状态，一旦状态改变就不会在变；只有两种可能，p到f和p到r</p><p>链式调用，then&#x2F;catch&#x2F;finally方法都会返回一个新的promise对象</p><h6 id="2-原型方法"><a href="#2-原型方法" class="headerlink" title="2.原型方法"></a>2.原型方法</h6><p>then：</p><p>resolve接收不同类型的参数表现不同，如下三种情况</p><p>接收常规类型，then回调中就能拿到常规类型；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">res</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;) <span class="comment">// 2,1</span></span><br></pre></td></tr></table></figure><p>接收promise，那外promise的状态由接收的promise的状态决定；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">res</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">res</span>(o)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>接收thenable对象，会调用thenable对象的then方法，而不执行then回调里的语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tobj = &#123;</span><br><span class="line">    <span class="attr">then</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">res</span>(tobj)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;) <span class="comment">// 只打印1</span></span><br></pre></td></tr></table></figure><p>catch：reject接收任意类型的参数，接收什么就输出什么。如果reject的参数是一个promise的话，就影响catch的捕获异常。</p><p>catch的捕获规则是是<code>由外向内</code>的（<code>就远原则</code>），在依次执行代码的时候，如果遇到异常，就直捕获停止，不会向下再去捕获。</p><p>finally: finally 方法是不接收参数的，无论是fulfilled还是rejected，finally都会执行</p><h6 id="3-类方法"><a href="#3-类方法" class="headerlink" title="3.类方法"></a>3.类方法</h6><p>Promise.resolve()，相当于new Promise((resolve, reject) &#x3D;&gt; {resolve()})</p><p>Promise.reject(), 同上</p><p>Promise.all：批量处理异步任务，接收一个promise数组，将多个Promise包裹成一个新的Promise，新的Promise的状态由包裹的Promise的状态共同决定，</p><p>只要有一个失败的就进catch，成功的那些结果也拿不到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟Promise.all</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">myall</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> datas = []</span><br><span class="line">        promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promise).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                datas.<span class="title function_">push</span>(res)</span><br><span class="line">                <span class="keyword">if</span> (index == promises.<span class="property">length</span> - <span class="number">1</span>) <span class="title function_">resolve</span>(datas)</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">reject</span>(e))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise.race：谁先执行完就输出谁的结果</p><p>Promise.allSettled：在所有promise有结果后进then，这个promise的结果一定是成功的，一定会进then</p><p>Promise.any：只要有一个成功，就会进入then，如果都失败，才会进catch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="title function_">getData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">                <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(err.<span class="title function_">toString</span>())</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">const</span> _promise = <span class="variable language_">this</span>.<span class="title function_">getData</span>(chapterMp3).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">dryFilenum</span>++</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">dryFilenumPer</span> = <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor((<span class="variable language_">this</span>.num / <span class="variable language_">this</span>.downloadList.length) * <span class="number">100</span>)&#125;</span>%`</span></span><br><span class="line">          zip.<span class="title function_">file</span>(downName, res)</span><br><span class="line">      &#125;)</span><br><span class="line">promiseList.<span class="title function_">push</span>(_promise)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promiseList)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// new JSZip()</span></span><br><span class="line">    zip.<span class="title function_">generateAsync</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件下载失败&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="四、使用场景"><a href="#四、使用场景" class="headerlink" title="四、使用场景"></a>四、使用场景</h5><p>根据其概念分析，处理异步任务时都可以使用promise包裹，通过链式调用来代替回调函数。</p><p>1.下个操作依赖上个异步操作的结果，这时候在之前就会用回调函数，现在可以用promise</p><p>2.一个页面，有多个请求，我们需求所有的请求都返回数据后再一起处理渲染，all可以统一处理抛出的错误，如上例中使用promise.all处理批量下载请求</p><p>3.大量数据在一个then 里面处理 显得臃肿，多个渲染数据分别给个then，让其各司其职</p><p>4.promise.race可以做超时提示，接收两个异步任务，一个请求，一个定时器，谁先结束用谁的结果</p><p>5.axios本身就是基于promise的一种封装，上例中jszip的generateAsync方法也是返回了一个promise</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-this</title>
      <link href="/2021/07/08/js-this/"/>
      <url>/2021/07/08/js-this/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>This</p><span id="more"></span><h4 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">v</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = obj.<span class="property">fn</span></span><br><span class="line"><span class="title function_">a</span>() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>在对象内部的方法中访问对象内部的属性，js需要通过this机制来支持，this是和执行上下文绑定的</p><p>this相当于是隐式的提供了一个对象引用，需要关注的问题就是this的指向问题。</p><p>以下都是说的非严格模式下</p><h4 id="二、this指向问题"><a href="#二、this指向问题" class="headerlink" title="二、this指向问题"></a>二、this指向问题</h4><p>1.默认是指向window对象</p><p>2.隐式绑定，谁调用就指向谁，对象调用，指向该对象；如果把对象的方法赋给一个全局变量，再调用，则指向window</p><p>3.显式绑定，call，apply，bind</p><p>4.new关键字修改指向</p><p>5.嵌套函数中的this不会从外层函数中继承</p><p>5.1.用self变量保存外层函数的this，通过作用域机制使嵌套函数内部可以使用外部的this</p><p>5.2.用箭头函数，箭头函数没有this，它里面写this要去外层作用域查找</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-模块化简单了解</title>
      <link href="/2021/07/03/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/07/03/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><span id="more"></span><h4 id="一、为什么要模块化"><a href="#一、为什么要模块化" class="headerlink" title="一、为什么要模块化"></a>一、为什么要模块化</h4><p>模块化解决的问题：</p><p>1.全局变量污染：变量重名覆盖问题</p><p>2.变量保护：使用命名空间模拟模块化时，一个模块修改另一个模块的值，另一个模块不知情</p><p>3.梳理模块间依赖关系：模块间的执行顺序和依赖关系需要梳理</p><h4 id="二、模块化历程"><a href="#二、模块化历程" class="headerlink" title="二、模块化历程"></a>二、模块化历程</h4><p><img src="/image/module-7891115.jpeg" alt="module"></p><h5 id="1-CommonJs"><a href="#1-CommonJs" class="headerlink" title="1.CommonJs"></a>1.CommonJs</h5><p>node.js内置使用的一种规范（逐渐废弃，而改用esmodule），规范就是规范，没有为什么</p><p>cjs规定每个js文件就是一个模块，<u>每个模块都有require和module变量</u></p><p>require读取和执行js文件，是在运行时同步加载执行的，所以不适用于浏览器，会阻塞页面渲染；</p><p>module有个exports属性，包括了导出的对象，require获取的就是module.exports对象</p><h5 id="2-AMD-CMD"><a href="#2-AMD-CMD" class="headerlink" title="2.AMD,CMD"></a>2.AMD,CMD</h5><p>这两种模块化规范是由社区人员提出的，对应amd由require.js（为了异步加载模块，适用于浏览器），对应cmd有sea.js（阿里的玉伯写的，为了能像cjs一样清新的写法并且像amd一样的异步加载），这是两个js库，是对两种规范的实现，提供了模块化的方案，提供了接口实现模块的导入和导出</p><h5 id="3-ESModule"><a href="#3-ESModule" class="headerlink" title="3.ESModule"></a>3.ESModule</h5><p>以上规范都是要运行时才能确定导出内容，esmodule是编译时确定依赖关系</p><p>esmodule是语言标准层面的一种规范，amd、cmd是社区提出的一种规范</p><p><u>核心：export，export default， import</u></p><p>谷歌浏览器61版本后支持此语法</p><p>浏览器加载es6模块，需要在script上加上type&#x3D;”module”，就会异步加载，并且等解析html完成才会按引入顺序执行脚本，类似加了defer。使用type&#x3D;”module”的同时也可以使用async，使用async后会异步加载脚本，加载完就立即执行，多个脚本的话就是按加载完成的顺序而不是引入的顺序执行</p><p><img src="/image/deferasync-7891128.jpeg" alt="deferasync"></p><h4 id="三、esmodule和cjs的区别"><a href="#三、esmodule和cjs的区别" class="headerlink" title="三、esmodule和cjs的区别"></a>三、esmodule和cjs的区别</h4><p>1.cjs导出的是一个值的拷贝，再修改模块内外互相不影响；esmodule导出的是值的引用</p><p>2.cjs是运行时加载，因为加载的是一个对象，所以执行完脚本才生成对象；esmodule是编译时输出接口，代码静态解析阶段生成</p><p>3.cjs的require()是同步加载，esmodule的import是异步加载</p><p>4.cjs会在第一次加载后缓存模块，esmodule不会，当js引擎对脚本静态分析时，读到import命令，生成一个只读引用，当执行时再去模块中取值，动态引用，不会缓存值。</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将日期展示为农历的方法</title>
      <link href="/2021/06/20/%E5%86%9C%E5%8E%86/"/>
      <url>/2021/06/20/%E5%86%9C%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>将日期展示为农历：辛丑(牛)年 五月十三</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//农历</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">CalendarData</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">let</span> madd = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">let</span> tgString = <span class="string">&quot;甲乙丙丁戊己庚辛壬癸&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> dzString = <span class="string">&quot;子丑寅卯辰巳午未申酉戌亥&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> numString = <span class="string">&quot;一二三四五六七八九十&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> monString = <span class="string">&quot;正二三四五六七八九十冬腊&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> weekString = <span class="string">&quot;日一二三四五六&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> sx = <span class="string">&quot;鼠牛虎兔龙蛇马羊猴鸡狗猪&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> cYear, cMonth, cDay, <span class="title class_">TheDate</span>;</span><br><span class="line"><span class="title class_">CalendarData</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(</span><br><span class="line">  <span class="number">0xa4b</span>,</span><br><span class="line">  <span class="number">0x5164b</span>,</span><br><span class="line">  <span class="number">0x6a5</span>,</span><br><span class="line">  <span class="number">0x6d4</span>,</span><br><span class="line">  <span class="number">0x415b5</span>,</span><br><span class="line">  <span class="number">0x2b6</span>,</span><br><span class="line">  <span class="number">0x957</span>,</span><br><span class="line">  <span class="number">0x2092f</span>,</span><br><span class="line">  <span class="number">0x497</span>,</span><br><span class="line">  <span class="number">0x60c96</span>,</span><br><span class="line">  <span class="number">0xd4a</span>,</span><br><span class="line">  <span class="number">0xea5</span>,</span><br><span class="line">  <span class="number">0x50da9</span>,</span><br><span class="line">  <span class="number">0x5ad</span>,</span><br><span class="line">  <span class="number">0x2b6</span>,</span><br><span class="line">  <span class="number">0x3126e</span>,</span><br><span class="line">  <span class="number">0x92e</span>,</span><br><span class="line">  <span class="number">0x7192d</span>,</span><br><span class="line">  <span class="number">0xc95</span>,</span><br><span class="line">  <span class="number">0xd4a</span>,</span><br><span class="line">  <span class="number">0x61b4a</span>,</span><br><span class="line">  <span class="number">0xb55</span>,</span><br><span class="line">  <span class="number">0x56a</span>,</span><br><span class="line">  <span class="number">0x4155b</span>,</span><br><span class="line">  <span class="number">0x25d</span>,</span><br><span class="line">  <span class="number">0x92d</span>,</span><br><span class="line">  <span class="number">0x2192b</span>,</span><br><span class="line">  <span class="number">0xa95</span>,</span><br><span class="line">  <span class="number">0x71695</span>,</span><br><span class="line">  <span class="number">0x6ca</span>,</span><br><span class="line">  <span class="number">0xb55</span>,</span><br><span class="line">  <span class="number">0x50ab5</span>,</span><br><span class="line">  <span class="number">0x4da</span>,</span><br><span class="line">  <span class="number">0xa5b</span>,</span><br><span class="line">  <span class="number">0x30a57</span>,</span><br><span class="line">  <span class="number">0x52b</span>,</span><br><span class="line">  <span class="number">0x8152a</span>,</span><br><span class="line">  <span class="number">0xe95</span>,</span><br><span class="line">  <span class="number">0x6aa</span>,</span><br><span class="line">  <span class="number">0x615aa</span>,</span><br><span class="line">  <span class="number">0xab5</span>,</span><br><span class="line">  <span class="number">0x4b6</span>,</span><br><span class="line">  <span class="number">0x414ae</span>,</span><br><span class="line">  <span class="number">0xa57</span>,</span><br><span class="line">  <span class="number">0x526</span>,</span><br><span class="line">  <span class="number">0x31d26</span>,</span><br><span class="line">  <span class="number">0xd95</span>,</span><br><span class="line">  <span class="number">0x70b55</span>,</span><br><span class="line">  <span class="number">0x56a</span>,</span><br><span class="line">  <span class="number">0x96d</span>,</span><br><span class="line">  <span class="number">0x5095d</span>,</span><br><span class="line">  <span class="number">0x4ad</span>,</span><br><span class="line">  <span class="number">0xa4d</span>,</span><br><span class="line">  <span class="number">0x41a4d</span>,</span><br><span class="line">  <span class="number">0xd25</span>,</span><br><span class="line">  <span class="number">0x81aa5</span>,</span><br><span class="line">  <span class="number">0xb54</span>,</span><br><span class="line">  <span class="number">0xb6a</span>,</span><br><span class="line">  <span class="number">0x612da</span>,</span><br><span class="line">  <span class="number">0x95b</span>,</span><br><span class="line">  <span class="number">0x49b</span>,</span><br><span class="line">  <span class="number">0x41497</span>,</span><br><span class="line">  <span class="number">0xa4b</span>,</span><br><span class="line">  <span class="number">0xa164b</span>,</span><br><span class="line">  <span class="number">0x6a5</span>,</span><br><span class="line">  <span class="number">0x6d4</span>,</span><br><span class="line">  <span class="number">0x615b4</span>,</span><br><span class="line">  <span class="number">0xab6</span>,</span><br><span class="line">  <span class="number">0x957</span>,</span><br><span class="line">  <span class="number">0x5092f</span>,</span><br><span class="line">  <span class="number">0x497</span>,</span><br><span class="line">  <span class="number">0x64b</span>,</span><br><span class="line">  <span class="number">0x30d4a</span>,</span><br><span class="line">  <span class="number">0xea5</span>,</span><br><span class="line">  <span class="number">0x80d65</span>,</span><br><span class="line">  <span class="number">0x5ac</span>,</span><br><span class="line">  <span class="number">0xab6</span>,</span><br><span class="line">  <span class="number">0x5126d</span>,</span><br><span class="line">  <span class="number">0x92e</span>,</span><br><span class="line">  <span class="number">0xc96</span>,</span><br><span class="line">  <span class="number">0x41a95</span>,</span><br><span class="line">  <span class="number">0xd4a</span>,</span><br><span class="line">  <span class="number">0xda5</span>,</span><br><span class="line">  <span class="number">0x20b55</span>,</span><br><span class="line">  <span class="number">0x56a</span>,</span><br><span class="line">  <span class="number">0x7155b</span>,</span><br><span class="line">  <span class="number">0x25d</span>,</span><br><span class="line">  <span class="number">0x92d</span>,</span><br><span class="line">  <span class="number">0x5192b</span>,</span><br><span class="line">  <span class="number">0xa95</span>,</span><br><span class="line">  <span class="number">0xb4a</span>,</span><br><span class="line">  <span class="number">0x416aa</span>,</span><br><span class="line">  <span class="number">0xad5</span>,</span><br><span class="line">  <span class="number">0x90ab5</span>,</span><br><span class="line">  <span class="number">0x4ba</span>,</span><br><span class="line">  <span class="number">0xa5b</span>,</span><br><span class="line">  <span class="number">0x60a57</span>,</span><br><span class="line">  <span class="number">0x52b</span>,</span><br><span class="line">  <span class="number">0xa93</span>,</span><br><span class="line">  <span class="number">0x40e95</span></span><br><span class="line">);</span><br><span class="line">madd[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">madd[<span class="number">1</span>] = <span class="number">31</span>;</span><br><span class="line">madd[<span class="number">2</span>] = <span class="number">59</span>;</span><br><span class="line">madd[<span class="number">3</span>] = <span class="number">90</span>;</span><br><span class="line">madd[<span class="number">4</span>] = <span class="number">120</span>;</span><br><span class="line">madd[<span class="number">5</span>] = <span class="number">151</span>;</span><br><span class="line">madd[<span class="number">6</span>] = <span class="number">181</span>;</span><br><span class="line">madd[<span class="number">7</span>] = <span class="number">212</span>;</span><br><span class="line">madd[<span class="number">8</span>] = <span class="number">243</span>;</span><br><span class="line">madd[<span class="number">9</span>] = <span class="number">273</span>;</span><br><span class="line">madd[<span class="number">10</span>] = <span class="number">304</span>;</span><br><span class="line">madd[<span class="number">11</span>] = <span class="number">334</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GetBit</span> = (<span class="params">m, n</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (m &gt;&gt; n) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">e2c</span> = (<span class="params"><span class="variable language_">arguments</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="title class_">TheDate</span> =</span><br><span class="line">    <span class="variable language_">arguments</span>.<span class="property">length</span> != <span class="number">3</span></span><br><span class="line">      ? <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">      : <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>], <span class="variable language_">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">var</span> total, m, n, k;</span><br><span class="line">  <span class="keyword">var</span> isEnd = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="title class_">TheDate</span>.<span class="title function_">getYear</span>();</span><br><span class="line">  <span class="keyword">if</span> (tmp &lt; <span class="number">1900</span>) &#123;</span><br><span class="line">    tmp += <span class="number">1900</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  total =</span><br><span class="line">    (tmp - <span class="number">1921</span>) * <span class="number">365</span> +</span><br><span class="line">    <span class="title class_">Math</span>.<span class="title function_">floor</span>((tmp - <span class="number">1921</span>) / <span class="number">4</span>) +</span><br><span class="line">    madd[<span class="title class_">TheDate</span>.<span class="title function_">getMonth</span>()] +</span><br><span class="line">    <span class="title class_">TheDate</span>.<span class="title function_">getDate</span>() -</span><br><span class="line">    <span class="number">38</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">TheDate</span>.<span class="title function_">getYear</span>() % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; <span class="title class_">TheDate</span>.<span class="title function_">getMonth</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    total++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (m = <span class="number">0</span>; ; m++) &#123;</span><br><span class="line">    k = <span class="title class_">CalendarData</span>[m] &lt; <span class="number">0xfff</span> ? <span class="number">11</span> : <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">for</span> (n = k; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (total &lt;= <span class="number">29</span> + <span class="title class_">GetBit</span>(<span class="title class_">CalendarData</span>[m], n)) &#123;</span><br><span class="line">        isEnd = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      total = total - <span class="number">29</span> - <span class="title class_">GetBit</span>(<span class="title class_">CalendarData</span>[m], n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isEnd) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  cYear = <span class="number">1921</span> + m;</span><br><span class="line">  cMonth = k - n + <span class="number">1</span>;</span><br><span class="line">  cDay = total;</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="number">12</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cMonth == <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">CalendarData</span>[m] / <span class="number">0x10000</span>) + <span class="number">1</span>) &#123;</span><br><span class="line">      cMonth = <span class="number">1</span> - cMonth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cMonth &gt; <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">CalendarData</span>[m] / <span class="number">0x10000</span>) + <span class="number">1</span>) &#123;</span><br><span class="line">      cMonth--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GetcDateString</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  tmp += tgString.<span class="title function_">charAt</span>((cYear - <span class="number">4</span>) % <span class="number">10</span>);</span><br><span class="line">  tmp += dzString.<span class="title function_">charAt</span>((cYear - <span class="number">4</span>) % <span class="number">12</span>);</span><br><span class="line">  tmp += <span class="string">&quot;(&quot;</span>;</span><br><span class="line">  tmp += sx.<span class="title function_">charAt</span>((cYear - <span class="number">4</span>) % <span class="number">12</span>);</span><br><span class="line">  tmp += <span class="string">&quot;)年 &quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (cMonth &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    tmp += <span class="string">&quot;(闰)&quot;</span>;</span><br><span class="line">    tmp += monString.<span class="title function_">charAt</span>(-cMonth - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    tmp += monString.<span class="title function_">charAt</span>(cMonth - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  tmp += <span class="string">&quot;月&quot;</span>;</span><br><span class="line">  tmp += cDay &lt; <span class="number">11</span> ? <span class="string">&quot;初&quot;</span> : cDay &lt; <span class="number">20</span> ? <span class="string">&quot;十&quot;</span> : cDay &lt; <span class="number">30</span> ? <span class="string">&quot;廿&quot;</span> : <span class="string">&quot;三十&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (cDay % <span class="number">10</span> != <span class="number">0</span> || cDay == <span class="number">10</span>) &#123;</span><br><span class="line">    tmp += numString.<span class="title function_">charAt</span>((cDay - <span class="number">1</span>) % <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">GetLunarDay</span> = (<span class="params">solarYear, solarMonth, solarDay</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//solarYear = solarYear&lt;1900?(1900+solarYear):solarYear;</span></span><br><span class="line">  <span class="keyword">if</span> (solarYear &lt; <span class="number">1921</span> || solarYear &gt; <span class="number">2120</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    solarMonth = <span class="built_in">parseInt</span>(solarMonth) &gt; <span class="number">0</span> ? solarMonth - <span class="number">1</span> : <span class="number">11</span>;</span><br><span class="line">    <span class="title function_">e2c</span>(solarYear, solarMonth, solarDay);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">GetcDateString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> yy = date.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">var</span> mm = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dd = date.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">if</span> (yy &lt; <span class="number">100</span>) yy = <span class="string">&quot;19&quot;</span> + yy;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">GetLunarDay</span>(yy, mm, dd))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器5-浏览器安全简单了解</title>
      <link href="/2021/06/16/%E6%B5%8F%E8%A7%88%E5%99%A85-%E5%AE%89%E5%85%A8%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/06/16/%E6%B5%8F%E8%A7%88%E5%99%A85-%E5%AE%89%E5%85%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><span id="more"></span><h4 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h4><p>同源策略：url协议、域名、端口相同，就是同源。默认两个不同的源之间不能操作dom和访问资源</p><p>1.dom层面，不能互相访问，postmessage跨文档消息机制</p><p>2.数据层面，cookie，localstorage不能互相读取，</p><p>3.网络层面，不能跨域请求，跨域资源共享策略</p><h4 id="二、安全问题"><a href="#二、安全问题" class="headerlink" title="二、安全问题"></a>二、安全问题</h4><h5 id="1-xss攻击，恶意脚本攻击"><a href="#1-xss攻击，恶意脚本攻击" class="headerlink" title="1. xss攻击，恶意脚本攻击"></a>1. xss攻击，恶意脚本攻击</h5><h6 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h6><p>1.存储型，在提交表单时把脚本提交，服务端保存在数据库，当返回给前端再使用时就会执行脚本</p><p>2.反射型，提交表单，服务端不保存，处理后即返回。提交脚本也就会返回脚本</p><p>3.页面劫持，本地抓包等方式，不经过服务端直接控制页面</p><h6 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h6><p>1.服务端对脚本过滤</p><p>2.csp策略：资源黑白名单，禁止加载哪些脚本，禁止向第三方域提交数据</p><p>3.设置cookie时加上httponly，则cookie无法通过脚本document.cookie读取</p><h5 id="2-csrf攻击，跨站请求伪造"><a href="#2-csrf攻击，跨站请求伪造" class="headerlink" title="2. csrf攻击，跨站请求伪造"></a>2. csrf攻击，跨站请求伪造</h5><h6 id="类型-1"><a href="#类型-1" class="headerlink" title="类型"></a>类型</h6><p>1.img标签的src是一个请求，而不是图片资源。</p><p>2.点一个链接，自动发起请求</p><h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><p>1.设置cookie的samesite属性值是strict，在第三方域下请求本域时就不会带上有这个属性值的cookie，可以防止第三方域提交</p><p>2.服务器通过referer、origin判断请求来源</p><p>3.csrf token，通过前后端约定的特殊token，不存放在cookie中来判断是否安全</p><h5 id="三、其他（未深入）"><a href="#三、其他（未深入）" class="headerlink" title="三、其他（未深入）"></a>三、其他（未深入）</h5><p>1.浏览器多进程结构，把渲染进程放到安全沙箱</p><p>2.https在tcp连接前引入安全层（让黑客在你电脑上安装了根证书，https也会变得不安全了！）</p>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>export2Excel的使用</title>
      <link href="/2021/06/08/export2Excel/"/>
      <url>/2021/06/08/export2Excel/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>js导出excel，（数据不分页的情况下，即前端能拿到全部数据才能导出全部数据），原文链接<a href="https://blog.csdn.net/weixin_46705618/article/details/107377103">https://blog.csdn.net/weixin_46705618/article/details/107377103</a></p><span id="more"></span><p>1.安装依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm  install  -S file-saver</span><br><span class="line">npm  install  -S  xlsx</span><br><span class="line">npm  install  -D script-loader</span><br></pre></td></tr></table></figure><p>2.把两个js文件放到项目里 Blob.js、Export2Excel.js</p><p>地址（私有库）：<a href="https://gitee.com/lishichang/common/tree/master/Export2Excel">https://gitee.com/lishichang/common/tree/master/Export2Excel</a></p><p>3.main.js中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Blob from &#x27;./Excel/Blob.js&#x27;</span><br><span class="line">import Export2Excel from &#x27;./Excel/Export2Excel.js&#x27;</span><br></pre></td></tr></table></figure><p>4.vue组件（element-ui的按钮）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- v-bind=&quot;excelData&quot; // 父组件传给此组件的数据</span><br><span class="line">  excelData: &#123;</span><br><span class="line">    title: &quot;&quot;, // 标题</span><br><span class="line">    filterField: [], // 字段[&#x27;name&#x27;,&#x27;age&#x27;]</span><br><span class="line">    tHeader: [], // 表头[&#x27;姓名&#x27;,&#x27;年龄&#x27;]</span><br><span class="line">    list: [] // 数据[&#123;name:&#x27;1&#x27;,age:18&#125;,&#123;name:&#x27;2&#x27;,age:19&#125;]</span><br><span class="line">  &#125; --&gt;</span><br><span class="line">    &lt;el-button class=&quot;public-btn&quot; @click=&quot;export2Excel&quot;&gt;&#123;&#123;btnText&#125;&#125;&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ExportExcel&#x27;,</span><br><span class="line">  props:&#123;</span><br><span class="line">      title:&#123;</span><br><span class="line">          type:String,</span><br><span class="line">          default:&#x27;&#x27;    // 文件名称</span><br><span class="line">      &#125;,</span><br><span class="line">      filterField:&#123;</span><br><span class="line">          type:Array,</span><br><span class="line">          default:()=&gt;[]      //  字段  [name,age]</span><br><span class="line">      &#125;,</span><br><span class="line">      tHeader:&#123;</span><br><span class="line">          type:Array,</span><br><span class="line">          default:()=&gt;[]      // 表格顶部名称    [名称,性别]</span><br><span class="line">      &#125;,</span><br><span class="line">      list:&#123;</span><br><span class="line">          type:Array,</span><br><span class="line">          default:()=&gt;[]      // 数据 [&#123;name:&#x27;张三&#x27;,age:16&#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      btnText:&#123;</span><br><span class="line">          type:String,</span><br><span class="line">          default:&#x27;导出Excel&#x27;   // 按钮名称 默认为导出excel</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">      listData()&#123;</span><br><span class="line">          return (this.btnText).indexOf(&#x27;导出&#x27;)&gt;-1?this.list:[];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      formatJson(filterField, jsonData) &#123;</span><br><span class="line">          return jsonData.map(function(dataObj) &#123;</span><br><span class="line">              return filterField.map(function(field) &#123;</span><br><span class="line">                  let fieldObj = dataObj[field];</span><br><span class="line">                  if (!fieldObj) &#123;</span><br><span class="line">                      fieldObj = &quot;-&quot;;</span><br><span class="line">                  &#125;</span><br><span class="line">                  return fieldObj;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      export2Excel() &#123;</span><br><span class="line">          require.ensure([], () =&gt; &#123;</span><br><span class="line">              let &#123; export_json_to_excel &#125; = require(&quot;@/Excel/Export2Excel&quot;);</span><br><span class="line">              let data = this.formatJson(this.filterField, this.listData);</span><br><span class="line">              let title = this.btnText==&#x27;导出excel&#x27;?this.title:this.title+&#x27;&#x27;;</span><br><span class="line">              export_json_to_excel(this.tHeader, data, title);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.使用组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;export-excel v-bind=&quot;excelData&quot;&gt;&lt;/export-excel&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-margin</title>
      <link href="/2021/06/07/css-margin/"/>
      <url>/2021/06/07/css-margin/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>父子级同时用margin-top时，不会叠加，按较大的值</p><span id="more"></span><p>早就知道有这么个事，但没记的很清楚，遇到必需要查一下，很耽误时间，现在记录一下。</p><p>行内标签的上下的内外边距无效，左右有效</p><p>两个同级块标签，上方的块标签的margin-bottom，和下方的块标签的marign-top会重叠</p><p>两个同级行块标签，上方的块标签的margin-bottom，和下方的块标签的marign-top不会重叠</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui的table的current-change和row-click的顺序</title>
      <link href="/2021/06/07/element-ui%E7%9A%84table%E7%9A%84current-change%E5%92%8Crow-click/"/>
      <url>/2021/06/07/element-ui%E7%9A%84table%E7%9A%84current-change%E5%92%8Crow-click/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>父子级同时用margin-top时，不会叠加，按较大的值</p><span id="more"></span><p>先执行current-change的回调，再执行row-click的回调</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-深拷贝</title>
      <link href="/2021/05/07/js-%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2021/05/07/js-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><span id="more"></span><h4 id="一-为什么需要深拷贝"><a href="#一-为什么需要深拷贝" class="headerlink" title="一.为什么需要深拷贝"></a>一.为什么需要深拷贝</h4><p>js中数据类型分基本数据类型和引用数据类型，基本数据类型存放在栈内存，引用数据类型存放在堆内存，在栈内存中只存放一个指针，指向堆内存中的引用。浅拷贝只是拷贝了指针，修改数据会影响源数据。如果不想改变源数据就需要深拷贝。</p><h4 id="二-深拷贝方法"><a href="#二-深拷贝方法" class="headerlink" title="二.深拷贝方法"></a>二.深拷贝方法</h4><h5 id="1-JSON-parse-JSON-stringify"><a href="#1-JSON-parse-JSON-stringify" class="headerlink" title="1.JSON.parse, JSON.stringify"></a>1.JSON.parse, JSON.stringify</h5><p>这种方法无法拷贝值为undefined、function、regexp类型的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1))</span><br></pre></td></tr></table></figure><h5 id="2-Object-assign"><a href="#2-Object-assign" class="headerlink" title="2.Object.assign()"></a>2.Object.assign()</h5><p>这种方法只能对只有一个层级的对象（所有属性的值都是基础数据类型）深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1, obj2, obj3)</span><br></pre></td></tr></table></figure><h5 id="3-递归"><a href="#3-递归" class="headerlink" title="3.递归"></a>3.递归</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj != <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(key)) result[key] = <span class="title function_">dp</span>(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-防抖节流</title>
      <link href="/2021/05/07/js-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
      <url>/2021/05/07/js-%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><span id="more"></span><h4 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1.防抖"></a>1.防抖</h4><p>操作停止后间隔一定时间执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">method,delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 事件默认参数可通过arguments使用</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            method.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带immediate的，immediate为true相当于封装了一个隐藏的loading</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d</span>(<span class="params">fn, wait, immediate</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        <span class="keyword">if</span>(immediate) &#123;</span><br><span class="line">            <span class="keyword">let</span> callNow = !timer</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span>(callNow) fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">d</span>(fn, <span class="number">2000</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h4 id="2-节流"><a href="#2-节流" class="headerlink" title="2.节流"></a>2.节流</h4><p>持续触发但不会执行和触发次数一样的次数，每间隔一定时间执行一次，减少了执行的频率</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">method,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">method</span>()</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                timer = <span class="literal">null</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">t</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">        <span class="keyword">if</span>(now - time &gt;= wait) &#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">            time = now</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v) <span class="comment">// 能取到事件及参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">t</span>(fn, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-配置</title>
      <link href="/2021/04/20/git-%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/04/20/git-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Git，<a href="https://developer.aliyun.com/article/716483">https://developer.aliyun.com/article/716483</a></p><span id="more"></span><h5 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;&quot;</span><br><span class="line">// 配置用户名和邮箱其实是在全局的gitconfig目录下添加了以下内容（~/.gitconfig）</span><br><span class="line">[user]</span><br><span class="line">        name = abc</span><br><span class="line">        email = abc@abc.com</span><br></pre></td></tr></table></figure><h5 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;&quot;</span><br></pre></td></tr></table></figure><h5 id="每次进行git操作都会让输入账号密码，可以用下面的命令长期存储一下账号密码"><a href="#每次进行git操作都会让输入账号密码，可以用下面的命令长期存储一下账号密码" class="headerlink" title="每次进行git操作都会让输入账号密码，可以用下面的命令长期存储一下账号密码"></a>每次进行git操作都会让输入账号密码，可以用下面的命令长期存储一下账号密码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 输入一次密码后，git会记住账号密码。</span><br><span class="line">git config --global credential.helper store</span><br><span class="line">// 这个命令其实是在主目录的gitconfig目录下添加了以下内容（~/.git/config）</span><br><span class="line">[credential]</span><br><span class="line">helper = store</span><br></pre></td></tr></table></figure><p>git怎么知道是哪个平台的配置呢，拉取哪个平台的代码就会判断是否有邮箱和密码，是否是这个平台的，再判断是否有权限？</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常简单问题记录（持续更新）</title>
      <link href="/2021/04/14/%E6%97%A5%E5%B8%B8%E7%AE%80%E5%8D%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/04/14/%E6%97%A5%E5%B8%B8%E7%AE%80%E5%8D%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>一种经验记录，以提升效率，可能不会深入了解（如果深入了解了就会在此文档中删掉对应内容，而去新写一篇详细文档），长期更新，经常看看</p><span id="more"></span><p>1.此处的tagName是大写的标签名，如LI, DIV。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clickFunc</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e = e || event <span class="comment">// 这里不主动传参数的话其实并没有参数，event是在事件函数中就存在的</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.一个拼音字典，js获取汉字拼音<a href="https://blog.csdn.net/m0_51479322/article/details/113073493">https://blog.csdn.net/m0_51479322/article/details/113073493</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// npm地址</span><br><span class="line">https://www.npmjs.com/package/pinyin-pro</span><br><span class="line">// github</span><br><span class="line">https://github.com/zh-lx/pinyin-pro</span><br><span class="line">// 安装</span><br><span class="line">yarn add pinyin-pro</span><br><span class="line">// 使用</span><br><span class="line">import &#123; pinyin &#125; from &#x27;pinyin-pro&#x27;;</span><br><span class="line"></span><br><span class="line">// 获取声调转换为数字后缀的拼音</span><br><span class="line">pinyin(&#x27;汉语拼音&#x27;, &#123; toneType: &#x27;num&#x27;, type: &#x27;array&#x27; &#125;); // [&quot;han4&quot;, &quot;yu3&quot;, &quot;pin1&quot;, &quot;yin1&quot;]</span><br></pre></td></tr></table></figure><p>3.路由导航守卫对子组件（设置了路由的组件中的子组件）无效</p><p>4.attribute：setAttribute(‘value’,’1’)改的属性，可以说是dom元素的属性，</p><p>​    Property： input.value &#x3D; ‘2’，改的属性是dom节点对象的属性，这个dom对象的value属性就是展示的输入框的值</p><p><a href="https://blog.csdn.net/u013362969/article/details/88410381?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.base">https://blog.csdn.net/u013362969/article/details/88410381?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.base</a></p><p>5.background-image的url中最好加引号</p><p>6.data中的变量直接用data中的变量判断的问题，不知道原因，不要这么做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a=1, b=3</span></span><br><span class="line"><span class="comment">// 另外，b:this.a，这个b是打印不出来的，也不报错</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="variable language_">this</span>.<span class="property">a</span>&gt;<span class="number">0</span>?<span class="number">2</span>:<span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>7.循环执行a标签的下载，只下载最后一个文件的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建a标签并点击触发下载的方法</span></span><br><span class="line">    <span class="title function_">download</span>(url, filename)</span><br><span class="line">    <span class="comment">// 查到的有效方法：经测试在每个下载之间间隔500ms时，a标签触发的下载不会清除上一次的下载动作（但没有明确的文档标明过）</span></span><br><span class="line">  &#125;, <span class="number">500</span>*index);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2021年8月9号更新：近期有个批量下载音频的需求（50条音频），自测时使用文件大小为300k，此方法没有问题。线上的音频是16m甚至更大，发现最终只会下载10条左右（一般都少于10条）。复现后发现浏览器会同时执行6个下载任务，一个结束后会新增一个任务，新增几次后就会不再新增 - 下载任务丢失。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a标签默认的target是_self，所有的下载都在同一个标签下，不会出现弹出一堆空白标签，体验更好，但是文件大了之后其中一个下载任务等待时会导致有些下载任务被清除（机制不清楚）。</span></span><br><span class="line"><span class="comment">// 而target为_blank时，弹出空白标签来排队保证下载任务不会丢失，只是体验不好。</span></span><br><span class="line"><span class="comment">// iframe隐藏下载，如下修改后代码，能够不弹空白标签下载不丢失文件，有个缺点就是无法监听到下载完成而清除iframe，只能在某个操作点去清除一下iframe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">url, filename</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    a.<span class="property">href</span> = url</span><br><span class="line">    a.<span class="property">download</span> = filename || <span class="literal">true</span></span><br><span class="line">    a.<span class="title function_">click</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">url, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> elIf = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line">  elIf.<span class="property">src</span> = url;</span><br><span class="line">  elIf.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(elIf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清除iframe</span></span><br><span class="line"><span class="title function_">beforeRouteLeve</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.过滤器到处变化：页面数据变化重新渲染会重新触发过滤器</p><p>9.vscode 的live server扩展</p><p>10.字符串中换行符 &#x2F;n  在vue的template中是否奏效。给父级加white-space:pre-wrap;规定段落中的文本换行</p><ol start="11"><li></li></ol><h5 id="vue模板中的多个-amp-nbsp-最后却只有一个空格显示出来"><a href="#vue模板中的多个-amp-nbsp-最后却只有一个空格显示出来" class="headerlink" title="vue模板中的多个 &amp;nbsp 最后却只有一个空格显示出来"></a>vue模板中的多个 &amp;nbsp 最后却只有一个空格显示出来</h5><p>​ vue 在 compile 的过程中会将这些 &amp;nbsp; 转换成一个空格(‘ ‘)。</p><h5 id="v-html-指令里面的多个-amp-nbsp-最后全部空格都可以显示出来"><a href="#v-html-指令里面的多个-amp-nbsp-最后全部空格都可以显示出来" class="headerlink" title="v-html 指令里面的多个 &amp;nbsp 最后全部空格都可以显示出来"></a>v-html 指令里面的多个 &amp;nbsp 最后全部空格都可以显示出来</h5><p>​ vue在compile过程中不做处理，运行时使用 dom.innerHTML &#x3D; ‘xxx’ 的方式来插入到节点中</p><ol start="12"><li><p>img标签的底部空隙解决：最简单的办法就是display:block; 具体分析见另一篇文章</p></li><li><p>对sessionStorage来说，一个标签就是一个会话，与域名无关；不同标签中的sessionStorage互不影响。</p></li><li><p>sass中的&#x2F;deep&#x2F;，给一个父级加了&#x2F;deep&#x2F;后，他内部的元素都无需也不能再加&#x2F;deep&#x2F;。</p></li><li><p>回车键提交input框内的数据，会多提交一个换行符\n，想把\n去掉就在keydown的时候阻止默认事件，keyup的时候再提交</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="variable language_">this</span>.<span class="property">enterClick</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="variable language_">this</span>.<span class="property">enterClick0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="variable language_">this</span>.<span class="property">enterClick</span>)</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="variable language_">this</span>.<span class="property">enterClick0</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// methods</span></span><br><span class="line"><span class="title function_">enterClick0</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(event.<span class="property">keyCode</span> === <span class="number">13</span>) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">enterClick</span>(<span class="params">event</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用a标签下载文件时自定义文件名，给标签加download属性即可下载（若下载地址与网站地址不同源，对于txt，pdf文件会新开浏览器标签打开文件。），download&#x3D;”自定义下载文件名”（同样只对同源的时候生效，在本地调试的时候发现不管用不要慌，更到线上就好了）</p></li><li><p>(blocked:mixed-content)</p><p>是浏览器不允许在https页面里嵌入http的请求<br>最简单的办法就是升级成https请求<br>也可以</p><p>页面的head中加入（未尝试过）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;upgrade-insecure-requests&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>意思是自动将http的不安全请求升级为https</p></li><li><p>element.classList.includes()不是一个方法。</p><p>Element.classList返回的是一个DOMTokenList对象，它是一个类数组对象。includes是Array而不是DOMTokenList的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.用es6的方法强制转为数组</span></span><br><span class="line">[...element.<span class="property">classList</span>].<span class="title function_">includes</span>()</span><br><span class="line"><span class="comment">// 2.用DOMTokenList.contains方法</span></span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">contains</span>()</span><br></pre></td></tr></table></figure></li><li><p>await的异步失败后，会抛出 Uncaught (in promise) err 错误，并且不会执行await这一行下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">a</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// Uncaught (in promise) err</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">c</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">a</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">c</span>()</span><br></pre></td></tr></table></figure><p>用try catch捕获await异步的错误后，则会继续执行下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">c</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">a</span>()</span><br><span class="line">  &#125;<span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">c</span>()</span><br></pre></td></tr></table></figure><p>用try catch捕获await异步的错误后，在catch中return，则不会执行await这一行下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">c</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">a</span>()</span><br><span class="line">  &#125;<span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">c</span>()</span><br></pre></td></tr></table></figure></li><li><p>this.$router.push(“&#x2F;home”)报错跳转不了的时候，考虑下this.$router.push(“&#x2F;home”).catch(()&#x3D;&gt;{})捕获一下错误，让路由跳转继续</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught (in promise) Error: Redirected when going from “/login“ to “/home“ via a nvigation guard</span><br></pre></td></tr></table></figure><p>转载</p><h5 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h5><p>vue-router路由版本更新产生的问题，导致路由跳转失败抛出该错误，但并不影响程序功能</p><h5 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1:"></a>解决方法1:</h5><p>使用编程式导航跳转时，每次使用，后面都跟上.catch方法，捕获错误信息</p><p>this.$router.push(‘&#x2F;location’).catch(err &#x3D;&gt; ())</p><h5 id="解决方法2（没试过，仅做记录）"><a href="#解决方法2（没试过，仅做记录）" class="headerlink" title="解决方法2（没试过，仅做记录）:"></a>解决方法2（没试过，仅做记录）:</h5><p>全局解决，替换路由的Push和replace方法，放在src&#x2F;router&#x2F;index.js中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> originalPush = <span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">location, onResolve, onReject</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (onResolve || onReject) <span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, onResolve, onReject)</span><br><span class="line"><span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="重复点击当前路由出现报错解决（没试过，仅做记录）"><a href="#重复点击当前路由出现报错解决（没试过，仅做记录）" class="headerlink" title="*重复点击当前路由出现报错解决（没试过，仅做记录）"></a>*重复点击当前路由出现报错解决（没试过，仅做记录）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把这段代码直接粘贴到router/index.js中的Vue.use(VueRouter)之前</span></span><br><span class="line"><span class="keyword">const</span> originalPush = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>;</span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">location</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git-提交报错husky &gt; pre-commit</title>
      <link href="/2020/12/21/git-%E6%8F%90%E4%BA%A4%E6%8A%A5%E9%94%99husky%20%3E%20pre-commit/"/>
      <url>/2020/12/21/git-%E6%8F%90%E4%BA%A4%E6%8A%A5%E9%94%99husky%20%3E%20pre-commit/</url>
      
        <content type="html"><![CDATA[<h4 id="git-提交报错"><a href="#git-提交报错" class="headerlink" title="git 提交报错"></a>git 提交报错</h4><p>用 vscode 的 gitlens 扩展，进行可视化的提交代码时，暂存了代码，然后点击 push 时，报错 husky &gt; pre-commit (node v12.13.0)</p><p>husky是一个githooks工具， 可以防止使用 Git hooks 的一些不好的 commit 或者 push，不深入研究。</p><span id="more"></span><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>这是本地项目中的.git 下的一个文件导致的提交失败，这个文件是 pre-commit 文件。找到项目中的.git 文件夹(需要显示隐藏文件才会出现)，进入就能看到关于 git 的一些文件。</p><p>.git - hooks - pre-commit（客户端钩子），它会在 git 键入提交信息前运行做代码风格检查，如果代码不符合相应规则，则报错。</p><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>1.将此文件删除</p><p>2.卸载 husky。第一种方法 npm uninstall husky –save；第二种方法：把 package.json 中的 devDependencies 节点下的 husky 库删掉，然后重新 npm i 就行</p><p>3.将 git commit -m “xxx” 改为 git commit –no-verify -m “xxx”</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器4.2-请求缓存</title>
      <link href="/2020/12/12/%E6%B5%8F%E8%A7%88%E5%99%A84.2-%E8%AF%B7%E6%B1%82%E7%BC%93%E5%AD%98/"/>
      <url>/2020/12/12/%E6%B5%8F%E8%A7%88%E5%99%A84.2-%E8%AF%B7%E6%B1%82%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><span id="more"></span><h4 id="一、强缓存"><a href="#一、强缓存" class="headerlink" title="一、强缓存"></a>一、强缓存</h4><h4 id="二、协商缓存"><a href="#二、协商缓存" class="headerlink" title="二、协商缓存"></a>二、协商缓存</h4>]]></content>
      
      
      <categories>
          
          <category> 基础-浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器4.1-浏览器缓存</title>
      <link href="/2020/12/12/%E6%B5%8F%E8%A7%88%E5%99%A84.1-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
      <url>/2020/12/12/%E6%B5%8F%E8%A7%88%E5%99%A84.1-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><span id="more"></span><h4 id="一、cookie"><a href="#一、cookie" class="headerlink" title="一、cookie"></a>一、cookie</h4><h4 id="二、sessionStorage"><a href="#二、sessionStorage" class="headerlink" title="二、sessionStorage"></a>二、sessionStorage</h4><h4 id="三、localStorage"><a href="#三、localStorage" class="headerlink" title="三、localStorage"></a>三、localStorage</h4>]]></content>
      
      
      <categories>
          
          <category> 基础-浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器4-从输入网址到呈现页面的过程</title>
      <link href="/2020/12/11/%E6%B5%8F%E8%A7%88%E5%99%A84-%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E5%91%88%E7%8E%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/12/11/%E6%B5%8F%E8%A7%88%E5%99%A84-%E4%BB%8E%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E5%91%88%E7%8E%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><span id="more"></span><p>核心：浏览器进程、网络进程、渲染进程</p><p><img src="/image/%E6%B5%8F%E8%A7%88%E5%99%A8.jpeg" alt="浏览器"></p>]]></content>
      
      
      <categories>
          
          <category> 基础-浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器3-tcp网络传输模型</title>
      <link href="/2020/12/11/%E6%B5%8F%E8%A7%88%E5%99%A83-tcp%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/12/11/%E6%B5%8F%E8%A7%88%E5%99%A83-tcp%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="TCP协议：如何保证页面文件能被完整的送达浏览器"><a href="#TCP协议：如何保证页面文件能被完整的送达浏览器" class="headerlink" title="TCP协议：如何保证页面文件能被完整的送达浏览器"></a>TCP协议：如何保证页面文件能被完整的送达浏览器</h4><span id="more"></span><p>衡量web性能时候有个指标FP(first paint)，指从页面加载到首次绘制的时长。网络加载速度是影响FP的一个重要因素。了解网络协议就变得十分重要。不管是http还是websocket都是基于TCP&#x2F;IP的。</p><h5 id="一个数据包的旅程"><a href="#一个数据包的旅程" class="headerlink" title="一个数据包的旅程"></a>一个数据包的旅程</h5><p>网络中的文件通常被分为很多数据包来传输，这些数据包在传输过程中很容易丢失或出错，如何保证他们的完整性呢？</p><p>互联网，是一套理念和协议组成的体系架构。其中，协议是一套众所周知的标准和规范，如果各方都同意使用，那么他们之间的沟通就变得毫无障碍。</p><h6 id="1-IP地址，把数据包送达指定主机"><a href="#1-IP地址，把数据包送达指定主机" class="headerlink" title="1.IP地址，把数据包送达指定主机"></a>1.IP地址，把数据包送达指定主机</h6><p>互联网上不同的在线设备都有唯一的地址，地址只是一个数字，这和大部分家庭收件地址类似，你只需要知道一个家庭的具体地址，就可以往这个地址发送包裹，这样物流系统就能把物品送到目的地。</p><h6 id="2-UDP，把数据包送达应用程序"><a href="#2-UDP，把数据包送达应用程序" class="headerlink" title="2.UDP，把数据包送达应用程序"></a>2.UDP，把数据包送达应用程序</h6><p>到达主机的数据包如何知道是交给浏览器还是交给英雄联盟呢，UDP头信息包含了源端口号和目的端口号，而且传输速度很快。</p><p>缺点：</p><p>1.虽然 UDP 可以校验数据是否正确，但是对于错误的数据包，UDP 并不提供重发机制，只是丢弃当前的包</p><p>2.而且 UDP 在发送之后也无法知道是否能达到目的地。</p><p>UDP一般用在不那么严格要求数据完整性的场景，如在线视频和互动游戏等。</p><h6 id="3-TCP，把数据包完整的送达应用程序"><a href="#3-TCP，把数据包完整的送达应用程序" class="headerlink" title="3.TCP，把数据包完整的送达应用程序"></a>3.TCP，把数据包完整的送达应用程序</h6><p>TCP头信息也包含了源端口号和目的端口号。</p><p>解决UDP的两个问题</p><p>1.数据包传输过程中容易丢失 &#x3D;&gt; 重传机制</p><p>​接收端在接收到数据包之后，需要发送确认数据包给发送端。所以当发送端发送了一个数据包之后，在规定时间内没有接收到接收端反馈的确认消息，则判断为数据包丢失，并触发发送端的重发机制</p><p>2.拆分的小数据包会经过不同的路由，并在不同的时间到达接收端，UDP不知道如何组装? &#x3D;&gt;数据包排序机制</p><p>​TCP头信息中除了源端口和目的端口号外，还有包排序信息</p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>简化的TCP网络传输模型，上层即应用层，底层即物理链路层</p><p><img src="/image/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93-3541206.png" alt="网络传输"></p><p>一个TCP连接的生命周期</p><p><img src="/image/%E4%B8%80%E4%B8%AATCP%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="一个TCP连接的生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> 基础-浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器2-浏览器多进程介绍</title>
      <link href="/2020/12/11/%E6%B5%8F%E8%A7%88%E5%99%A82-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/12/11/%E6%B5%8F%E8%A7%88%E5%99%A82-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h4 id="Chrome架构：仅仅打开一个页面，为什么有4个进程"><a href="#Chrome架构：仅仅打开一个页面，为什么有4个进程" class="headerlink" title="Chrome架构：仅仅打开一个页面，为什么有4个进程"></a>Chrome架构：仅仅打开一个页面，为什么有4个进程</h4><span id="more"></span><h5 id="并行处理"><a href="#并行处理" class="headerlink" title="并行处理"></a>并行处理</h5><p>同一时间处理多个任务，能大大提升性能</p><h5 id="进程和线程（像工厂和流水线的关系）"><a href="#进程和线程（像工厂和流水线的关系）" class="headerlink" title="进程和线程（像工厂和流水线的关系）"></a>进程和线程（像工厂和流水线的关系）</h5><p>​一个进程就是一个程序的运行实例。启动一个程序的时候，操作系统会为这个程序开辟一块内存，用来存放代码、执行中的数据、执行任务的主线程，</p><p>这样一个运行环境我们叫做一个进程。</p><p>​线程是由进程启动和管理的</p><p>​要注意的点：多进程处理</p><p>​1.进程中任意一个线程出错，都会导致进程崩溃</p><p>​2.线程之间共享进程中的数据</p><p>​3.当进程被关闭时，操作系统会将分配的内存回收</p><p>​4.进程之间的内容相互隔离</p><p>​进程隔离是为了保护各进程互不干扰，不会一个进程崩溃导致其他进程崩溃。进程之间通信有（IPC）机制</p><h5 id="单进程浏览器"><a href="#单进程浏览器" class="headerlink" title="单进程浏览器"></a>单进程浏览器</h5><p>1.不稳定。早期浏览器采用插件来实现web视频，web游戏等，插件是很不稳定的，插件崩溃导致进程就崩溃了；渲染引擎模块也不稳定，一段复杂的js代码就可能导致渲染引擎模块崩溃，进程也跟着崩溃了。</p><p>2.不流畅。所有模块在同一个进程，多个模块在同一个线程，没有更好运用并行处理，效率肯定不高；脚本和插件也会让浏览器变的卡顿；内存泄漏也会导致卡顿，而且浏览器运行一个复杂点的页面，再关闭，会存在内存不能完全回收的情况，导致内存越占越多，变得卡顿。</p><p>3.不安全。插件和脚本都可能对操作系统做恶意攻击</p><h5 id="早期的多进程架构"><a href="#早期的多进程架构" class="headerlink" title="早期的多进程架构"></a>早期的多进程架构</h5><p><img src="/image/%E6%97%A9%E6%9C%9F%E7%9A%84%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84.png" alt="早期的多进程结构"></p><p>1.解决不稳定。插件和渲染进程分离，不会相互影响</p><p>2.解决不流畅。每个页面有独立的渲染进程，不会相互影响，内存泄漏后关闭页面，内存回收，减少卡顿</p><p>3.解决不安全。渲染进程和插件进程运行在沙盒中，可以理解为操作系统为进程上了一把锁，即使有恶意插件或脚本，也不能越过沙盒去获取系统权限或读写敏感硬盘数据</p><h5 id="目前的多进程架构（2020-x2F-12-x2F-11）"><a href="#目前的多进程架构（2020-x2F-12-x2F-11）" class="headerlink" title="目前的多进程架构（2020&#x2F;12&#x2F;11）"></a>目前的多进程架构（2020&#x2F;12&#x2F;11）</h5><p>最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。</p><p><img src="/image/%E7%9B%AE%E5%89%8D%E7%9A%84%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84.png" alt="目前的多进程结构"></p><p>浏览器进程：主要负责界面显示，用户交互，子进程管理，同时提供存储功能</p><p>渲染进程：将html，css，js转换为网页，排版引擎Blink和js引擎都在这个进程中运行，chrome默认会为每个tab页创建一个渲染进程，并上锁，稳定流畅安全</p><p>GPU进程：GPU的使用最初是为了实现3D css效果，后来网页和chrome的ui界面都选择用GPU来绘制，所以架构上加了GPU进程</p><p>网络进程：负责网络资源的加载</p><p>插件进程：插件容易崩溃及可能存在恶意插件，为了安全和稳定，插件运行在这个沙盒环境里</p><p>缺点：</p><p>1.更高的资源占用：每个进程都会包含公共基础结构的副本（如js的运行环境）</p><p>2.更复杂的体系结构：耦合性和扩展性差</p><h5 id="未来面向服务的架构（SOA）"><a href="#未来面向服务的架构（SOA）" class="headerlink" title="未来面向服务的架构（SOA）"></a>未来面向服务的架构（SOA）</h5><p>Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型图：</p><p><img src="/image/%E6%9C%AA%E6%9D%A5%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84.png" alt="未来面向服务的多进程架构"></p><p>同时 Chrome 还提供灵活的弹性架构，在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上（如下图），Chrome 会将很多服务整合到一个进程中，从而节省内存占用。</p>]]></content>
      
      
      <categories>
          
          <category> 基础-浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器1-发展历史</title>
      <link href="/2020/12/10/%E6%B5%8F%E8%A7%88%E5%99%A81-%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/"/>
      <url>/2020/12/10/%E6%B5%8F%E8%A7%88%E5%99%A81-%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><span id="more"></span><p>浏览器工作原理这块的学习笔记和总结（找的课程学的），加深理解和记忆</p><h5 id="对于应用，浏览器一直很重要"><a href="#对于应用，浏览器一直很重要" class="headerlink" title="对于应用，浏览器一直很重要"></a>对于应用，浏览器一直很重要</h5><p>浏览器发展历程中三个大的进化路线</p><h6 id="1-应用程序web化"><a href="#1-应用程序web化" class="headerlink" title="1.应用程序web化"></a>1.应用程序web化</h6><p>随着云计算的普及和html5的快速发展，越来越多的应用转向了B&#x2F;S及浏览器&#x2F;服务端架构。</p><h6 id="2-web应用移动化"><a href="#2-web应用移动化" class="headerlink" title="2.web应用移动化"></a>2.web应用移动化</h6><p>还有技术层面的问题没有解决（如渲染流程复杂，性能不如原生，功能不如原生强大和灵活，无法离线使用，不能实时推送消息，移动端没有web应用的一级入口</p><h6 id="3-web操作系统化"><a href="#3-web操作系统化" class="headerlink" title="3.web操作系统化"></a>3.web操作系统化</h6><p>web操作系统这个概念可能有两层含义：一、利用web技术构建一个纯粹的操作系统，如chromeOS；二、浏览器底层结构往操作系统架构方向发展，这样发展肯定会导致许多的改变。（1.chrome朝着SOA即面向服务的架构（将不同的功能单元进行拆分，通过服务之间定义好协议和接口来联系起来）发展，未来很多模块会以服务的方式提供给上层应用；2.在浏览器引入对多种编程语言的支持，比如新支持的WebAssembly ; 3.简化渲染流程；4.加大对系统设备特性的支持; 5.提供对复杂web项目开发的支持。）</p><h5 id="为什么要学习浏览器工作原理"><a href="#为什么要学习浏览器工作原理" class="headerlink" title="为什么要学习浏览器工作原理"></a>为什么要学习浏览器工作原理</h5><h6 id="1-评估项目web开发的可行性"><a href="#1-评估项目web开发的可行性" class="headerlink" title="1.评估项目web开发的可行性"></a>1.评估项目web开发的可行性</h6><h6 id="2-从更高维度审视页面"><a href="#2-从更高维度审视页面" class="headerlink" title="2.从更高维度审视页面"></a>2.从更高维度审视页面</h6><p><u><strong>从url到页面渲染的中间过程看作一个黑盒，我们也能开发，但只有真正弄懂原理后才能把知识点串起来形成知识网络，才能写出更高效的代码，才能做好优化。</strong></u></p><h6 id="3-在快节奏的技术迭代中把握前端本质"><a href="#3-在快节奏的技术迭代中把握前端本质" class="headerlink" title="3.在快节奏的技术迭代中把握前端本质"></a>3.在快节奏的技术迭代中把握前端本质</h6><p>​2011年到现在，各种前端新技术层出不穷，Node.js对推动前端的发展起了很大作用，浏览器功能和整个前端开发环境不足以支撑日益增长的需求，导致Node.js快速发展。当前技术还有很多缺陷，所以才有快速的更新迭代，随着脚本执行效率的不断提高、页面渲染效率的提升、开发工具链的完善，前端生态会慢慢趋于平稳。</p><p>​如果了解浏览器工作机制，就能梳理出前端发展脉络，理解当前技术不足及演化方向。前端是如何针对这些缺陷做演进的呢？</p><p>​1.脚本执行速度问题。针对javascript的设计缺陷和执行效率的问题，可以从以下两个途径着手</p><p>​更新语言本身，如es6，es7，ts，推行起来容易</p><p>​颠覆性的使用新语言，如WebAssembly，需要编译器编译，所以体积小，执行效率高，但推行需要时间</p><p>​2.前端模块化开发。出现了WebComponents标准，react和vue都在渐进的适应并影响着WebComponents标准的制定</p><p>​3.渲染效率问题。如果理解浏览器渲染机制，就会知道现在的渲染机制依然存在缺陷，从而尽量避开这些坑，开发出更加高效的web应用。Chrome团队也在着手改善这些缺陷。</p>]]></content>
      
      
      <categories>
          
          <category> 基础-浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-vuex</title>
      <link href="/2020/12/02/vue-vuex/"/>
      <url>/2020/12/02/vue-vuex/</url>
      
        <content type="html"><![CDATA[<h4 id="Vuex是什么"><a href="#Vuex是什么" class="headerlink" title="Vuex是什么"></a>Vuex是什么</h4><p>Vuex是为Vue.js提供的状态管理模式&#x2F;工具。</p><span id="more"></span><h5 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h5><p><a href="https://vuex.vuejs.org/zh/api/#replacestate">https://vuex.vuejs.org/zh/api/#replacestate</a></p><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>当多个组件共享状态时，会出现1.多个视图依赖同一个状态 2.不同视图的行为会改变同一个状态。这种复杂庞大的系统如果采用props和emit事件的方式进行父子组件传值会导致代码很难维护，兄弟组件的传值更是不方便（bus中央事件总线和父组件中转）</p><p>将共享状态抽离，进行集中管理，我们的组件树构成一个巨大的‘视图’，无论树的哪个位置，都能获取状态或触发行为改变状态。这就回到了Vuex。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><h5 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state,getter,mutation,action, <span class="title function_">module</span>(模块)</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vuex --save</span><br></pre></td></tr></table></figure><h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;store.js&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store</span><br><span class="line">  。。。</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 挂载后组件内就可以用this.$store。对于js文件，需要引入store，然后使用store，不能用this。</span></span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h6 id="集中时的使用"><a href="#集中时的使用" class="headerlink" title="集中时的使用"></a>集中时的使用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state定义</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;状态&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// state使用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">name</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation定义</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">changeName</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">    state.<span class="property">name</span> = payload || <span class="string">&#x27;改变状态&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mutation提交</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeName&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeName&#x27;</span>,<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;changeName&#x27;</span>,</span><br><span class="line">  <span class="attr">payload</span>: <span class="string">&#x27;此时mutation里接收的第二个参数payload是整个对象&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 规定mutations里不能异步操作，虽然不会报错，但会影响调试工具及状态追踪等，还是按规定来，用actions异步操作，提交mutation来更改状态</span></span><br><span class="line"><span class="comment">// actions定义</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="title function_">commitMutations</span>(<span class="params">context, payload</span>) &#123;</span><br><span class="line">    <span class="comment">// context对象可以看作就是store的拷贝</span></span><br><span class="line">    <span class="comment">// 可以获取state</span></span><br><span class="line">    <span class="keyword">let</span> name = context.<span class="property">state</span>.<span class="property">name</span></span><br><span class="line">    <span class="comment">// 提交mutations</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&#x27;changeName&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// actions触发</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;commitMutations&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;commitMutations&#x27;</span>,<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;commitMutations&#x27;</span>,</span><br><span class="line">  <span class="attr">payload</span>: <span class="string">&#x27;此时actions里接收的第二个参数payload是整个对象&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getters，可以理解为一个计算属性，可以处理状态并缓存，当处理状态需要的依赖改变时才会重新计算</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">newName</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">name</span>+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">newName</span></span><br></pre></td></tr></table></figure><h6 id="模块时的使用"><a href="#模块时的使用" class="headerlink" title="模块时的使用"></a>模块时的使用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;<span class="attr">name</span>: <span class="string">&#x27;module&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">// ?</span></span><br><span class="line">  state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动导入modules模块，挂载</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./module&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>) <span class="comment">// webpack的一个api，第一个参数是路径，第二个参数是是否匹配子目录，第三个是匹配什么文件</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = item.<span class="title function_">replace</span>(<span class="regexp">/\.\/|\.js/g</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 得到module</span></span><br><span class="line">  <span class="keyword">let</span> last = keys.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[keys.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="property">length</span>-<span class="number">1</span>] <span class="comment">// 最后一级文件夹的名字</span></span><br><span class="line">  obj[last] = <span class="variable language_">module</span>[item].<span class="property">default</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    ...obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>[<span class="string">&#x27;module&#x27;</span>].<span class="property">name</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;module/changeName&#x27;</span>, &#123;<span class="attr">payload</span>:<span class="string">&#x27;payload&#x27;</span>&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;module/commitMutations&#x27;</span>, &#123;<span class="attr">payload</span>:<span class="string">&#x27;payload&#x27;</span>&#125;)</span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;module&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">actionsFunc</span>: <span class="string">&#x27;commitMutations&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">actionsFunc</span>(&#123;<span class="attr">payload</span>:<span class="string">&#x27;payload&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h6 id="vuex辅助函数的使用"><a href="#vuex辅助函数的使用" class="headerlink" title="vuex辅助函数的使用"></a>vuex辅助函数的使用</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mapState, mapGetters, mapMutations, mapActions</span></span><br><span class="line"><span class="comment">// mapState, mapGetters用在computed里，mapMutations, mapActions用在methods里最好</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  ...<span class="title function_">mapGetters</span>(&#123;</span><br><span class="line">    <span class="attr">newName</span>: <span class="string">&#x27;newName&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  ...<span class="title function_">mapActions</span>([</span><br><span class="line">    <span class="string">&#x27;commitMutations&#x27;</span></span><br><span class="line">  ]),</span><br><span class="line">  ...<span class="title function_">mapMutations</span>([</span><br><span class="line">    <span class="string">&#x27;changeName&#x27;</span></span><br><span class="line">  ])</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">changeName</span>(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">commitMutations</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">  <span class="comment">// this.$store.commit(&#x27;changeName&#x27;,&#x27;d&#x27;)</span></span><br><span class="line">  <span class="comment">// this.$store.dispatch(&#x27;commitMutations&#x27;,&#x27;c&#x27;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="mutation-type"><a href="#mutation-type" class="headerlink" title="mutation-type"></a>mutation-type</h6><p>一种复杂项目的优化代码可维护性的方式，我暂时不喜欢用</p><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><p>列表封装，每个列表页配置一个状态管理module，由封装的组件去触发</p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>vuex 存储状态 刷新丢失问题 优化，1.vue-along插件，2.localStorage(不建议，小数据干脆直接用localstorage存得了)，3.刷新就重新请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeunload&quot;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">media</span>.<span class="property">openid</span> = <span class="number">88833888</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;stateData&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;stateData&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">replaceState</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>, data))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-string, array的常用方法</title>
      <link href="/2020/12/01/js-string,%20array%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2020/12/01/js-string,%20array%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>String, array</p><span id="more"></span><h4 id="1-字符串方法"><a href="#1-字符串方法" class="headerlink" title="1.字符串方法"></a>1.字符串方法</h4><h5 id="1-1方法，都不改变原字符串"><a href="#1-1方法，都不改变原字符串" class="headerlink" title="1.1方法，都不改变原字符串"></a>1.1方法，都不改变原字符串</h5><p>let str &#x3D; ‘abcdEFG’</p><h6 id="1-1-1-str-charAt-返回指定位置的字符"><a href="#1-1-1-str-charAt-返回指定位置的字符" class="headerlink" title="1.1.1 str.charAt();返回指定位置的字符"></a>1.1.1 str.charAt();返回指定位置的字符</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">charAt</span>(<span class="number">1</span>) <span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="1-1-2-str-charCodeAt-返回指定位置的unicode码"><a href="#1-1-2-str-charCodeAt-返回指定位置的unicode码" class="headerlink" title="1.1.2 str.charCodeAt();返回指定位置的unicode码"></a>1.1.2 str.charCodeAt();返回指定位置的unicode码</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">charCodeAt</span>(<span class="number">1</span>) <span class="comment">// 98</span></span><br></pre></td></tr></table></figure><h6 id="1-1-3-str-concat-拼接字符串"><a href="#1-1-3-str-concat-拼接字符串" class="headerlink" title="1.1.3 str.concat();拼接字符串"></a>1.1.3 str.concat();拼接字符串</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">concat</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>) <span class="comment">// &#x27;abcdEFGa1&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="1-1-4-str-split-‘’-转为数组"><a href="#1-1-4-str-split-‘’-转为数组" class="headerlink" title="1.1.4 str.split(‘’);转为数组"></a>1.1.4 str.split(‘’);转为数组</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// [a,b,c,d,E,F,G]</span></span><br></pre></td></tr></table></figure><h6 id="1-1-5-str-slice-1-2-截取字符串，左闭右开，如果是负数，则是字符串长度-这个负数的值，一般不要写负数"><a href="#1-1-5-str-slice-1-2-截取字符串，左闭右开，如果是负数，则是字符串长度-这个负数的值，一般不要写负数" class="headerlink" title="1.1.5 str.slice(1,2);截取字符串，左闭右开，如果是负数，则是字符串长度+这个负数的值，一般不要写负数"></a>1.1.5 str.slice(1,2);截取字符串，左闭右开，如果是负数，则是字符串长度+这个负数的值，一般不要写负数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="1-1-6-str-substring-1-2-截取字符串，左闭右开，如果是负数，当0来做，以两个参数中小的值作为起始"><a href="#1-1-6-str-substring-1-2-截取字符串，左闭右开，如果是负数，当0来做，以两个参数中小的值作为起始" class="headerlink" title="1.1.6 str.substring(1,2);截取字符串，左闭右开，如果是负数，当0来做，以两个参数中小的值作为起始"></a>1.1.6 str.substring(1,2);截取字符串，左闭右开，如果是负数，当0来做，以两个参数中小的值作为起始</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">substring</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="1-1-7-str-substr-1-3-截取字符串，第二个参数是长度，一般不要写负数，负数第一个同slice，第二个同substring"><a href="#1-1-7-str-substr-1-3-截取字符串，第二个参数是长度，一般不要写负数，负数第一个同slice，第二个同substring" class="headerlink" title="1.1.7 str.substr(1,3);截取字符串，第二个参数是长度，一般不要写负数，负数第一个同slice，第二个同substring"></a>1.1.7 str.substr(1,3);截取字符串，第二个参数是长度，一般不要写负数，负数第一个同slice，第二个同substring</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">substr</span>(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">// &#x27;bcd&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="1-1-8-str-includes-第二个参数设置从哪开始找"><a href="#1-1-8-str-includes-第二个参数设置从哪开始找" class="headerlink" title="1.1.8 str.includes(); 第二个参数设置从哪开始找"></a>1.1.8 str.includes(); 第二个参数设置从哪开始找</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">includes</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h6 id="1-1-9-str-match-匹配字符串，返回匹配信息"><a href="#1-1-9-str-match-匹配字符串，返回匹配信息" class="headerlink" title="1.1.9 str.match(); 匹配字符串，返回匹配信息"></a>1.1.9 str.match(); 匹配字符串，返回匹配信息</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">match</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// [&quot;a&quot;, index: 0, input: &quot;abcdEFG&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h6 id="1-1-10-str-search-同indexOf，只是缺少第二个参数，不能定义起始位置"><a href="#1-1-10-str-search-同indexOf，只是缺少第二个参数，不能定义起始位置" class="headerlink" title="1.1.10 str.search(); 同indexOf，只是缺少第二个参数，不能定义起始位置"></a>1.1.10 str.search(); 同indexOf，只是缺少第二个参数，不能定义起始位置</h6><h6 id="1-1-9-str-startsWith-str-endsWith-第二个参数是开始或结束位置，传数字"><a href="#1-1-9-str-startsWith-str-endsWith-第二个参数是开始或结束位置，传数字" class="headerlink" title="1.1.9 str.startsWith(), str.endsWith(); 第二个参数是开始或结束位置，传数字"></a>1.1.9 str.startsWith(), str.endsWith(); 第二个参数是开始或结束位置，传数字</h6><h6 id="1-1-10-str-toLowerCase-str-toUpperCase"><a href="#1-1-10-str-toLowerCase-str-toUpperCase" class="headerlink" title="1.1.10 str.toLowerCase(), str.toUpperCase()"></a>1.1.10 str.toLowerCase(), str.toUpperCase()</h6><h6 id="1-1-11-str-indexOf-str-lastIndexOf-返回第一次或最后一次出现的下标，没有返回-1"><a href="#1-1-11-str-indexOf-str-lastIndexOf-返回第一次或最后一次出现的下标，没有返回-1" class="headerlink" title="1.1.11 str.indexOf(), str.lastIndexOf(); 返回第一次或最后一次出现的下标，没有返回-1"></a>1.1.11 str.indexOf(), str.lastIndexOf(); 返回第一次或最后一次出现的下标，没有返回-1</h6><h6 id="1-1-12-str-match-匹配字符串，返回匹配信息"><a href="#1-1-12-str-match-匹配字符串，返回匹配信息" class="headerlink" title="1.1.12 str.match(); 匹配字符串，返回匹配信息"></a>1.1.12 str.match(); 匹配字符串，返回匹配信息</h6><h6 id="1-1-13-str-replace-‘a’-’b’"><a href="#1-1-13-str-replace-‘a’-’b’" class="headerlink" title="1.1.13 str.replace(‘a’,’b’)"></a>1.1.13 str.replace(‘a’,’b’)</h6><h6 id="1-1-14-str-repeat-2-重复两遍"><a href="#1-1-14-str-repeat-2-重复两遍" class="headerlink" title="1.1.14 str.repeat(2); 重复两遍"></a>1.1.14 str.repeat(2); 重复两遍</h6><h5 id="1-2-字符串中出现次数最多的字符"><a href="#1-2-字符串中出现次数最多的字符" class="headerlink" title="1.2 字符串中出现次数最多的字符"></a>1.2 字符串中出现次数最多的字符</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 出现最多的字符是哪个</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">maxLetter</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj[str.<span class="title function_">charAt</span>(i)]) &#123;</span><br><span class="line">      obj[str.<span class="title function_">charAt</span>(i)] = <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      obj[str.<span class="title function_">charAt</span>(i)] ++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> maxChar = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(max &lt; obj[i]) &#123;</span><br><span class="line">      max = obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj[i] === max) &#123;</span><br><span class="line">      maxChar.<span class="title function_">push</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(max, maxChar)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-数组的方法"><a href="#2-数组的方法" class="headerlink" title="2.数组的方法"></a>2.数组的方法</h4><h5 id="2-1常用方法"><a href="#2-1常用方法" class="headerlink" title="2.1常用方法"></a>2.1常用方法</h5><p>不改变原数组:</p><p>Join() 返回字符串</p><p>Map(), filter() , slice(1,2), concat()返回数组, 浅拷贝，顶多第一层算深拷贝</p><p>Reduce() 返回和</p><p>Find(), findIndex() 返回那一项，那一项的下标</p><p>forEach() 没有返回值</p><p>Every(function), some(function)，includes() 返回boolean</p><p>indexOf(),lastIndexOf() 返回下标</p><p>改变原数组：</p><p>Push, pop, unshift, shift, splice, sort, reverse</p><h5 id="2-2-题"><a href="#2-2-题" class="headerlink" title="2.2 题"></a>2.2 题</h5><h6 id="2-2-1去重https-segmentfault-com-a-1190000016418021-utm-source-tag-newest"><a href="#2-2-1去重https-segmentfault-com-a-1190000016418021-utm-source-tag-newest" class="headerlink" title="2.2.1去重https://segmentfault.com/a/1190000016418021?utm_source=tag-newest"></a>2.2.1去重<a href="https://segmentfault.com/a/1190000016418021?utm_source=tag-newest">https://segmentfault.com/a/1190000016418021?utm_source=tag-newest</a></h6><p>1.利用obj键不能重复会出现’true’和true误认为重复，不同引用相同表现的对象也认为重复</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> array = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!array.<span class="title function_">includes</span>(item)) &#123; <span class="comment">// indexOf会把NaN和&#x27;NaN&#x27;去掉不带引号的</span></span><br><span class="line">      array.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>如果数组的元素是对象，则达不到去重的目的</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev, cur], [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.还有Map和Set的es6的方法，到复习es6的时候再补上</p><h6 id="2-2-2排序"><a href="#2-2-2排序" class="headerlink" title="2.2.2排序"></a>2.2.2排序</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">冒泡</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortFunc</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.<span class="property">length</span>; i &lt; len; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>, len = arr.<span class="property">length</span>; j &lt; len; j ++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[i] &lt; arr[j]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">        arr[i] = arr[j]</span><br><span class="line">        arr[j] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sort</span><br><span class="line">function sortFunc(arr) &#123;</span><br><span class="line">  let copyArr = JSON.parse(JSON.stringify(arr))</span><br><span class="line">  copyArr.sort((x,y) =&gt; &#123;</span><br><span class="line">    return x.age-y.age</span><br><span class="line">  &#125;)</span><br><span class="line">  return copyArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-flexbox</title>
      <link href="/2020/12/01/css-flex/"/>
      <url>/2020/12/01/css-flex/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>flex，是flexible box的缩写，意为弹性布局，为盒模型提供一定的灵活性。是2009年W3C提出的一种布局方案，支持IE10+。</p><span id="more"></span><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>采用 Flex 布局的元素，称为容器。它的所有子元素自动成为容器成员，称为项目。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 任何容器都可以指定为弹性布局，设置后子元素的<span class="attribute">float</span>，<span class="attribute">clear</span>，<span class="attribute">vertical-align</span>属性失效</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line">// 行内元素可以设置inline-<span class="attribute">flex</span>，设置后可以设置宽度</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-设置在容器上的属性"><a href="#1-设置在容器上的属性" class="headerlink" title="1. 设置在容器上的属性"></a>1. 设置在容器上的属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span></span><br><span class="line"><span class="attribute">flex-wrap</span></span><br><span class="line"><span class="attribute">flex-flow</span></span><br><span class="line"><span class="attribute">justify-content</span></span><br><span class="line"><span class="attribute">align-items</span></span><br><span class="line"><span class="attribute">align-content</span></span><br></pre></td></tr></table></figure><h6 id="1-1-flex-direction"><a href="#1-1-flex-direction" class="headerlink" title="1.1 flex-direction"></a>1.1 flex-direction</h6><p>规定方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// （默认）水平方向，从左到右 | 水平方向，从右到左 | 垂直方向，从上到下 | 垂直方向，从下到上</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2-flex-wrap"><a href="#1-2-flex-wrap" class="headerlink" title="1.2 flex-wrap"></a>1.2 flex-wrap</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// （默认）不换行 ｜ 换行 ｜ 换行，第一行在下方</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-3-flex-flow"><a href="#1-3-flex-flow" class="headerlink" title="1.3 flex-flow"></a>1.3 flex-flow</h6><p>Flex-flow是flex-direction和flex-wrap的简写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 默认</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-4-justify-content"><a href="#1-4-justify-content" class="headerlink" title="1.4 justify-content"></a>1.4 justify-content</h6><p>水平方向上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// （默认）左对齐</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-5-align-items"><a href="#1-5-align-items" class="headerlink" title="1.5 align-items"></a>1.5 align-items</h6><p>垂直方向上的对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// （默认）stretch:如果项目没有设置高度或设为auto，将占满整个容器的高度。 baseline:项目的第一行文字的基线对齐</span><br><span class="line">.box &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-6-align-content"><a href="#1-6-align-content" class="headerlink" title="1.6 align-content"></a>1.6 align-content</h6><p>多根轴线（多行）的垂直方向上的对齐方式，如果只有一根轴线，则不起作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// （默认）stretch:轴线占满整个垂直方向</span><br><span class="line">.box&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | stretch | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-设置在项目上的属性"><a href="#2-设置在项目上的属性" class="headerlink" title="2. 设置在项目上的属性"></a>2. 设置在项目上的属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">order</span></span><br><span class="line"><span class="attribute">flex-grow</span></span><br><span class="line"><span class="attribute">flex-shrink</span></span><br><span class="line"><span class="attribute">flex-basis</span></span><br><span class="line"><span class="attribute">flex</span></span><br><span class="line"><span class="attribute">align-self</span></span><br></pre></td></tr></table></figure><h6 id="2-1-order"><a href="#2-1-order" class="headerlink" title="2.1 order"></a>2.1 order</h6><p>定义了项目排列的顺序，数值越小，排列越靠前，默认是0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-flex-grow"><a href="#2-2-flex-grow" class="headerlink" title="2.2 flex-grow"></a>2.2 flex-grow</h6><p>定义项目的放大比例，默认为0，即有剩余空间也不放大。</p><h6 id="2-3-flex-shrink"><a href="#2-3-flex-shrink" class="headerlink" title="2.3 flex-shrink"></a>2.3 flex-shrink</h6><p>定义项目的缩小比例，默认为1，即如果空间不足，项目将缩小</p><h6 id="2-4-flex-basis"><a href="#2-4-flex-basis" class="headerlink" title="2.4 flex-basis"></a>2.4 flex-basis</h6><p>定义了在分配剩余空间之前，项目在水平方向占据的空间大小，默认为auto，即项目本来的大小，浏览器根据这个属性计算剩余空间大小。可以像width属性一样设置（如500px），则项目将占据固定空间。</p><h6 id="2-5-flex"><a href="#2-5-flex" class="headerlink" title="2.5 flex"></a>2.5 flex</h6><p>flex属性是flex-grow, flex-shrink, flex-basis的简写，默认为0 1 auto，后两个属性可选。建议用此属性！而不是分离的写三个属性，因为浏览器会推算相关值(?)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 该属性有两个快捷值，auto（<span class="number">1</span> <span class="number">1</span> auto）和<span class="attribute">none</span>（<span class="number">0</span> <span class="number">0</span> auto）</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"> <span class="attribute">flex</span>: auto | none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-6-align-self"><a href="#2-6-align-self" class="headerlink" title="2.6 align-self"></a>2.6 align-self</h6><p>允许不同于其他项目的对齐方式，覆盖align-items，默认值为auto，即继承父元素的align-items属性，如果没有父元素，则等同stretch，该属性可取6个值，除了auto，其余的都和align-items一致。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2020/11/30/helloworld/"/>
      <url>/2020/11/30/helloworld/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h5 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h5><h6 id="写博客主要是梳理知识脉络，加强理解，当作快速查找和提升效率的文档，也希望能帮助到学习路上的每个人。"><a href="#写博客主要是梳理知识脉络，加强理解，当作快速查找和提升效率的文档，也希望能帮助到学习路上的每个人。" class="headerlink" title="写博客主要是梳理知识脉络，加强理解，当作快速查找和提升效率的文档，也希望能帮助到学习路上的每个人。"></a>写博客主要是梳理知识脉络，加强理解，当作快速查找和提升效率的文档，也希望能帮助到学习路上的每个人。</h6><h6 id="当然此博客初衷是自己看，所以有些未注明的转载，有些因为自己理解而写的不够详细的地方（如果您正在学习这些内容却遇到了此情况请移驾其他优秀博客网站）"><a href="#当然此博客初衷是自己看，所以有些未注明的转载，有些因为自己理解而写的不够详细的地方（如果您正在学习这些内容却遇到了此情况请移驾其他优秀博客网站）" class="headerlink" title="当然此博客初衷是自己看，所以有些未注明的转载，有些因为自己理解而写的不够详细的地方（如果您正在学习这些内容却遇到了此情况请移驾其他优秀博客网站）"></a>当然此博客初衷是自己看，所以有些未注明的转载，有些因为自己理解而写的不够详细的地方（如果您正在学习这些内容却遇到了此情况请移驾其他优秀博客网站）</h6><p>由于某平台部署需要离谱的审核，所以迁移到github。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
